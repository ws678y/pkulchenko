-- shaderc shdc | SHADERC GLSL to SPIR-V
-- auto-generated api from ffi headers
local api=
  {
  ["shaderc_source_language_glsl"] = { type ="value", },
  ["shaderc_source_language_hlsl"] = { type ="value", },
  ["shaderc_glsl_vertex_shader"] = { type ="value", },
  ["shaderc_glsl_fragment_shader"] = { type ="value", },
  ["shaderc_glsl_compute_shader"] = { type ="value", },
  ["shaderc_glsl_geometry_shader"] = { type ="value", },
  ["shaderc_glsl_tess_control_shader"] = { type ="value", },
  ["shaderc_glsl_tess_evaluation_shader"] = { type ="value", },
  ["shaderc_glsl_infer_from_source"] = { type ="value", },
  ["shaderc_glsl_default_vertex_shader"] = { type ="value", },
  ["shaderc_glsl_default_fragment_shader"] = { type ="value", },
  ["shaderc_glsl_default_compute_shader"] = { type ="value", },
  ["shaderc_glsl_default_geometry_shader"] = { type ="value", },
  ["shaderc_glsl_default_tess_control_shader"] = { type ="value", },
  ["shaderc_glsl_default_tess_evaluation_shader"] = { type ="value", },
  ["shaderc_spirv_assembly"] = { type ="value", },
  ["shaderc_target_env_vulkan"] = { type ="value", },
  ["shaderc_target_env_opengl"] = { type ="value", },
  ["shaderc_target_env_opengl_compat"] = { type ="value", },
  ["shaderc_target_env_default"] = { type ="value", },
  ["shaderc_profile_none"] = { type ="value", },
  ["shaderc_profile_core"] = { type ="value", },
  ["shaderc_profile_compatibility"] = { type ="value", },
  ["shaderc_profile_es"] = { type ="value", },
  ["shaderc_compilation_status_success"] = { type ="value", },
  ["shaderc_compilation_status_invalid_stage"] = { type ="value", },
  ["shaderc_compilation_status_compilation_error"] = { type ="value", },
  ["shaderc_compilation_status_internal_error"] = { type ="value", },
  ["shaderc_compilation_status_null_result_object"] = { type ="value", },
  ["shaderc_compilation_status_invalid_assembly"] = { type ="value", },
  ["shaderc_optimization_level_zero"] = { type ="value", },
  ["shaderc_optimization_level_size"] = { type ="value", },
  ["shaderc_limit_max_lights"] = { type ="value", },
  ["shaderc_limit_max_clip_planes"] = { type ="value", },
  ["shaderc_limit_max_texture_units"] = { type ="value", },
  ["shaderc_limit_max_texture_coords"] = { type ="value", },
  ["shaderc_limit_max_vertex_attribs"] = { type ="value", },
  ["shaderc_limit_max_vertex_uniform_components"] = { type ="value", },
  ["shaderc_limit_max_varying_floats"] = { type ="value", },
  ["shaderc_limit_max_vertex_texture_image_units"] = { type ="value", },
  ["shaderc_limit_max_combined_texture_image_units"] = { type ="value", },
  ["shaderc_limit_max_texture_image_units"] = { type ="value", },
  ["shaderc_limit_max_fragment_uniform_components"] = { type ="value", },
  ["shaderc_limit_max_draw_buffers"] = { type ="value", },
  ["shaderc_limit_max_vertex_uniform_vectors"] = { type ="value", },
  ["shaderc_limit_max_varying_vectors"] = { type ="value", },
  ["shaderc_limit_max_fragment_uniform_vectors"] = { type ="value", },
  ["shaderc_limit_max_vertex_output_vectors"] = { type ="value", },
  ["shaderc_limit_max_fragment_input_vectors"] = { type ="value", },
  ["shaderc_limit_min_program_texel_offset"] = { type ="value", },
  ["shaderc_limit_max_program_texel_offset"] = { type ="value", },
  ["shaderc_limit_max_clip_distances"] = { type ="value", },
  ["shaderc_limit_max_compute_work_group_count_x"] = { type ="value", },
  ["shaderc_limit_max_compute_work_group_count_y"] = { type ="value", },
  ["shaderc_limit_max_compute_work_group_count_z"] = { type ="value", },
  ["shaderc_limit_max_compute_work_group_size_x"] = { type ="value", },
  ["shaderc_limit_max_compute_work_group_size_y"] = { type ="value", },
  ["shaderc_limit_max_compute_work_group_size_z"] = { type ="value", },
  ["shaderc_limit_max_compute_uniform_components"] = { type ="value", },
  ["shaderc_limit_max_compute_texture_image_units"] = { type ="value", },
  ["shaderc_limit_max_compute_image_uniforms"] = { type ="value", },
  ["shaderc_limit_max_compute_atomic_counters"] = { type ="value", },
  ["shaderc_limit_max_compute_atomic_counter_buffers"] = { type ="value", },
  ["shaderc_limit_max_varying_components"] = { type ="value", },
  ["shaderc_limit_max_vertex_output_components"] = { type ="value", },
  ["shaderc_limit_max_geometry_input_components"] = { type ="value", },
  ["shaderc_limit_max_geometry_output_components"] = { type ="value", },
  ["shaderc_limit_max_fragment_input_components"] = { type ="value", },
  ["shaderc_limit_max_image_units"] = { type ="value", },
  ["shaderc_limit_max_combined_image_units_and_fragment_outputs"] = { type ="value", },
  ["shaderc_limit_max_combined_shader_output_resources"] = { type ="value", },
  ["shaderc_limit_max_image_samples"] = { type ="value", },
  ["shaderc_limit_max_vertex_image_uniforms"] = { type ="value", },
  ["shaderc_limit_max_tess_control_image_uniforms"] = { type ="value", },
  ["shaderc_limit_max_tess_evaluation_image_uniforms"] = { type ="value", },
  ["shaderc_limit_max_geometry_image_uniforms"] = { type ="value", },
  ["shaderc_limit_max_fragment_image_uniforms"] = { type ="value", },
  ["shaderc_limit_max_combined_image_uniforms"] = { type ="value", },
  ["shaderc_limit_max_geometry_texture_image_units"] = { type ="value", },
  ["shaderc_limit_max_geometry_output_vertices"] = { type ="value", },
  ["shaderc_limit_max_geometry_total_output_components"] = { type ="value", },
  ["shaderc_limit_max_geometry_uniform_components"] = { type ="value", },
  ["shaderc_limit_max_geometry_varying_components"] = { type ="value", },
  ["shaderc_limit_max_tess_control_input_components"] = { type ="value", },
  ["shaderc_limit_max_tess_control_output_components"] = { type ="value", },
  ["shaderc_limit_max_tess_control_texture_image_units"] = { type ="value", },
  ["shaderc_limit_max_tess_control_uniform_components"] = { type ="value", },
  ["shaderc_limit_max_tess_control_total_output_components"] = { type ="value", },
  ["shaderc_limit_max_tess_evaluation_input_components"] = { type ="value", },
  ["shaderc_limit_max_tess_evaluation_output_components"] = { type ="value", },
  ["shaderc_limit_max_tess_evaluation_texture_image_units"] = { type ="value", },
  ["shaderc_limit_max_tess_evaluation_uniform_components"] = { type ="value", },
  ["shaderc_limit_max_tess_patch_components"] = { type ="value", },
  ["shaderc_limit_max_patch_vertices"] = { type ="value", },
  ["shaderc_limit_max_tess_gen_level"] = { type ="value", },
  ["shaderc_limit_max_viewports"] = { type ="value", },
  ["shaderc_limit_max_vertex_atomic_counters"] = { type ="value", },
  ["shaderc_limit_max_tess_control_atomic_counters"] = { type ="value", },
  ["shaderc_limit_max_tess_evaluation_atomic_counters"] = { type ="value", },
  ["shaderc_limit_max_geometry_atomic_counters"] = { type ="value", },
  ["shaderc_limit_max_fragment_atomic_counters"] = { type ="value", },
  ["shaderc_limit_max_combined_atomic_counters"] = { type ="value", },
  ["shaderc_limit_max_atomic_counter_bindings"] = { type ="value", },
  ["shaderc_limit_max_vertex_atomic_counter_buffers"] = { type ="value", },
  ["shaderc_limit_max_tess_control_atomic_counter_buffers"] = { type ="value", },
  ["shaderc_limit_max_tess_evaluation_atomic_counter_buffers"] = { type ="value", },
  ["shaderc_limit_max_geometry_atomic_counter_buffers"] = { type ="value", },
  ["shaderc_limit_max_fragment_atomic_counter_buffers"] = { type ="value", },
  ["shaderc_limit_max_combined_atomic_counter_buffers"] = { type ="value", },
  ["shaderc_limit_max_atomic_counter_buffer_size"] = { type ="value", },
  ["shaderc_limit_max_transform_feedback_buffers"] = { type ="value", },
  ["shaderc_limit_max_transform_feedback_interleaved_components"] = { type ="value", },
  ["shaderc_limit_max_cull_distances"] = { type ="value", },
  ["shaderc_limit_max_combined_clip_and_cull_distances"] = { type ="value", },
  ["shaderc_limit_max_samples"] = { type ="value", },
  ["shaderc_include_type_relative"] = { type ="value", },
  ["shaderc_include_type_standard"] = { type ="value", },
  ["shaderc_compiler_initialize"] = { type ="function",
    description = "",
    returns = "(shaderc_compiler_t)",
    args = "(void)", },
  ["shaderc_compiler_release"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compiler_t)", },
  ["shaderc_compile_options_initialize"] = { type ="function",
    description = "",
    returns = "(shaderc_compile_options_t)",
    args = "(void)", },
  ["shaderc_compile_options_clone"] = { type ="function",
    description = "",
    returns = "(shaderc_compile_options_t)",
    args = "(const shaderc_compile_options_t options)", },
  ["shaderc_compile_options_release"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options)", },
  ["shaderc_compile_options_add_macro_definition"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options, const char* name, size_t name_length, const char* value, size_t value_length)", },
  ["shaderc_compile_options_set_source_language"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options, shaderc_source_language lang)", },
  ["shaderc_compile_options_set_generate_debug_info"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options)", },
  ["shaderc_compile_options_set_optimization_level"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options, shaderc_optimization_level level)", },
  ["shaderc_compile_options_set_forced_version_profile"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options, int version, shaderc_profile profile)", },
  ["shaderc_compile_options_set_include_callbacks"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options, shaderc_include_resolve_fn resolver, shaderc_include_result_release_fn result_releaser, void* user_data)", },
  ["shaderc_compile_options_set_suppress_warnings"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options)", },
  ["shaderc_compile_options_set_target_env"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options, shaderc_target_env target, uint32_t version)", },
  ["shaderc_compile_options_set_warnings_as_errors"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options)", },
  ["shaderc_compile_options_set_limit"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compile_options_t options, shaderc_limit limit, int value)", },
  ["shaderc_compile_into_spv"] = { type ="function",
    description = "",
    returns = "(shaderc_compilation_result_t)",
    args = "(const shaderc_compiler_t compiler, const char* source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char* input_file_name, const char* entry_point_name, const shaderc_compile_options_t additional_options)", },
  ["shaderc_compile_into_spv_assembly"] = { type ="function",
    description = "",
    returns = "(shaderc_compilation_result_t)",
    args = "(const shaderc_compiler_t compiler, const char* source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char* input_file_name, const char* entry_point_name, const shaderc_compile_options_t additional_options)", },
  ["shaderc_compile_into_preprocessed_text"] = { type ="function",
    description = "",
    returns = "(shaderc_compilation_result_t)",
    args = "(const shaderc_compiler_t compiler, const char* source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char* input_file_name, const char* entry_point_name, const shaderc_compile_options_t additional_options)", },
  ["shaderc_assemble_into_spv"] = { type ="function",
    description = "",
    returns = "(shaderc_compilation_result_t)",
    args = "(const shaderc_compiler_t compiler, const char* source_assembly, size_t source_assembly_size, const shaderc_compile_options_t additional_options)", },
  ["shaderc_result_release"] = { type ="function",
    description = "",
    returns = "()",
    args = "(shaderc_compilation_result_t result)", },
  ["shaderc_result_get_length"] = { type ="function",
    description = "",
    returns = "(size_t)",
    args = "(const shaderc_compilation_result_t result)", },
  ["shaderc_result_get_num_warnings"] = { type ="function",
    description = "",
    returns = "(size_t)",
    args = "(const shaderc_compilation_result_t result)", },
  ["shaderc_result_get_num_errors"] = { type ="function",
    description = "",
    returns = "(size_t)",
    args = "(const shaderc_compilation_result_t result)", },
  ["shaderc_result_get_compilation_status"] = { type ="function",
    description = "",
    returns = "(shaderc_compilation_status)",
    args = "(const shaderc_compilation_result_t)", },
  ["shaderc_result_get_bytes"] = { type ="function",
    description = "",
    returns = "(const char*)",
    valuetype = "string",
    args = "(const shaderc_compilation_result_t result)", },
  ["shaderc_result_get_error_message"] = { type ="function",
    description = "",
    returns = "(const char*)",
    valuetype = "string",
    args = "(const shaderc_compilation_result_t result)", },
  ["shaderc_get_spv_version"] = { type ="function",
    description = "",
    returns = "()",
    args = "(unsigned int* version, unsigned int* revision)", },
  ["shaderc_parse_version_profile"] = { type ="function",
    description = "",
    returns = "(bool)",
    args = "(const char* str, int* version, shaderc_profile* profile)", },
  ["shaderc_include_result"] = { type ="class",
    description = "",
    childs =
    {
    ["source_name"] = { type ="value", description = "const char*", valuetype = "string", },
    ["source_name_length"] = { type ="value", description = "size_t", },
    ["content"] = { type ="value", description = "const char*", valuetype = "string", },
    ["content_length"] = { type ="value", description = "size_t", },
    ["user_data"] = { type ="value", description = "void*", },
    } },
  }

return {
  shaderc = {
    type = "lib",
    description = "SHADERC glsl to spir-v",
    childs = api,
  },
  shdc = {
    type = "lib",
    description = "SHADERC glsl to spir-v",
    childs = api,
  },
}
