-- gl glewgl | OpenGL + GLEW
-- auto-generated api from ffi headers
local api=
  {
  ["__GLEW_VERSION_1_1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_1_2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_1_2_1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_1_3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_1_4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_1_5"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_2_0"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_2_1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_3_0"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_3_1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_3_2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_3_3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_4_0"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_4_1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_4_2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_4_3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_4_4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_VERSION_4_5"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_3DFX_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_3DFX_tbuffer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_3DFX_texture_compression_FXT1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_blend_minmax_factor"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_conservative_depth"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_debug_output"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_depth_clamp_separate"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_draw_buffers_blend"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_gcn_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_gpu_shader_int64"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_interleaved_elements"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_multi_draw_indirect"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_name_gen_delete"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_occlusion_query_event"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_performance_monitor"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_pinned_memory"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_query_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_sample_positions"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_seamless_cubemap_per_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_shader_atomic_counter_ops"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_shader_explicit_vertex_parameter"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_shader_stencil_export"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_shader_stencil_value_export"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_shader_trinary_minmax"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_sparse_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_stencil_operation_extended"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_texture_texture4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_transform_feedback3_lines_triangles"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_transform_feedback4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_vertex_shader_layer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_vertex_shader_tessellator"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_AMD_vertex_shader_viewport_index"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_depth_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_framebuffer_blit"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_framebuffer_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_instanced_arrays"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_pack_reverse_row_order"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_program_binary"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_texture_compression_dxt1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_texture_compression_dxt3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_texture_compression_dxt5"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_texture_usage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_timer_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ANGLE_translated_shader_source"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_aux_depth_stencil"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_client_storage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_element_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_fence"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_float_pixels"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_flush_buffer_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_object_purgeable"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_pixel_buffer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_rgb_422"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_row_bytes"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_specular_vector"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_texture_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_transform_hint"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_vertex_array_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_vertex_array_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_vertex_program_evaluators"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_APPLE_ycbcr_422"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_ES2_compatibility"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_ES3_1_compatibility"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_ES3_2_compatibility"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_ES3_compatibility"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_arrays_of_arrays"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_base_instance"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_bindless_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_blend_func_extended"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_buffer_storage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_cl_event"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_clear_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_clear_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_clip_control"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_color_buffer_float"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_compatibility"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_compressed_texture_pixel_storage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_compute_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_compute_variable_group_size"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_conditional_render_inverted"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_conservative_depth"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_copy_buffer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_copy_image"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_cull_distance"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_debug_output"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_depth_buffer_float"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_depth_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_depth_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_derivative_control"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_direct_state_access"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_draw_buffers"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_draw_buffers_blend"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_draw_elements_base_vertex"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_draw_indirect"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_draw_instanced"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_enhanced_layouts"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_explicit_attrib_location"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_explicit_uniform_location"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_fragment_coord_conventions"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_fragment_layer_viewport"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_fragment_program"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_fragment_program_shadow"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_fragment_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_fragment_shader_interlock"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_framebuffer_no_attachments"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_framebuffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_framebuffer_sRGB"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_geometry_shader4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_get_program_binary"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_get_texture_sub_image"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_gl_spirv"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_gpu_shader5"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_gpu_shader_fp64"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_gpu_shader_int64"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_half_float_pixel"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_half_float_vertex"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_imaging"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_indirect_parameters"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_instanced_arrays"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_internalformat_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_internalformat_query2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_invalidate_subdata"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_map_buffer_alignment"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_map_buffer_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_matrix_palette"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_multi_bind"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_multi_draw_indirect"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_multitexture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_occlusion_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_occlusion_query2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_parallel_shader_compile"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_pipeline_statistics_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_pixel_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_point_parameters"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_point_sprite"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_post_depth_coverage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_program_interface_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_provoking_vertex"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_query_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_robust_buffer_access_behavior"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_robustness"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_robustness_application_isolation"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_robustness_share_group_isolation"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_sample_locations"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_sample_shading"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_sampler_objects"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_seamless_cube_map"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_seamless_cubemap_per_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_separate_shader_objects"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_atomic_counter_ops"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_atomic_counters"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_ballot"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_bit_encoding"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_clock"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_draw_parameters"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_group_vote"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_image_load_store"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_image_size"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_objects"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_precision"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_stencil_export"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_storage_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_subroutine"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_texture_image_samples"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_texture_lod"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shader_viewport_layer_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shading_language_100"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shading_language_420pack"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shading_language_include"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shading_language_packing"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shadow"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_shadow_ambient"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_sparse_buffer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_sparse_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_sparse_texture2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_sparse_texture_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_stencil_texturing"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_sync"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_tessellation_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_barrier"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_border_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_buffer_object_rgb32"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_buffer_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_compression"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_compression_bptc"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_compression_rgtc"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_cube_map"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_cube_map_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_env_add"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_env_combine"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_env_crossbar"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_env_dot3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_filter_minmax"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_float"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_gather"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_mirror_clamp_to_edge"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_mirrored_repeat"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_non_power_of_two"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_query_levels"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_query_lod"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_rectangle"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_rg"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_rgb10_a2ui"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_stencil8"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_storage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_storage_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_swizzle"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_texture_view"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_timer_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_transform_feedback2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_transform_feedback3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_transform_feedback_instanced"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_transform_feedback_overflow_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_transpose_matrix"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_uniform_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_array_bgra"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_array_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_attrib_64bit"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_attrib_binding"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_blend"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_program"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_type_10f_11f_11f_rev"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_vertex_type_2_10_10_10_rev"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_viewport_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ARB_window_pos"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATIX_point_sprites"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATIX_texture_env_combine3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATIX_texture_env_route"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATIX_vertex_shader_output_point_size"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_draw_buffers"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_element_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_envmap_bumpmap"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_fragment_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_map_object_buffer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_meminfo"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_pn_triangles"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_separate_stencil"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_shader_texture_lod"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_text_fragment_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_texture_compression_3dc"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_texture_env_combine3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_texture_float"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_texture_mirror_once"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_vertex_array_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_vertex_attrib_array_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_ATI_vertex_streams"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EGL_NV_robustness_video_memory_purge"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_422_pixels"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_Cg_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_abgr"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_bgra"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_bindable_uniform"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_blend_color"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_blend_equation_separate"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_blend_func_separate"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_blend_logic_op"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_blend_minmax"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_blend_subtract"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_clip_volume_hint"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_cmyka"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_color_subtable"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_compiled_vertex_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_convolution"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_coordinate_frame"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_copy_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_cull_vertex"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_debug_label"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_debug_marker"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_depth_bounds_test"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_direct_state_access"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_draw_buffers2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_draw_instanced"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_draw_range_elements"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_fog_coord"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_fragment_lighting"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_framebuffer_blit"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_framebuffer_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_framebuffer_multisample_blit_scaled"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_framebuffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_framebuffer_sRGB"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_geometry_shader4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_gpu_program_parameters"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_gpu_shader4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_histogram"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_index_array_formats"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_index_func"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_index_material"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_index_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_light_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_misc_attribute"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_multi_draw_arrays"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_packed_depth_stencil"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_packed_float"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_packed_pixels"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_paletted_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_pixel_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_pixel_transform"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_pixel_transform_color_table"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_point_parameters"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_polygon_offset"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_polygon_offset_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_post_depth_coverage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_provoking_vertex"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_raster_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_rescale_normal"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_scene_marker"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_secondary_color"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_separate_shader_objects"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_separate_specular_color"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_shader_image_load_formatted"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_shader_image_load_store"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_shader_integer_mix"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_shadow_funcs"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_shared_texture_palette"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_sparse_texture2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_stencil_clear_tag"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_stencil_two_side"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_stencil_wrap"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_subtexture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture3D"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_compression_dxt1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_compression_latc"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_compression_rgtc"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_compression_s3tc"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_cube_map"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_edge_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_env"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_env_add"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_env_combine"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_env_dot3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_filter_anisotropic"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_filter_minmax"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_integer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_lod_bias"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_mirror_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_perturb_normal"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_rectangle"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_sRGB"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_sRGB_decode"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_shared_exponent"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_snorm"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_texture_swizzle"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_timer_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_transform_feedback"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_vertex_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_vertex_array_bgra"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_vertex_attrib_64bit"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_vertex_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_vertex_weighting"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_window_rectangles"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_EXT_x11_sync_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_GREMEDY_frame_terminator"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_GREMEDY_string_marker"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_HP_convolution_border_modes"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_HP_image_transform"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_HP_occlusion_test"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_HP_texture_lighting"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_IBM_cull_vertex"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_IBM_multimode_draw_arrays"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_IBM_rasterpos_clip"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_IBM_static_data"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_IBM_texture_mirrored_repeat"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_IBM_vertex_array_lists"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INGR_color_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INGR_interlace_read"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INTEL_conservative_rasterization"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INTEL_fragment_shader_ordering"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INTEL_framebuffer_CMAA"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INTEL_map_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INTEL_parallel_arrays"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INTEL_performance_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_INTEL_texture_scissor"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_blend_equation_advanced"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_blend_equation_advanced_coherent"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_context_flush_control"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_debug"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_no_error"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_robust_buffer_access_behavior"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_robustness"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_texture_compression_astc_hdr"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_texture_compression_astc_ldr"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KHR_texture_compression_astc_sliced_3d"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_KTX_buffer_region"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_MESAX_texture_stack"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_MESA_pack_invert"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_MESA_resize_buffers"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_MESA_shader_integer_functions"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_MESA_window_pos"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_MESA_ycbcr_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NVX_blend_equation_advanced_multi_draw_buffers"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NVX_conditional_render"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NVX_gpu_memory_info"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NVX_linked_gpu_multicast"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_bindless_multi_draw_indirect"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_bindless_multi_draw_indirect_count"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_bindless_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_blend_equation_advanced"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_blend_equation_advanced_coherent"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_blend_square"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_clip_space_w_scaling"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_command_list"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_compute_program5"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_conditional_render"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_conservative_raster"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_conservative_raster_dilate"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_conservative_raster_pre_snap_triangles"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_copy_depth_to_color"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_copy_image"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_deep_texture3D"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_depth_buffer_float"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_depth_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_depth_range_unclamped"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_draw_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_draw_vulkan_image"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_evaluators"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_explicit_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fence"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fill_rectangle"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_float_buffer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fog_distance"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fragment_coverage_to_color"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fragment_program"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fragment_program2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fragment_program4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fragment_program_option"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_fragment_shader_interlock"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_framebuffer_mixed_samples"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_framebuffer_multisample_coverage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_geometry_program4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_geometry_shader4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_geometry_shader_passthrough"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_gpu_multicast"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_gpu_program4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_gpu_program5"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_gpu_program5_mem_extended"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_gpu_program_fp64"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_gpu_shader5"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_half_float"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_internalformat_sample_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_light_max_exponent"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_multisample_coverage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_multisample_filter_hint"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_occlusion_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_packed_depth_stencil"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_parameter_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_parameter_buffer_object2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_path_rendering"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_path_rendering_shared_edge"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_pixel_data_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_point_sprite"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_present_video"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_primitive_restart"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_register_combiners"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_register_combiners2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_robustness_video_memory_purge"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_sample_locations"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_sample_mask_override_coverage"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_atomic_counters"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_atomic_float"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_atomic_float64"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_atomic_fp16_vector"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_atomic_int64"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_buffer_load"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_storage_buffer_object"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_thread_group"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_shader_thread_shuffle"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_stereo_view_rendering"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_tessellation_program5"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texgen_emboss"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texgen_reflection"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_barrier"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_compression_vtc"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_env_combine4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_expand_normal"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_rectangle"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_shader"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_shader2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_texture_shader3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_transform_feedback"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_transform_feedback2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_uniform_buffer_unified_memory"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vdpau_interop"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_array_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_array_range2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_attrib_integer_64bit"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_buffer_unified_memory"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_program"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_program1_1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_program2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_program2_option"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_program3"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_vertex_program4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_video_capture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_viewport_array2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_NV_viewport_swizzle"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OES_byte_coordinates"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OES_compressed_paletted_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OES_read_format"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OES_single_precision"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OML_interlace"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OML_resample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OML_subsample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OVR_multiview"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_OVR_multiview2"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_PGI_misc_hints"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_PGI_vertex_hints"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_REGAL_ES1_0_compatibility"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_REGAL_ES1_1_compatibility"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_REGAL_enable"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_REGAL_error_string"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_REGAL_extension_query"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_REGAL_log"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_REGAL_proc_address"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_REND_screen_coordinates"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_S3_s3tc"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_color_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_detail_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_fog_function"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_generate_mipmap"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_multisample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_pixel_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_point_line_texgen"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_sharpen_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_texture4D"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_texture_border_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_texture_edge_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_texture_filter4"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_texture_lod"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIS_texture_select"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_async"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_async_histogram"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_async_pixel"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_blend_alpha_minmax"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_clipmap"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_convolution_accuracy"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_depth_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_flush_raster"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_fog_offset"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_fog_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_fragment_specular_lighting"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_framezoom"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_interlace"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_ir_instrument1"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_list_priority"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_pixel_texture"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_pixel_texture_bits"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_reference_plane"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_resample"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_shadow"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_shadow_ambient"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_sprite"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_tag_sample_buffer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_texture_add_env"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_texture_coordinate_clamp"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_texture_lod_bias"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_texture_multi_buffer"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_texture_range"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_texture_scale_bias"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_vertex_preclip"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_vertex_preclip_hint"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGIX_ycrcb"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGI_color_matrix"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGI_color_table"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SGI_texture_color_table"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SUNX_constant_data"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SUN_convolution_border_modes"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SUN_global_alpha"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SUN_mesh_array"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SUN_read_video_pixels"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SUN_slice_accum"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SUN_triangle_list"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_SUN_vertex"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_WIN_phong_shading"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_WIN_specular_fog"] = { type ="value", description = "extern GLboolean", },
  ["__GLEW_WIN_swap_hint"] = { type ="value", description = "extern GLboolean", },
  ["GL_ZERO"] = { type ="value", },
  ["GL_FALSE"] = { type ="value", },
  ["GL_LOGIC_OP"] = { type ="value", },
  ["GL_NONE"] = { type ="value", },
  ["GL_TEXTURE_COMPONENTS"] = { type ="value", },
  ["GL_NO_ERROR"] = { type ="value", },
  ["GL_POINTS"] = { type ="value", },
  ["GL_CURRENT_BIT"] = { type ="value", },
  ["GL_TRUE"] = { type ="value", },
  ["GL_ONE"] = { type ="value", },
  ["GL_CLIENT_PIXEL_STORE_BIT"] = { type ="value", },
  ["GL_LINES"] = { type ="value", },
  ["GL_LINE_LOOP"] = { type ="value", },
  ["GL_POINT_BIT"] = { type ="value", },
  ["GL_CLIENT_VERTEX_ARRAY_BIT"] = { type ="value", },
  ["GL_LINE_STRIP"] = { type ="value", },
  ["GL_LINE_BIT"] = { type ="value", },
  ["GL_TRIANGLES"] = { type ="value", },
  ["GL_TRIANGLE_STRIP"] = { type ="value", },
  ["GL_TRIANGLE_FAN"] = { type ="value", },
  ["GL_QUADS"] = { type ="value", },
  ["GL_QUAD_STRIP"] = { type ="value", },
  ["GL_POLYGON_BIT"] = { type ="value", },
  ["GL_POLYGON"] = { type ="value", },
  ["GL_POLYGON_STIPPLE_BIT"] = { type ="value", },
  ["GL_PIXEL_MODE_BIT"] = { type ="value", },
  ["GL_LIGHTING_BIT"] = { type ="value", },
  ["GL_FOG_BIT"] = { type ="value", },
  ["GL_DEPTH_BUFFER_BIT"] = { type ="value", },
  ["GL_ACCUM"] = { type ="value", },
  ["GL_LOAD"] = { type ="value", },
  ["GL_RETURN"] = { type ="value", },
  ["GL_MULT"] = { type ="value", },
  ["GL_ADD"] = { type ="value", },
  ["GL_NEVER"] = { type ="value", },
  ["GL_ACCUM_BUFFER_BIT"] = { type ="value", },
  ["GL_LESS"] = { type ="value", },
  ["GL_EQUAL"] = { type ="value", },
  ["GL_LEQUAL"] = { type ="value", },
  ["GL_GREATER"] = { type ="value", },
  ["GL_NOTEQUAL"] = { type ="value", },
  ["GL_GEQUAL"] = { type ="value", },
  ["GL_ALWAYS"] = { type ="value", },
  ["GL_SRC_COLOR"] = { type ="value", },
  ["GL_ONE_MINUS_SRC_COLOR"] = { type ="value", },
  ["GL_SRC_ALPHA"] = { type ="value", },
  ["GL_ONE_MINUS_SRC_ALPHA"] = { type ="value", },
  ["GL_DST_ALPHA"] = { type ="value", },
  ["GL_ONE_MINUS_DST_ALPHA"] = { type ="value", },
  ["GL_DST_COLOR"] = { type ="value", },
  ["GL_ONE_MINUS_DST_COLOR"] = { type ="value", },
  ["GL_SRC_ALPHA_SATURATE"] = { type ="value", },
  ["GL_STENCIL_BUFFER_BIT"] = { type ="value", },
  ["GL_FRONT_LEFT"] = { type ="value", },
  ["GL_FRONT_RIGHT"] = { type ="value", },
  ["GL_BACK_LEFT"] = { type ="value", },
  ["GL_BACK_RIGHT"] = { type ="value", },
  ["GL_FRONT"] = { type ="value", },
  ["GL_BACK"] = { type ="value", },
  ["GL_LEFT"] = { type ="value", },
  ["GL_RIGHT"] = { type ="value", },
  ["GL_FRONT_AND_BACK"] = { type ="value", },
  ["GL_AUX0"] = { type ="value", },
  ["GL_AUX1"] = { type ="value", },
  ["GL_AUX2"] = { type ="value", },
  ["GL_AUX3"] = { type ="value", },
  ["GL_INVALID_ENUM"] = { type ="value", },
  ["GL_INVALID_VALUE"] = { type ="value", },
  ["GL_INVALID_OPERATION"] = { type ="value", },
  ["GL_STACK_OVERFLOW"] = { type ="value", },
  ["GL_STACK_UNDERFLOW"] = { type ="value", },
  ["GL_OUT_OF_MEMORY"] = { type ="value", },
  ["GL_2D"] = { type ="value", },
  ["GL_3D"] = { type ="value", },
  ["GL_3D_COLOR"] = { type ="value", },
  ["GL_3D_COLOR_TEXTURE"] = { type ="value", },
  ["GL_4D_COLOR_TEXTURE"] = { type ="value", },
  ["GL_PASS_THROUGH_TOKEN"] = { type ="value", },
  ["GL_POINT_TOKEN"] = { type ="value", },
  ["GL_LINE_TOKEN"] = { type ="value", },
  ["GL_POLYGON_TOKEN"] = { type ="value", },
  ["GL_BITMAP_TOKEN"] = { type ="value", },
  ["GL_DRAW_PIXEL_TOKEN"] = { type ="value", },
  ["GL_COPY_PIXEL_TOKEN"] = { type ="value", },
  ["GL_LINE_RESET_TOKEN"] = { type ="value", },
  ["GL_EXP"] = { type ="value", },
  ["GL_VIEWPORT_BIT"] = { type ="value", },
  ["GL_EXP2"] = { type ="value", },
  ["GL_CW"] = { type ="value", },
  ["GL_CCW"] = { type ="value", },
  ["GL_COEFF"] = { type ="value", },
  ["GL_ORDER"] = { type ="value", },
  ["GL_DOMAIN"] = { type ="value", },
  ["GL_CURRENT_COLOR"] = { type ="value", },
  ["GL_CURRENT_INDEX"] = { type ="value", },
  ["GL_CURRENT_NORMAL"] = { type ="value", },
  ["GL_CURRENT_TEXTURE_COORDS"] = { type ="value", },
  ["GL_CURRENT_RASTER_COLOR"] = { type ="value", },
  ["GL_CURRENT_RASTER_INDEX"] = { type ="value", },
  ["GL_CURRENT_RASTER_TEXTURE_COORDS"] = { type ="value", },
  ["GL_CURRENT_RASTER_POSITION"] = { type ="value", },
  ["GL_CURRENT_RASTER_POSITION_VALID"] = { type ="value", },
  ["GL_CURRENT_RASTER_DISTANCE"] = { type ="value", },
  ["GL_POINT_SMOOTH"] = { type ="value", },
  ["GL_POINT_SIZE"] = { type ="value", },
  ["GL_POINT_SIZE_RANGE"] = { type ="value", },
  ["GL_POINT_SIZE_GRANULARITY"] = { type ="value", },
  ["GL_LINE_SMOOTH"] = { type ="value", },
  ["GL_LINE_WIDTH"] = { type ="value", },
  ["GL_LINE_WIDTH_RANGE"] = { type ="value", },
  ["GL_LINE_WIDTH_GRANULARITY"] = { type ="value", },
  ["GL_LINE_STIPPLE"] = { type ="value", },
  ["GL_LINE_STIPPLE_PATTERN"] = { type ="value", },
  ["GL_LINE_STIPPLE_REPEAT"] = { type ="value", },
  ["GL_LIST_MODE"] = { type ="value", },
  ["GL_MAX_LIST_NESTING"] = { type ="value", },
  ["GL_LIST_BASE"] = { type ="value", },
  ["GL_LIST_INDEX"] = { type ="value", },
  ["GL_POLYGON_MODE"] = { type ="value", },
  ["GL_POLYGON_SMOOTH"] = { type ="value", },
  ["GL_POLYGON_STIPPLE"] = { type ="value", },
  ["GL_EDGE_FLAG"] = { type ="value", },
  ["GL_CULL_FACE"] = { type ="value", },
  ["GL_CULL_FACE_MODE"] = { type ="value", },
  ["GL_FRONT_FACE"] = { type ="value", },
  ["GL_LIGHTING"] = { type ="value", },
  ["GL_LIGHT_MODEL_LOCAL_VIEWER"] = { type ="value", },
  ["GL_LIGHT_MODEL_TWO_SIDE"] = { type ="value", },
  ["GL_LIGHT_MODEL_AMBIENT"] = { type ="value", },
  ["GL_SHADE_MODEL"] = { type ="value", },
  ["GL_COLOR_MATERIAL_FACE"] = { type ="value", },
  ["GL_COLOR_MATERIAL_PARAMETER"] = { type ="value", },
  ["GL_COLOR_MATERIAL"] = { type ="value", },
  ["GL_FOG"] = { type ="value", },
  ["GL_FOG_INDEX"] = { type ="value", },
  ["GL_FOG_DENSITY"] = { type ="value", },
  ["GL_FOG_START"] = { type ="value", },
  ["GL_FOG_END"] = { type ="value", },
  ["GL_FOG_MODE"] = { type ="value", },
  ["GL_FOG_COLOR"] = { type ="value", },
  ["GL_DEPTH_RANGE"] = { type ="value", },
  ["GL_DEPTH_TEST"] = { type ="value", },
  ["GL_DEPTH_WRITEMASK"] = { type ="value", },
  ["GL_DEPTH_CLEAR_VALUE"] = { type ="value", },
  ["GL_DEPTH_FUNC"] = { type ="value", },
  ["GL_ACCUM_CLEAR_VALUE"] = { type ="value", },
  ["GL_STENCIL_TEST"] = { type ="value", },
  ["GL_STENCIL_CLEAR_VALUE"] = { type ="value", },
  ["GL_STENCIL_FUNC"] = { type ="value", },
  ["GL_STENCIL_VALUE_MASK"] = { type ="value", },
  ["GL_STENCIL_FAIL"] = { type ="value", },
  ["GL_STENCIL_PASS_DEPTH_FAIL"] = { type ="value", },
  ["GL_STENCIL_PASS_DEPTH_PASS"] = { type ="value", },
  ["GL_STENCIL_REF"] = { type ="value", },
  ["GL_STENCIL_WRITEMASK"] = { type ="value", },
  ["GL_MATRIX_MODE"] = { type ="value", },
  ["GL_NORMALIZE"] = { type ="value", },
  ["GL_VIEWPORT"] = { type ="value", },
  ["GL_MODELVIEW_STACK_DEPTH"] = { type ="value", },
  ["GL_PROJECTION_STACK_DEPTH"] = { type ="value", },
  ["GL_TEXTURE_STACK_DEPTH"] = { type ="value", },
  ["GL_MODELVIEW_MATRIX"] = { type ="value", },
  ["GL_PROJECTION_MATRIX"] = { type ="value", },
  ["GL_TEXTURE_MATRIX"] = { type ="value", },
  ["GL_ATTRIB_STACK_DEPTH"] = { type ="value", },
  ["GL_CLIENT_ATTRIB_STACK_DEPTH"] = { type ="value", },
  ["GL_ALPHA_TEST"] = { type ="value", },
  ["GL_ALPHA_TEST_FUNC"] = { type ="value", },
  ["GL_ALPHA_TEST_REF"] = { type ="value", },
  ["GL_DITHER"] = { type ="value", },
  ["GL_BLEND_DST"] = { type ="value", },
  ["GL_BLEND_SRC"] = { type ="value", },
  ["GL_BLEND"] = { type ="value", },
  ["GL_LOGIC_OP_MODE"] = { type ="value", },
  ["GL_INDEX_LOGIC_OP"] = { type ="value", },
  ["GL_COLOR_LOGIC_OP"] = { type ="value", },
  ["GL_AUX_BUFFERS"] = { type ="value", },
  ["GL_DRAW_BUFFER"] = { type ="value", },
  ["GL_READ_BUFFER"] = { type ="value", },
  ["GL_SCISSOR_BOX"] = { type ="value", },
  ["GL_SCISSOR_TEST"] = { type ="value", },
  ["GL_INDEX_CLEAR_VALUE"] = { type ="value", },
  ["GL_INDEX_WRITEMASK"] = { type ="value", },
  ["GL_COLOR_CLEAR_VALUE"] = { type ="value", },
  ["GL_COLOR_WRITEMASK"] = { type ="value", },
  ["GL_INDEX_MODE"] = { type ="value", },
  ["GL_RGBA_MODE"] = { type ="value", },
  ["GL_DOUBLEBUFFER"] = { type ="value", },
  ["GL_STEREO"] = { type ="value", },
  ["GL_RENDER_MODE"] = { type ="value", },
  ["GL_PERSPECTIVE_CORRECTION_HINT"] = { type ="value", },
  ["GL_POINT_SMOOTH_HINT"] = { type ="value", },
  ["GL_LINE_SMOOTH_HINT"] = { type ="value", },
  ["GL_POLYGON_SMOOTH_HINT"] = { type ="value", },
  ["GL_FOG_HINT"] = { type ="value", },
  ["GL_TEXTURE_GEN_S"] = { type ="value", },
  ["GL_TEXTURE_GEN_T"] = { type ="value", },
  ["GL_TEXTURE_GEN_R"] = { type ="value", },
  ["GL_TEXTURE_GEN_Q"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_I"] = { type ="value", },
  ["GL_PIXEL_MAP_S_TO_S"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_R"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_G"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_B"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_A"] = { type ="value", },
  ["GL_PIXEL_MAP_R_TO_R"] = { type ="value", },
  ["GL_PIXEL_MAP_G_TO_G"] = { type ="value", },
  ["GL_PIXEL_MAP_B_TO_B"] = { type ="value", },
  ["GL_PIXEL_MAP_A_TO_A"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_I_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_S_TO_S_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_R_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_G_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_B_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_I_TO_A_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_R_TO_R_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_G_TO_G_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_B_TO_B_SIZE"] = { type ="value", },
  ["GL_PIXEL_MAP_A_TO_A_SIZE"] = { type ="value", },
  ["GL_UNPACK_SWAP_BYTES"] = { type ="value", },
  ["GL_UNPACK_LSB_FIRST"] = { type ="value", },
  ["GL_UNPACK_ROW_LENGTH"] = { type ="value", },
  ["GL_UNPACK_SKIP_ROWS"] = { type ="value", },
  ["GL_UNPACK_SKIP_PIXELS"] = { type ="value", },
  ["GL_UNPACK_ALIGNMENT"] = { type ="value", },
  ["GL_PACK_SWAP_BYTES"] = { type ="value", },
  ["GL_PACK_LSB_FIRST"] = { type ="value", },
  ["GL_PACK_ROW_LENGTH"] = { type ="value", },
  ["GL_PACK_SKIP_ROWS"] = { type ="value", },
  ["GL_PACK_SKIP_PIXELS"] = { type ="value", },
  ["GL_PACK_ALIGNMENT"] = { type ="value", },
  ["GL_MAP_COLOR"] = { type ="value", },
  ["GL_MAP_STENCIL"] = { type ="value", },
  ["GL_INDEX_SHIFT"] = { type ="value", },
  ["GL_INDEX_OFFSET"] = { type ="value", },
  ["GL_RED_SCALE"] = { type ="value", },
  ["GL_RED_BIAS"] = { type ="value", },
  ["GL_ZOOM_X"] = { type ="value", },
  ["GL_ZOOM_Y"] = { type ="value", },
  ["GL_GREEN_SCALE"] = { type ="value", },
  ["GL_GREEN_BIAS"] = { type ="value", },
  ["GL_BLUE_SCALE"] = { type ="value", },
  ["GL_BLUE_BIAS"] = { type ="value", },
  ["GL_ALPHA_SCALE"] = { type ="value", },
  ["GL_ALPHA_BIAS"] = { type ="value", },
  ["GL_DEPTH_SCALE"] = { type ="value", },
  ["GL_DEPTH_BIAS"] = { type ="value", },
  ["GL_MAX_EVAL_ORDER"] = { type ="value", },
  ["GL_MAX_LIGHTS"] = { type ="value", },
  ["GL_MAX_CLIP_PLANES"] = { type ="value", },
  ["GL_MAX_TEXTURE_SIZE"] = { type ="value", },
  ["GL_MAX_PIXEL_MAP_TABLE"] = { type ="value", },
  ["GL_MAX_ATTRIB_STACK_DEPTH"] = { type ="value", },
  ["GL_MAX_MODELVIEW_STACK_DEPTH"] = { type ="value", },
  ["GL_MAX_NAME_STACK_DEPTH"] = { type ="value", },
  ["GL_MAX_PROJECTION_STACK_DEPTH"] = { type ="value", },
  ["GL_MAX_TEXTURE_STACK_DEPTH"] = { type ="value", },
  ["GL_MAX_VIEWPORT_DIMS"] = { type ="value", },
  ["GL_MAX_CLIENT_ATTRIB_STACK_DEPTH"] = { type ="value", },
  ["GL_SUBPIXEL_BITS"] = { type ="value", },
  ["GL_INDEX_BITS"] = { type ="value", },
  ["GL_RED_BITS"] = { type ="value", },
  ["GL_GREEN_BITS"] = { type ="value", },
  ["GL_BLUE_BITS"] = { type ="value", },
  ["GL_ALPHA_BITS"] = { type ="value", },
  ["GL_DEPTH_BITS"] = { type ="value", },
  ["GL_STENCIL_BITS"] = { type ="value", },
  ["GL_ACCUM_RED_BITS"] = { type ="value", },
  ["GL_ACCUM_GREEN_BITS"] = { type ="value", },
  ["GL_ACCUM_BLUE_BITS"] = { type ="value", },
  ["GL_ACCUM_ALPHA_BITS"] = { type ="value", },
  ["GL_NAME_STACK_DEPTH"] = { type ="value", },
  ["GL_AUTO_NORMAL"] = { type ="value", },
  ["GL_MAP1_COLOR_4"] = { type ="value", },
  ["GL_MAP1_INDEX"] = { type ="value", },
  ["GL_MAP1_NORMAL"] = { type ="value", },
  ["GL_MAP1_TEXTURE_COORD_1"] = { type ="value", },
  ["GL_MAP1_TEXTURE_COORD_2"] = { type ="value", },
  ["GL_MAP1_TEXTURE_COORD_3"] = { type ="value", },
  ["GL_MAP1_TEXTURE_COORD_4"] = { type ="value", },
  ["GL_MAP1_VERTEX_3"] = { type ="value", },
  ["GL_MAP1_VERTEX_4"] = { type ="value", },
  ["GL_MAP2_COLOR_4"] = { type ="value", },
  ["GL_MAP2_INDEX"] = { type ="value", },
  ["GL_MAP2_NORMAL"] = { type ="value", },
  ["GL_MAP2_TEXTURE_COORD_1"] = { type ="value", },
  ["GL_MAP2_TEXTURE_COORD_2"] = { type ="value", },
  ["GL_MAP2_TEXTURE_COORD_3"] = { type ="value", },
  ["GL_MAP2_TEXTURE_COORD_4"] = { type ="value", },
  ["GL_MAP2_VERTEX_3"] = { type ="value", },
  ["GL_MAP2_VERTEX_4"] = { type ="value", },
  ["GL_MAP1_GRID_DOMAIN"] = { type ="value", },
  ["GL_MAP1_GRID_SEGMENTS"] = { type ="value", },
  ["GL_MAP2_GRID_DOMAIN"] = { type ="value", },
  ["GL_MAP2_GRID_SEGMENTS"] = { type ="value", },
  ["GL_TEXTURE_1D"] = { type ="value", },
  ["GL_TEXTURE_2D"] = { type ="value", },
  ["GL_FEEDBACK_BUFFER_POINTER"] = { type ="value", },
  ["GL_FEEDBACK_BUFFER_SIZE"] = { type ="value", },
  ["GL_FEEDBACK_BUFFER_TYPE"] = { type ="value", },
  ["GL_SELECTION_BUFFER_POINTER"] = { type ="value", },
  ["GL_SELECTION_BUFFER_SIZE"] = { type ="value", },
  ["GL_TEXTURE_WIDTH"] = { type ="value", },
  ["GL_TRANSFORM_BIT"] = { type ="value", },
  ["GL_TEXTURE_HEIGHT"] = { type ="value", },
  ["GL_TEXTURE_INTERNAL_FORMAT"] = { type ="value", },
  ["GL_TEXTURE_BORDER_COLOR"] = { type ="value", },
  ["GL_TEXTURE_BORDER"] = { type ="value", },
  ["GL_DONT_CARE"] = { type ="value", },
  ["GL_FASTEST"] = { type ="value", },
  ["GL_NICEST"] = { type ="value", },
  ["GL_AMBIENT"] = { type ="value", },
  ["GL_DIFFUSE"] = { type ="value", },
  ["GL_SPECULAR"] = { type ="value", },
  ["GL_POSITION"] = { type ="value", },
  ["GL_SPOT_DIRECTION"] = { type ="value", },
  ["GL_SPOT_EXPONENT"] = { type ="value", },
  ["GL_SPOT_CUTOFF"] = { type ="value", },
  ["GL_CONSTANT_ATTENUATION"] = { type ="value", },
  ["GL_LINEAR_ATTENUATION"] = { type ="value", },
  ["GL_QUADRATIC_ATTENUATION"] = { type ="value", },
  ["GL_COMPILE"] = { type ="value", },
  ["GL_COMPILE_AND_EXECUTE"] = { type ="value", },
  ["GL_BYTE"] = { type ="value", },
  ["GL_UNSIGNED_BYTE"] = { type ="value", },
  ["GL_SHORT"] = { type ="value", },
  ["GL_UNSIGNED_SHORT"] = { type ="value", },
  ["GL_INT"] = { type ="value", },
  ["GL_UNSIGNED_INT"] = { type ="value", },
  ["GL_FLOAT"] = { type ="value", },
  ["GL_2_BYTES"] = { type ="value", },
  ["GL_3_BYTES"] = { type ="value", },
  ["GL_4_BYTES"] = { type ="value", },
  ["GL_DOUBLE"] = { type ="value", },
  ["GL_CLEAR"] = { type ="value", },
  ["GL_AND"] = { type ="value", },
  ["GL_AND_REVERSE"] = { type ="value", },
  ["GL_COPY"] = { type ="value", },
  ["GL_AND_INVERTED"] = { type ="value", },
  ["GL_NOOP"] = { type ="value", },
  ["GL_XOR"] = { type ="value", },
  ["GL_OR"] = { type ="value", },
  ["GL_NOR"] = { type ="value", },
  ["GL_EQUIV"] = { type ="value", },
  ["GL_INVERT"] = { type ="value", },
  ["GL_OR_REVERSE"] = { type ="value", },
  ["GL_COPY_INVERTED"] = { type ="value", },
  ["GL_OR_INVERTED"] = { type ="value", },
  ["GL_NAND"] = { type ="value", },
  ["GL_SET"] = { type ="value", },
  ["GL_EMISSION"] = { type ="value", },
  ["GL_SHININESS"] = { type ="value", },
  ["GL_AMBIENT_AND_DIFFUSE"] = { type ="value", },
  ["GL_COLOR_INDEXES"] = { type ="value", },
  ["GL_MODELVIEW"] = { type ="value", },
  ["GL_PROJECTION"] = { type ="value", },
  ["GL_TEXTURE"] = { type ="value", },
  ["GL_COLOR"] = { type ="value", },
  ["GL_DEPTH"] = { type ="value", },
  ["GL_STENCIL"] = { type ="value", },
  ["GL_COLOR_INDEX"] = { type ="value", },
  ["GL_STENCIL_INDEX"] = { type ="value", },
  ["GL_DEPTH_COMPONENT"] = { type ="value", },
  ["GL_RED"] = { type ="value", },
  ["GL_GREEN"] = { type ="value", },
  ["GL_BLUE"] = { type ="value", },
  ["GL_ALPHA"] = { type ="value", },
  ["GL_RGB"] = { type ="value", },
  ["GL_RGBA"] = { type ="value", },
  ["GL_LUMINANCE"] = { type ="value", },
  ["GL_LUMINANCE_ALPHA"] = { type ="value", },
  ["GL_BITMAP"] = { type ="value", },
  ["GL_POINT"] = { type ="value", },
  ["GL_LINE"] = { type ="value", },
  ["GL_FILL"] = { type ="value", },
  ["GL_RENDER"] = { type ="value", },
  ["GL_FEEDBACK"] = { type ="value", },
  ["GL_SELECT"] = { type ="value", },
  ["GL_FLAT"] = { type ="value", },
  ["GL_SMOOTH"] = { type ="value", },
  ["GL_KEEP"] = { type ="value", },
  ["GL_REPLACE"] = { type ="value", },
  ["GL_INCR"] = { type ="value", },
  ["GL_DECR"] = { type ="value", },
  ["GL_VENDOR"] = { type ="value", },
  ["GL_RENDERER"] = { type ="value", },
  ["GL_VERSION"] = { type ="value", },
  ["GL_EXTENSIONS"] = { type ="value", },
  ["GL_S"] = { type ="value", },
  ["GL_ENABLE_BIT"] = { type ="value", },
  ["GL_T"] = { type ="value", },
  ["GL_R"] = { type ="value", },
  ["GL_Q"] = { type ="value", },
  ["GL_MODULATE"] = { type ="value", },
  ["GL_DECAL"] = { type ="value", },
  ["GL_TEXTURE_ENV_MODE"] = { type ="value", },
  ["GL_TEXTURE_ENV_COLOR"] = { type ="value", },
  ["GL_TEXTURE_ENV"] = { type ="value", },
  ["GL_EYE_LINEAR"] = { type ="value", },
  ["GL_OBJECT_LINEAR"] = { type ="value", },
  ["GL_SPHERE_MAP"] = { type ="value", },
  ["GL_TEXTURE_GEN_MODE"] = { type ="value", },
  ["GL_OBJECT_PLANE"] = { type ="value", },
  ["GL_EYE_PLANE"] = { type ="value", },
  ["GL_NEAREST"] = { type ="value", },
  ["GL_LINEAR"] = { type ="value", },
  ["GL_NEAREST_MIPMAP_NEAREST"] = { type ="value", },
  ["GL_LINEAR_MIPMAP_NEAREST"] = { type ="value", },
  ["GL_NEAREST_MIPMAP_LINEAR"] = { type ="value", },
  ["GL_LINEAR_MIPMAP_LINEAR"] = { type ="value", },
  ["GL_TEXTURE_MAG_FILTER"] = { type ="value", },
  ["GL_TEXTURE_MIN_FILTER"] = { type ="value", },
  ["GL_TEXTURE_WRAP_S"] = { type ="value", },
  ["GL_TEXTURE_WRAP_T"] = { type ="value", },
  ["GL_CLAMP"] = { type ="value", },
  ["GL_REPEAT"] = { type ="value", },
  ["GL_POLYGON_OFFSET_UNITS"] = { type ="value", },
  ["GL_POLYGON_OFFSET_POINT"] = { type ="value", },
  ["GL_POLYGON_OFFSET_LINE"] = { type ="value", },
  ["GL_R3_G3_B2"] = { type ="value", },
  ["GL_V2F"] = { type ="value", },
  ["GL_V3F"] = { type ="value", },
  ["GL_C4UB_V2F"] = { type ="value", },
  ["GL_C4UB_V3F"] = { type ="value", },
  ["GL_C3F_V3F"] = { type ="value", },
  ["GL_N3F_V3F"] = { type ="value", },
  ["GL_C4F_N3F_V3F"] = { type ="value", },
  ["GL_T2F_V3F"] = { type ="value", },
  ["GL_T4F_V4F"] = { type ="value", },
  ["GL_T2F_C4UB_V3F"] = { type ="value", },
  ["GL_T2F_C3F_V3F"] = { type ="value", },
  ["GL_T2F_N3F_V3F"] = { type ="value", },
  ["GL_T2F_C4F_N3F_V3F"] = { type ="value", },
  ["GL_T4F_C4F_N3F_V4F"] = { type ="value", },
  ["GL_CLIP_PLANE0"] = { type ="value", },
  ["GL_CLIP_PLANE1"] = { type ="value", },
  ["GL_CLIP_PLANE2"] = { type ="value", },
  ["GL_CLIP_PLANE3"] = { type ="value", },
  ["GL_CLIP_PLANE4"] = { type ="value", },
  ["GL_CLIP_PLANE5"] = { type ="value", },
  ["GL_LIGHT0"] = { type ="value", },
  ["GL_COLOR_BUFFER_BIT"] = { type ="value", },
  ["GL_LIGHT1"] = { type ="value", },
  ["GL_LIGHT2"] = { type ="value", },
  ["GL_LIGHT3"] = { type ="value", },
  ["GL_LIGHT4"] = { type ="value", },
  ["GL_LIGHT5"] = { type ="value", },
  ["GL_LIGHT6"] = { type ="value", },
  ["GL_LIGHT7"] = { type ="value", },
  ["GL_HINT_BIT"] = { type ="value", },
  ["GL_POLYGON_OFFSET_FILL"] = { type ="value", },
  ["GL_POLYGON_OFFSET_FACTOR"] = { type ="value", },
  ["GL_ALPHA4"] = { type ="value", },
  ["GL_ALPHA8"] = { type ="value", },
  ["GL_ALPHA12"] = { type ="value", },
  ["GL_ALPHA16"] = { type ="value", },
  ["GL_LUMINANCE4"] = { type ="value", },
  ["GL_LUMINANCE8"] = { type ="value", },
  ["GL_LUMINANCE12"] = { type ="value", },
  ["GL_LUMINANCE16"] = { type ="value", },
  ["GL_LUMINANCE4_ALPHA4"] = { type ="value", },
  ["GL_LUMINANCE6_ALPHA2"] = { type ="value", },
  ["GL_LUMINANCE8_ALPHA8"] = { type ="value", },
  ["GL_LUMINANCE12_ALPHA4"] = { type ="value", },
  ["GL_LUMINANCE12_ALPHA12"] = { type ="value", },
  ["GL_LUMINANCE16_ALPHA16"] = { type ="value", },
  ["GL_INTENSITY"] = { type ="value", },
  ["GL_INTENSITY4"] = { type ="value", },
  ["GL_INTENSITY8"] = { type ="value", },
  ["GL_INTENSITY12"] = { type ="value", },
  ["GL_INTENSITY16"] = { type ="value", },
  ["GL_RGB4"] = { type ="value", },
  ["GL_RGB5"] = { type ="value", },
  ["GL_RGB8"] = { type ="value", },
  ["GL_RGB10"] = { type ="value", },
  ["GL_RGB12"] = { type ="value", },
  ["GL_RGB16"] = { type ="value", },
  ["GL_RGBA2"] = { type ="value", },
  ["GL_RGBA4"] = { type ="value", },
  ["GL_RGB5_A1"] = { type ="value", },
  ["GL_RGBA8"] = { type ="value", },
  ["GL_RGB10_A2"] = { type ="value", },
  ["GL_RGBA12"] = { type ="value", },
  ["GL_RGBA16"] = { type ="value", },
  ["GL_TEXTURE_RED_SIZE"] = { type ="value", },
  ["GL_TEXTURE_GREEN_SIZE"] = { type ="value", },
  ["GL_TEXTURE_BLUE_SIZE"] = { type ="value", },
  ["GL_TEXTURE_ALPHA_SIZE"] = { type ="value", },
  ["GL_TEXTURE_LUMINANCE_SIZE"] = { type ="value", },
  ["GL_TEXTURE_INTENSITY_SIZE"] = { type ="value", },
  ["GL_PROXY_TEXTURE_1D"] = { type ="value", },
  ["GL_PROXY_TEXTURE_2D"] = { type ="value", },
  ["GL_TEXTURE_PRIORITY"] = { type ="value", },
  ["GL_TEXTURE_RESIDENT"] = { type ="value", },
  ["GL_TEXTURE_BINDING_1D"] = { type ="value", },
  ["GL_TEXTURE_BINDING_2D"] = { type ="value", },
  ["GL_VERTEX_ARRAY"] = { type ="value", },
  ["GL_NORMAL_ARRAY"] = { type ="value", },
  ["GL_COLOR_ARRAY"] = { type ="value", },
  ["GL_INDEX_ARRAY"] = { type ="value", },
  ["GL_TEXTURE_COORD_ARRAY"] = { type ="value", },
  ["GL_EDGE_FLAG_ARRAY"] = { type ="value", },
  ["GL_VERTEX_ARRAY_SIZE"] = { type ="value", },
  ["GL_VERTEX_ARRAY_TYPE"] = { type ="value", },
  ["GL_VERTEX_ARRAY_STRIDE"] = { type ="value", },
  ["GL_NORMAL_ARRAY_TYPE"] = { type ="value", },
  ["GL_NORMAL_ARRAY_STRIDE"] = { type ="value", },
  ["GL_COLOR_ARRAY_SIZE"] = { type ="value", },
  ["GL_COLOR_ARRAY_TYPE"] = { type ="value", },
  ["GL_COLOR_ARRAY_STRIDE"] = { type ="value", },
  ["GL_INDEX_ARRAY_TYPE"] = { type ="value", },
  ["GL_INDEX_ARRAY_STRIDE"] = { type ="value", },
  ["GL_TEXTURE_COORD_ARRAY_SIZE"] = { type ="value", },
  ["GL_TEXTURE_COORD_ARRAY_TYPE"] = { type ="value", },
  ["GL_TEXTURE_COORD_ARRAY_STRIDE"] = { type ="value", },
  ["GL_EDGE_FLAG_ARRAY_STRIDE"] = { type ="value", },
  ["GL_VERTEX_ARRAY_POINTER"] = { type ="value", },
  ["GL_NORMAL_ARRAY_POINTER"] = { type ="value", },
  ["GL_COLOR_ARRAY_POINTER"] = { type ="value", },
  ["GL_INDEX_ARRAY_POINTER"] = { type ="value", },
  ["GL_TEXTURE_COORD_ARRAY_POINTER"] = { type ="value", },
  ["GL_EDGE_FLAG_ARRAY_POINTER"] = { type ="value", },
  ["GL_COLOR_INDEX1_EXT"] = { type ="value", },
  ["GL_COLOR_INDEX2_EXT"] = { type ="value", },
  ["GL_COLOR_INDEX4_EXT"] = { type ="value", },
  ["GL_COLOR_INDEX8_EXT"] = { type ="value", },
  ["GL_COLOR_INDEX12_EXT"] = { type ="value", },
  ["GL_COLOR_INDEX16_EXT"] = { type ="value", },
  ["GL_EVAL_BIT"] = { type ="value", },
  ["GL_LIST_BIT"] = { type ="value", },
  ["GL_TEXTURE_BIT"] = { type ="value", },
  ["GL_SCISSOR_BIT"] = { type ="value", },
  ["GL_ALL_ATTRIB_BITS"] = { type ="value", },
  ["GL_CLIENT_ALL_ATTRIB_BITS"] = { type ="value", },
  ["GL_SMOOTH_POINT_SIZE_RANGE"] = { type ="value", },
  ["GL_SMOOTH_POINT_SIZE_GRANULARITY"] = { type ="value", },
  ["GL_SMOOTH_LINE_WIDTH_RANGE"] = { type ="value", },
  ["GL_SMOOTH_LINE_WIDTH_GRANULARITY"] = { type ="value", },
  ["GL_UNSIGNED_BYTE_3_3_2"] = { type ="value", },
  ["GL_UNSIGNED_SHORT_4_4_4_4"] = { type ="value", },
  ["GL_UNSIGNED_SHORT_5_5_5_1"] = { type ="value", },
  ["GL_UNSIGNED_INT_8_8_8_8"] = { type ="value", },
  ["GL_UNSIGNED_INT_10_10_10_2"] = { type ="value", },
  ["GL_RESCALE_NORMAL"] = { type ="value", },
  ["GL_TEXTURE_BINDING_3D"] = { type ="value", },
  ["GL_PACK_SKIP_IMAGES"] = { type ="value", },
  ["GL_PACK_IMAGE_HEIGHT"] = { type ="value", },
  ["GL_UNPACK_SKIP_IMAGES"] = { type ="value", },
  ["GL_UNPACK_IMAGE_HEIGHT"] = { type ="value", },
  ["GL_TEXTURE_3D"] = { type ="value", },
  ["GL_PROXY_TEXTURE_3D"] = { type ="value", },
  ["GL_TEXTURE_DEPTH"] = { type ="value", },
  ["GL_TEXTURE_WRAP_R"] = { type ="value", },
  ["GL_MAX_3D_TEXTURE_SIZE"] = { type ="value", },
  ["GL_BGR"] = { type ="value", },
  ["GL_BGRA"] = { type ="value", },
  ["GL_MAX_ELEMENTS_VERTICES"] = { type ="value", },
  ["GL_MAX_ELEMENTS_INDICES"] = { type ="value", },
  ["GL_CLAMP_TO_EDGE"] = { type ="value", },
  ["GL_TEXTURE_MIN_LOD"] = { type ="value", },
  ["GL_TEXTURE_MAX_LOD"] = { type ="value", },
  ["GL_TEXTURE_BASE_LEVEL"] = { type ="value", },
  ["GL_TEXTURE_MAX_LEVEL"] = { type ="value", },
  ["GL_LIGHT_MODEL_COLOR_CONTROL"] = { type ="value", },
  ["GL_SINGLE_COLOR"] = { type ="value", },
  ["GL_SEPARATE_SPECULAR_COLOR"] = { type ="value", },
  ["GL_UNSIGNED_BYTE_2_3_3_REV"] = { type ="value", },
  ["GL_UNSIGNED_SHORT_5_6_5"] = { type ="value", },
  ["GL_UNSIGNED_SHORT_5_6_5_REV"] = { type ="value", },
  ["GL_UNSIGNED_SHORT_4_4_4_4_REV"] = { type ="value", },
  ["GL_UNSIGNED_SHORT_1_5_5_5_REV"] = { type ="value", },
  ["GL_UNSIGNED_INT_8_8_8_8_REV"] = { type ="value", },
  ["GL_ALIASED_POINT_SIZE_RANGE"] = { type ="value", },
  ["GL_ALIASED_LINE_WIDTH_RANGE"] = { type ="value", },
  ["GL_MULTISAMPLE"] = { type ="value", },
  ["GL_SAMPLE_ALPHA_TO_COVERAGE"] = { type ="value", },
  ["GL_SAMPLE_ALPHA_TO_ONE"] = { type ="value", },
  ["GL_SAMPLE_COVERAGE"] = { type ="value", },
  ["GL_SAMPLE_BUFFERS"] = { type ="value", },
  ["GL_SAMPLES"] = { type ="value", },
  ["GL_SAMPLE_COVERAGE_VALUE"] = { type ="value", },
  ["GL_SAMPLE_COVERAGE_INVERT"] = { type ="value", },
  ["GL_CLAMP_TO_BORDER"] = { type ="value", },
  ["GL_TEXTURE0"] = { type ="value", },
  ["GL_TEXTURE1"] = { type ="value", },
  ["GL_TEXTURE2"] = { type ="value", },
  ["GL_TEXTURE3"] = { type ="value", },
  ["GL_TEXTURE4"] = { type ="value", },
  ["GL_TEXTURE5"] = { type ="value", },
  ["GL_TEXTURE6"] = { type ="value", },
  ["GL_TEXTURE7"] = { type ="value", },
  ["GL_TEXTURE8"] = { type ="value", },
  ["GL_TEXTURE9"] = { type ="value", },
  ["GL_TEXTURE10"] = { type ="value", },
  ["GL_TEXTURE11"] = { type ="value", },
  ["GL_TEXTURE12"] = { type ="value", },
  ["GL_TEXTURE13"] = { type ="value", },
  ["GL_TEXTURE14"] = { type ="value", },
  ["GL_TEXTURE15"] = { type ="value", },
  ["GL_TEXTURE16"] = { type ="value", },
  ["GL_TEXTURE17"] = { type ="value", },
  ["GL_TEXTURE18"] = { type ="value", },
  ["GL_TEXTURE19"] = { type ="value", },
  ["GL_TEXTURE20"] = { type ="value", },
  ["GL_TEXTURE21"] = { type ="value", },
  ["GL_TEXTURE22"] = { type ="value", },
  ["GL_TEXTURE23"] = { type ="value", },
  ["GL_TEXTURE24"] = { type ="value", },
  ["GL_TEXTURE25"] = { type ="value", },
  ["GL_TEXTURE26"] = { type ="value", },
  ["GL_TEXTURE27"] = { type ="value", },
  ["GL_TEXTURE28"] = { type ="value", },
  ["GL_TEXTURE29"] = { type ="value", },
  ["GL_TEXTURE30"] = { type ="value", },
  ["GL_TEXTURE31"] = { type ="value", },
  ["GL_ACTIVE_TEXTURE"] = { type ="value", },
  ["GL_CLIENT_ACTIVE_TEXTURE"] = { type ="value", },
  ["GL_MAX_TEXTURE_UNITS"] = { type ="value", },
  ["GL_TRANSPOSE_MODELVIEW_MATRIX"] = { type ="value", },
  ["GL_TRANSPOSE_PROJECTION_MATRIX"] = { type ="value", },
  ["GL_TRANSPOSE_TEXTURE_MATRIX"] = { type ="value", },
  ["GL_TRANSPOSE_COLOR_MATRIX"] = { type ="value", },
  ["GL_SUBTRACT"] = { type ="value", },
  ["GL_COMPRESSED_ALPHA"] = { type ="value", },
  ["GL_COMPRESSED_LUMINANCE"] = { type ="value", },
  ["GL_COMPRESSED_LUMINANCE_ALPHA"] = { type ="value", },
  ["GL_COMPRESSED_INTENSITY"] = { type ="value", },
  ["GL_COMPRESSED_RGB"] = { type ="value", },
  ["GL_COMPRESSED_RGBA"] = { type ="value", },
  ["GL_TEXTURE_COMPRESSION_HINT"] = { type ="value", },
  ["GL_NORMAL_MAP"] = { type ="value", },
  ["GL_REFLECTION_MAP"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP"] = { type ="value", },
  ["GL_TEXTURE_BINDING_CUBE_MAP"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP_POSITIVE_X"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP_NEGATIVE_X"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP_POSITIVE_Y"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP_POSITIVE_Z"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"] = { type ="value", },
  ["GL_PROXY_TEXTURE_CUBE_MAP"] = { type ="value", },
  ["GL_MAX_CUBE_MAP_TEXTURE_SIZE"] = { type ="value", },
  ["GL_COMBINE"] = { type ="value", },
  ["GL_COMBINE_RGB"] = { type ="value", },
  ["GL_COMBINE_ALPHA"] = { type ="value", },
  ["GL_RGB_SCALE"] = { type ="value", },
  ["GL_ADD_SIGNED"] = { type ="value", },
  ["GL_INTERPOLATE"] = { type ="value", },
  ["GL_CONSTANT"] = { type ="value", },
  ["GL_PRIMARY_COLOR"] = { type ="value", },
  ["GL_PREVIOUS"] = { type ="value", },
  ["GL_SOURCE0_RGB"] = { type ="value", },
  ["GL_SOURCE1_RGB"] = { type ="value", },
  ["GL_SOURCE2_RGB"] = { type ="value", },
  ["GL_SOURCE0_ALPHA"] = { type ="value", },
  ["GL_SOURCE1_ALPHA"] = { type ="value", },
  ["GL_SOURCE2_ALPHA"] = { type ="value", },
  ["GL_OPERAND0_RGB"] = { type ="value", },
  ["GL_OPERAND1_RGB"] = { type ="value", },
  ["GL_OPERAND2_RGB"] = { type ="value", },
  ["GL_OPERAND0_ALPHA"] = { type ="value", },
  ["GL_OPERAND1_ALPHA"] = { type ="value", },
  ["GL_OPERAND2_ALPHA"] = { type ="value", },
  ["GL_TEXTURE_COMPRESSED_IMAGE_SIZE"] = { type ="value", },
  ["GL_TEXTURE_COMPRESSED"] = { type ="value", },
  ["GL_NUM_COMPRESSED_TEXTURE_FORMATS"] = { type ="value", },
  ["GL_COMPRESSED_TEXTURE_FORMATS"] = { type ="value", },
  ["GL_DOT3_RGB"] = { type ="value", },
  ["GL_DOT3_RGBA"] = { type ="value", },
  ["GL_MULTISAMPLE_BIT"] = { type ="value", },
  ["GL_BLEND_DST_RGB"] = { type ="value", },
  ["GL_BLEND_SRC_RGB"] = { type ="value", },
  ["GL_BLEND_DST_ALPHA"] = { type ="value", },
  ["GL_BLEND_SRC_ALPHA"] = { type ="value", },
  ["GL_POINT_SIZE_MIN"] = { type ="value", },
  ["GL_POINT_SIZE_MAX"] = { type ="value", },
  ["GL_POINT_FADE_THRESHOLD_SIZE"] = { type ="value", },
  ["GL_POINT_DISTANCE_ATTENUATION"] = { type ="value", },
  ["GL_GENERATE_MIPMAP"] = { type ="value", },
  ["GL_GENERATE_MIPMAP_HINT"] = { type ="value", },
  ["GL_DEPTH_COMPONENT16"] = { type ="value", },
  ["GL_DEPTH_COMPONENT24"] = { type ="value", },
  ["GL_DEPTH_COMPONENT32"] = { type ="value", },
  ["GL_MIRRORED_REPEAT"] = { type ="value", },
  ["GL_FOG_COORDINATE_SOURCE"] = { type ="value", },
  ["GL_FOG_COORDINATE"] = { type ="value", },
  ["GL_FRAGMENT_DEPTH"] = { type ="value", },
  ["GL_CURRENT_FOG_COORDINATE"] = { type ="value", },
  ["GL_FOG_COORDINATE_ARRAY_TYPE"] = { type ="value", },
  ["GL_FOG_COORDINATE_ARRAY_STRIDE"] = { type ="value", },
  ["GL_FOG_COORDINATE_ARRAY_POINTER"] = { type ="value", },
  ["GL_FOG_COORDINATE_ARRAY"] = { type ="value", },
  ["GL_COLOR_SUM"] = { type ="value", },
  ["GL_CURRENT_SECONDARY_COLOR"] = { type ="value", },
  ["GL_SECONDARY_COLOR_ARRAY_SIZE"] = { type ="value", },
  ["GL_SECONDARY_COLOR_ARRAY_TYPE"] = { type ="value", },
  ["GL_SECONDARY_COLOR_ARRAY_STRIDE"] = { type ="value", },
  ["GL_SECONDARY_COLOR_ARRAY_POINTER"] = { type ="value", },
  ["GL_SECONDARY_COLOR_ARRAY"] = { type ="value", },
  ["GL_MAX_TEXTURE_LOD_BIAS"] = { type ="value", },
  ["GL_TEXTURE_FILTER_CONTROL"] = { type ="value", },
  ["GL_TEXTURE_LOD_BIAS"] = { type ="value", },
  ["GL_INCR_WRAP"] = { type ="value", },
  ["GL_DECR_WRAP"] = { type ="value", },
  ["GL_TEXTURE_DEPTH_SIZE"] = { type ="value", },
  ["GL_DEPTH_TEXTURE_MODE"] = { type ="value", },
  ["GL_TEXTURE_COMPARE_MODE"] = { type ="value", },
  ["GL_TEXTURE_COMPARE_FUNC"] = { type ="value", },
  ["GL_COMPARE_R_TO_TEXTURE"] = { type ="value", },
  ["GL_CURRENT_FOG_COORD"] = { type ="value", },
  ["GL_FOG_COORD"] = { type ="value", },
  ["GL_FOG_COORD_ARRAY"] = { type ="value", },
  ["GL_FOG_COORD_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_FOG_COORD_ARRAY_POINTER"] = { type ="value", },
  ["GL_FOG_COORD_ARRAY_STRIDE"] = { type ="value", },
  ["GL_FOG_COORD_ARRAY_TYPE"] = { type ="value", },
  ["GL_FOG_COORD_SRC"] = { type ="value", },
  ["GL_SRC0_ALPHA"] = { type ="value", },
  ["GL_SRC0_RGB"] = { type ="value", },
  ["GL_SRC1_ALPHA"] = { type ="value", },
  ["GL_SRC1_RGB"] = { type ="value", },
  ["GL_SRC2_ALPHA"] = { type ="value", },
  ["GL_SRC2_RGB"] = { type ="value", },
  ["GL_BUFFER_SIZE"] = { type ="value", },
  ["GL_BUFFER_USAGE"] = { type ="value", },
  ["GL_QUERY_COUNTER_BITS"] = { type ="value", },
  ["GL_CURRENT_QUERY"] = { type ="value", },
  ["GL_QUERY_RESULT"] = { type ="value", },
  ["GL_QUERY_RESULT_AVAILABLE"] = { type ="value", },
  ["GL_ARRAY_BUFFER"] = { type ="value", },
  ["GL_ELEMENT_ARRAY_BUFFER"] = { type ="value", },
  ["GL_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_ELEMENT_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_VERTEX_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_NORMAL_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_COLOR_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_INDEX_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_EDGE_FLAG_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_WEIGHT_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"] = { type ="value", },
  ["GL_READ_ONLY"] = { type ="value", },
  ["GL_WRITE_ONLY"] = { type ="value", },
  ["GL_READ_WRITE"] = { type ="value", },
  ["GL_BUFFER_ACCESS"] = { type ="value", },
  ["GL_BUFFER_MAPPED"] = { type ="value", },
  ["GL_BUFFER_MAP_POINTER"] = { type ="value", },
  ["GL_STREAM_DRAW"] = { type ="value", },
  ["GL_STREAM_READ"] = { type ="value", },
  ["GL_STREAM_COPY"] = { type ="value", },
  ["GL_STATIC_DRAW"] = { type ="value", },
  ["GL_STATIC_READ"] = { type ="value", },
  ["GL_STATIC_COPY"] = { type ="value", },
  ["GL_DYNAMIC_DRAW"] = { type ="value", },
  ["GL_DYNAMIC_READ"] = { type ="value", },
  ["GL_DYNAMIC_COPY"] = { type ="value", },
  ["GL_SAMPLES_PASSED"] = { type ="value", },
  ["GL_BLEND_EQUATION_RGB"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_ENABLED"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_SIZE"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_STRIDE"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_TYPE"] = { type ="value", },
  ["GL_CURRENT_VERTEX_ATTRIB"] = { type ="value", },
  ["GL_VERTEX_PROGRAM_POINT_SIZE"] = { type ="value", },
  ["GL_VERTEX_PROGRAM_TWO_SIDE"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_POINTER"] = { type ="value", },
  ["GL_STENCIL_BACK_FUNC"] = { type ="value", },
  ["GL_STENCIL_BACK_FAIL"] = { type ="value", },
  ["GL_STENCIL_BACK_PASS_DEPTH_FAIL"] = { type ="value", },
  ["GL_STENCIL_BACK_PASS_DEPTH_PASS"] = { type ="value", },
  ["GL_MAX_DRAW_BUFFERS"] = { type ="value", },
  ["GL_DRAW_BUFFER0"] = { type ="value", },
  ["GL_DRAW_BUFFER1"] = { type ="value", },
  ["GL_DRAW_BUFFER2"] = { type ="value", },
  ["GL_DRAW_BUFFER3"] = { type ="value", },
  ["GL_DRAW_BUFFER4"] = { type ="value", },
  ["GL_DRAW_BUFFER5"] = { type ="value", },
  ["GL_DRAW_BUFFER6"] = { type ="value", },
  ["GL_DRAW_BUFFER7"] = { type ="value", },
  ["GL_DRAW_BUFFER8"] = { type ="value", },
  ["GL_DRAW_BUFFER9"] = { type ="value", },
  ["GL_DRAW_BUFFER10"] = { type ="value", },
  ["GL_DRAW_BUFFER11"] = { type ="value", },
  ["GL_DRAW_BUFFER12"] = { type ="value", },
  ["GL_DRAW_BUFFER13"] = { type ="value", },
  ["GL_DRAW_BUFFER14"] = { type ="value", },
  ["GL_DRAW_BUFFER15"] = { type ="value", },
  ["GL_BLEND_EQUATION_ALPHA"] = { type ="value", },
  ["GL_POINT_SPRITE"] = { type ="value", },
  ["GL_COORD_REPLACE"] = { type ="value", },
  ["GL_MAX_VERTEX_ATTRIBS"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_NORMALIZED"] = { type ="value", },
  ["GL_MAX_TEXTURE_COORDS"] = { type ="value", },
  ["GL_MAX_TEXTURE_IMAGE_UNITS"] = { type ="value", },
  ["GL_FRAGMENT_SHADER"] = { type ="value", },
  ["GL_VERTEX_SHADER"] = { type ="value", },
  ["GL_MAX_FRAGMENT_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_VERTEX_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_VARYING_FLOATS"] = { type ="value", },
  ["GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS"] = { type ="value", },
  ["GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS"] = { type ="value", },
  ["GL_SHADER_TYPE"] = { type ="value", },
  ["GL_FLOAT_VEC2"] = { type ="value", },
  ["GL_FLOAT_VEC3"] = { type ="value", },
  ["GL_FLOAT_VEC4"] = { type ="value", },
  ["GL_INT_VEC2"] = { type ="value", },
  ["GL_INT_VEC3"] = { type ="value", },
  ["GL_INT_VEC4"] = { type ="value", },
  ["GL_BOOL"] = { type ="value", },
  ["GL_BOOL_VEC2"] = { type ="value", },
  ["GL_BOOL_VEC3"] = { type ="value", },
  ["GL_BOOL_VEC4"] = { type ="value", },
  ["GL_FLOAT_MAT2"] = { type ="value", },
  ["GL_FLOAT_MAT3"] = { type ="value", },
  ["GL_FLOAT_MAT4"] = { type ="value", },
  ["GL_SAMPLER_1D"] = { type ="value", },
  ["GL_SAMPLER_2D"] = { type ="value", },
  ["GL_SAMPLER_3D"] = { type ="value", },
  ["GL_SAMPLER_CUBE"] = { type ="value", },
  ["GL_SAMPLER_1D_SHADOW"] = { type ="value", },
  ["GL_SAMPLER_2D_SHADOW"] = { type ="value", },
  ["GL_DELETE_STATUS"] = { type ="value", },
  ["GL_COMPILE_STATUS"] = { type ="value", },
  ["GL_LINK_STATUS"] = { type ="value", },
  ["GL_VALIDATE_STATUS"] = { type ="value", },
  ["GL_INFO_LOG_LENGTH"] = { type ="value", },
  ["GL_ATTACHED_SHADERS"] = { type ="value", },
  ["GL_ACTIVE_UNIFORMS"] = { type ="value", },
  ["GL_ACTIVE_UNIFORM_MAX_LENGTH"] = { type ="value", },
  ["GL_SHADER_SOURCE_LENGTH"] = { type ="value", },
  ["GL_ACTIVE_ATTRIBUTES"] = { type ="value", },
  ["GL_ACTIVE_ATTRIBUTE_MAX_LENGTH"] = { type ="value", },
  ["GL_FRAGMENT_SHADER_DERIVATIVE_HINT"] = { type ="value", },
  ["GL_SHADING_LANGUAGE_VERSION"] = { type ="value", },
  ["GL_CURRENT_PROGRAM"] = { type ="value", },
  ["GL_POINT_SPRITE_COORD_ORIGIN"] = { type ="value", },
  ["GL_LOWER_LEFT"] = { type ="value", },
  ["GL_UPPER_LEFT"] = { type ="value", },
  ["GL_STENCIL_BACK_REF"] = { type ="value", },
  ["GL_STENCIL_BACK_VALUE_MASK"] = { type ="value", },
  ["GL_STENCIL_BACK_WRITEMASK"] = { type ="value", },
  ["GL_CURRENT_RASTER_SECONDARY_COLOR"] = { type ="value", },
  ["GL_PIXEL_PACK_BUFFER"] = { type ="value", },
  ["GL_PIXEL_UNPACK_BUFFER"] = { type ="value", },
  ["GL_PIXEL_PACK_BUFFER_BINDING"] = { type ="value", },
  ["GL_PIXEL_UNPACK_BUFFER_BINDING"] = { type ="value", },
  ["GL_FLOAT_MAT2x3"] = { type ="value", },
  ["GL_FLOAT_MAT2x4"] = { type ="value", },
  ["GL_FLOAT_MAT3x2"] = { type ="value", },
  ["GL_FLOAT_MAT3x4"] = { type ="value", },
  ["GL_FLOAT_MAT4x2"] = { type ="value", },
  ["GL_FLOAT_MAT4x3"] = { type ="value", },
  ["GL_SRGB"] = { type ="value", },
  ["GL_SRGB8"] = { type ="value", },
  ["GL_SRGB_ALPHA"] = { type ="value", },
  ["GL_SRGB8_ALPHA8"] = { type ="value", },
  ["GL_SLUMINANCE_ALPHA"] = { type ="value", },
  ["GL_SLUMINANCE8_ALPHA8"] = { type ="value", },
  ["GL_SLUMINANCE"] = { type ="value", },
  ["GL_SLUMINANCE8"] = { type ="value", },
  ["GL_COMPRESSED_SRGB"] = { type ="value", },
  ["GL_COMPRESSED_SRGB_ALPHA"] = { type ="value", },
  ["GL_COMPRESSED_SLUMINANCE"] = { type ="value", },
  ["GL_COMPRESSED_SLUMINANCE_ALPHA"] = { type ="value", },
  ["GL_CLIP_DISTANCE0"] = { type ="value", },
  ["GL_CLIP_DISTANCE1"] = { type ="value", },
  ["GL_CLIP_DISTANCE2"] = { type ="value", },
  ["GL_CLIP_DISTANCE3"] = { type ="value", },
  ["GL_CLIP_DISTANCE4"] = { type ="value", },
  ["GL_CLIP_DISTANCE5"] = { type ="value", },
  ["GL_COMPARE_REF_TO_TEXTURE"] = { type ="value", },
  ["GL_MAX_CLIP_DISTANCES"] = { type ="value", },
  ["GL_MAX_VARYING_COMPONENTS"] = { type ="value", },
  ["GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT"] = { type ="value", },
  ["GL_MAJOR_VERSION"] = { type ="value", },
  ["GL_MINOR_VERSION"] = { type ="value", },
  ["GL_NUM_EXTENSIONS"] = { type ="value", },
  ["GL_CONTEXT_FLAGS"] = { type ="value", },
  ["GL_DEPTH_BUFFER"] = { type ="value", },
  ["GL_STENCIL_BUFFER"] = { type ="value", },
  ["GL_RGBA32F"] = { type ="value", },
  ["GL_RGB32F"] = { type ="value", },
  ["GL_RGBA16F"] = { type ="value", },
  ["GL_RGB16F"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_INTEGER"] = { type ="value", },
  ["GL_MAX_ARRAY_TEXTURE_LAYERS"] = { type ="value", },
  ["GL_MIN_PROGRAM_TEXEL_OFFSET"] = { type ="value", },
  ["GL_MAX_PROGRAM_TEXEL_OFFSET"] = { type ="value", },
  ["GL_CLAMP_VERTEX_COLOR"] = { type ="value", },
  ["GL_CLAMP_FRAGMENT_COLOR"] = { type ="value", },
  ["GL_CLAMP_READ_COLOR"] = { type ="value", },
  ["GL_FIXED_ONLY"] = { type ="value", },
  ["GL_TEXTURE_RED_TYPE"] = { type ="value", },
  ["GL_TEXTURE_GREEN_TYPE"] = { type ="value", },
  ["GL_TEXTURE_BLUE_TYPE"] = { type ="value", },
  ["GL_TEXTURE_ALPHA_TYPE"] = { type ="value", },
  ["GL_TEXTURE_LUMINANCE_TYPE"] = { type ="value", },
  ["GL_TEXTURE_INTENSITY_TYPE"] = { type ="value", },
  ["GL_TEXTURE_DEPTH_TYPE"] = { type ="value", },
  ["GL_TEXTURE_1D_ARRAY"] = { type ="value", },
  ["GL_PROXY_TEXTURE_1D_ARRAY"] = { type ="value", },
  ["GL_TEXTURE_2D_ARRAY"] = { type ="value", },
  ["GL_PROXY_TEXTURE_2D_ARRAY"] = { type ="value", },
  ["GL_TEXTURE_BINDING_1D_ARRAY"] = { type ="value", },
  ["GL_TEXTURE_BINDING_2D_ARRAY"] = { type ="value", },
  ["GL_R11F_G11F_B10F"] = { type ="value", },
  ["GL_UNSIGNED_INT_10F_11F_11F_REV"] = { type ="value", },
  ["GL_RGB9_E5"] = { type ="value", },
  ["GL_UNSIGNED_INT_5_9_9_9_REV"] = { type ="value", },
  ["GL_TEXTURE_SHARED_SIZE"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER_MODE"] = { type ="value", },
  ["GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_VARYINGS"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER_START"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER_SIZE"] = { type ="value", },
  ["GL_PRIMITIVES_GENERATED"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"] = { type ="value", },
  ["GL_RASTERIZER_DISCARD"] = { type ="value", },
  ["GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"] = { type ="value", },
  ["GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"] = { type ="value", },
  ["GL_INTERLEAVED_ATTRIBS"] = { type ="value", },
  ["GL_SEPARATE_ATTRIBS"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER_BINDING"] = { type ="value", },
  ["GL_RGBA32UI"] = { type ="value", },
  ["GL_RGB32UI"] = { type ="value", },
  ["GL_RGBA16UI"] = { type ="value", },
  ["GL_RGB16UI"] = { type ="value", },
  ["GL_RGBA8UI"] = { type ="value", },
  ["GL_RGB8UI"] = { type ="value", },
  ["GL_RGBA32I"] = { type ="value", },
  ["GL_RGB32I"] = { type ="value", },
  ["GL_RGBA16I"] = { type ="value", },
  ["GL_RGB16I"] = { type ="value", },
  ["GL_RGBA8I"] = { type ="value", },
  ["GL_RGB8I"] = { type ="value", },
  ["GL_RED_INTEGER"] = { type ="value", },
  ["GL_GREEN_INTEGER"] = { type ="value", },
  ["GL_BLUE_INTEGER"] = { type ="value", },
  ["GL_ALPHA_INTEGER"] = { type ="value", },
  ["GL_RGB_INTEGER"] = { type ="value", },
  ["GL_RGBA_INTEGER"] = { type ="value", },
  ["GL_BGR_INTEGER"] = { type ="value", },
  ["GL_BGRA_INTEGER"] = { type ="value", },
  ["GL_SAMPLER_1D_ARRAY"] = { type ="value", },
  ["GL_SAMPLER_2D_ARRAY"] = { type ="value", },
  ["GL_SAMPLER_1D_ARRAY_SHADOW"] = { type ="value", },
  ["GL_SAMPLER_2D_ARRAY_SHADOW"] = { type ="value", },
  ["GL_SAMPLER_CUBE_SHADOW"] = { type ="value", },
  ["GL_UNSIGNED_INT_VEC2"] = { type ="value", },
  ["GL_UNSIGNED_INT_VEC3"] = { type ="value", },
  ["GL_UNSIGNED_INT_VEC4"] = { type ="value", },
  ["GL_INT_SAMPLER_1D"] = { type ="value", },
  ["GL_INT_SAMPLER_2D"] = { type ="value", },
  ["GL_INT_SAMPLER_3D"] = { type ="value", },
  ["GL_INT_SAMPLER_CUBE"] = { type ="value", },
  ["GL_INT_SAMPLER_1D_ARRAY"] = { type ="value", },
  ["GL_INT_SAMPLER_2D_ARRAY"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_1D"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_2D"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_3D"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_CUBE"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_1D_ARRAY"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_2D_ARRAY"] = { type ="value", },
  ["GL_QUERY_WAIT"] = { type ="value", },
  ["GL_QUERY_NO_WAIT"] = { type ="value", },
  ["GL_QUERY_BY_REGION_WAIT"] = { type ="value", },
  ["GL_QUERY_BY_REGION_NO_WAIT"] = { type ="value", },
  ["GL_TEXTURE_RECTANGLE"] = { type ="value", },
  ["GL_TEXTURE_BINDING_RECTANGLE"] = { type ="value", },
  ["GL_PROXY_TEXTURE_RECTANGLE"] = { type ="value", },
  ["GL_MAX_RECTANGLE_TEXTURE_SIZE"] = { type ="value", },
  ["GL_SAMPLER_2D_RECT"] = { type ="value", },
  ["GL_SAMPLER_2D_RECT_SHADOW"] = { type ="value", },
  ["GL_TEXTURE_BUFFER"] = { type ="value", },
  ["GL_MAX_TEXTURE_BUFFER_SIZE"] = { type ="value", },
  ["GL_TEXTURE_BINDING_BUFFER"] = { type ="value", },
  ["GL_TEXTURE_BUFFER_DATA_STORE_BINDING"] = { type ="value", },
  ["GL_TEXTURE_BUFFER_FORMAT"] = { type ="value", },
  ["GL_SAMPLER_BUFFER"] = { type ="value", },
  ["GL_INT_SAMPLER_2D_RECT"] = { type ="value", },
  ["GL_INT_SAMPLER_BUFFER"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_2D_RECT"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_BUFFER"] = { type ="value", },
  ["GL_RED_SNORM"] = { type ="value", },
  ["GL_RG_SNORM"] = { type ="value", },
  ["GL_RGB_SNORM"] = { type ="value", },
  ["GL_RGBA_SNORM"] = { type ="value", },
  ["GL_R8_SNORM"] = { type ="value", },
  ["GL_RG8_SNORM"] = { type ="value", },
  ["GL_RGB8_SNORM"] = { type ="value", },
  ["GL_RGBA8_SNORM"] = { type ="value", },
  ["GL_R16_SNORM"] = { type ="value", },
  ["GL_RG16_SNORM"] = { type ="value", },
  ["GL_RGB16_SNORM"] = { type ="value", },
  ["GL_RGBA16_SNORM"] = { type ="value", },
  ["GL_SIGNED_NORMALIZED"] = { type ="value", },
  ["GL_PRIMITIVE_RESTART"] = { type ="value", },
  ["GL_PRIMITIVE_RESTART_INDEX"] = { type ="value", },
  ["GL_BUFFER_ACCESS_FLAGS"] = { type ="value", },
  ["GL_BUFFER_MAP_LENGTH"] = { type ="value", },
  ["GL_BUFFER_MAP_OFFSET"] = { type ="value", },
  ["GL_CONTEXT_CORE_PROFILE_BIT"] = { type ="value", },
  ["GL_CONTEXT_COMPATIBILITY_PROFILE_BIT"] = { type ="value", },
  ["GL_LINES_ADJACENCY"] = { type ="value", },
  ["GL_LINE_STRIP_ADJACENCY"] = { type ="value", },
  ["GL_TRIANGLES_ADJACENCY"] = { type ="value", },
  ["GL_TRIANGLE_STRIP_ADJACENCY"] = { type ="value", },
  ["GL_PROGRAM_POINT_SIZE"] = { type ="value", },
  ["GL_GEOMETRY_VERTICES_OUT"] = { type ="value", },
  ["GL_GEOMETRY_INPUT_TYPE"] = { type ="value", },
  ["GL_GEOMETRY_OUTPUT_TYPE"] = { type ="value", },
  ["GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_LAYERED"] = { type ="value", },
  ["GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS"] = { type ="value", },
  ["GL_GEOMETRY_SHADER"] = { type ="value", },
  ["GL_MAX_GEOMETRY_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_OUTPUT_VERTICES"] = { type ="value", },
  ["GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS"] = { type ="value", },
  ["GL_MAX_VERTEX_OUTPUT_COMPONENTS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_INPUT_COMPONENTS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_OUTPUT_COMPONENTS"] = { type ="value", },
  ["GL_MAX_FRAGMENT_INPUT_COMPONENTS"] = { type ="value", },
  ["GL_CONTEXT_PROFILE_MASK"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_DIVISOR"] = { type ="value", },
  ["GL_RGB10_A2UI"] = { type ="value", },
  ["GL_SAMPLE_SHADING"] = { type ="value", },
  ["GL_MIN_SAMPLE_SHADING_VALUE"] = { type ="value", },
  ["GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET"] = { type ="value", },
  ["GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET"] = { type ="value", },
  ["GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_TEXTURE_BINDING_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_PROXY_TEXTURE_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_SAMPLER_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW"] = { type ="value", },
  ["GL_INT_SAMPLER_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_PAUSED"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_ACTIVE"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_BPTC_UNORM"] = { type ="value", },
  ["GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM"] = { type ="value", },
  ["GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT"] = { type ="value", },
  ["GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT"] = { type ="value", },
  ["GL_COPY_READ_BUFFER_BINDING"] = { type ="value", },
  ["GL_COPY_WRITE_BUFFER_BINDING"] = { type ="value", },
  ["GL_NUM_SHADING_LANGUAGE_VERSIONS"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_LONG"] = { type ="value", },
  ["GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED"] = { type ="value", },
  ["GL_MAX_VERTEX_ATTRIB_STRIDE"] = { type ="value", },
  ["GL_TEXTURE_BUFFER_BINDING"] = { type ="value", },
  ["GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT"] = { type ="value", },
  ["GL_FACTOR_MIN_AMD"] = { type ="value", },
  ["GL_FACTOR_MAX_AMD"] = { type ="value", },
  ["GL_DEBUG_CATEGORY_API_ERROR_AMD"] = { type ="value", },
  ["GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD"] = { type ="value", },
  ["GL_DEBUG_CATEGORY_DEPRECATION_AMD"] = { type ="value", },
  ["GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD"] = { type ="value", },
  ["GL_DEBUG_CATEGORY_PERFORMANCE_AMD"] = { type ="value", },
  ["GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD"] = { type ="value", },
  ["GL_DEBUG_CATEGORY_APPLICATION_AMD"] = { type ="value", },
  ["GL_DEBUG_CATEGORY_OTHER_AMD"] = { type ="value", },
  ["GL_DEPTH_CLAMP_NEAR_AMD"] = { type ="value", },
  ["GL_DEPTH_CLAMP_FAR_AMD"] = { type ="value", },
  ["GL_RG8UI"] = { type ="value", },
  ["GL_RG16UI"] = { type ="value", },
  ["GL_VERTEX_ELEMENT_SWIZZLE_AMD"] = { type ="value", },
  ["GL_VERTEX_ID_SWIZZLE_AMD"] = { type ="value", },
  ["GL_DATA_BUFFER_AMD"] = { type ="value", },
  ["GL_PERFORMANCE_MONITOR_AMD"] = { type ="value", },
  ["GL_QUERY_OBJECT_AMD"] = { type ="value", },
  ["GL_VERTEX_ARRAY_OBJECT_AMD"] = { type ="value", },
  ["GL_SAMPLER_OBJECT_AMD"] = { type ="value", },
  ["GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD"] = { type ="value", },
  ["GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD"] = { type ="value", },
  ["GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD"] = { type ="value", },
  ["GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD"] = { type ="value", },
  ["GL_OCCLUSION_QUERY_EVENT_MASK_AMD"] = { type ="value", },
  ["GL_QUERY_ALL_EVENT_BITS_AMD"] = { type ="value", },
  ["GL_COUNTER_TYPE_AMD"] = { type ="value", },
  ["GL_COUNTER_RANGE_AMD"] = { type ="value", },
  ["GL_UNSIGNED_INT64_AMD"] = { type ="value", },
  ["GL_PERCENTAGE_AMD"] = { type ="value", },
  ["GL_PERFMON_RESULT_AVAILABLE_AMD"] = { type ="value", },
  ["GL_PERFMON_RESULT_SIZE_AMD"] = { type ="value", },
  ["GL_PERFMON_RESULT_AMD"] = { type ="value", },
  ["GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD"] = { type ="value", },
  ["GL_SUBSAMPLE_DISTANCE_AMD"] = { type ="value", },
  ["GL_TEXTURE_STORAGE_SPARSE_BIT_AMD"] = { type ="value", },
  ["GL_VIRTUAL_PAGE_SIZE_X_AMD"] = { type ="value", },
  ["GL_VIRTUAL_PAGE_SIZE_Y_AMD"] = { type ="value", },
  ["GL_VIRTUAL_PAGE_SIZE_Z_AMD"] = { type ="value", },
  ["GL_MAX_SPARSE_TEXTURE_SIZE_AMD"] = { type ="value", },
  ["GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD"] = { type ="value", },
  ["GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS"] = { type ="value", },
  ["GL_MIN_SPARSE_LEVEL_AMD"] = { type ="value", },
  ["GL_MIN_LOD_WARNING_AMD"] = { type ="value", },
  ["GL_REPLACE_VALUE_AMD"] = { type ="value", },
  ["GL_STENCIL_OP_VALUE_AMD"] = { type ="value", },
  ["GL_STENCIL_BACK_OP_VALUE_AMD"] = { type ="value", },
  ["GL_STREAM_RASTERIZATION_AMD"] = { type ="value", },
  ["GL_TESSELLATION_MODE_AMD"] = { type ="value", },
  ["GL_TESSELLATION_FACTOR_AMD"] = { type ="value", },
  ["GL_DISCRETE_AMD"] = { type ="value", },
  ["GL_CONTINUOUS_AMD"] = { type ="value", },
  ["GL_FIXED"] = { type ="value", },
  ["GL_IMPLEMENTATION_COLOR_READ_TYPE"] = { type ="value", },
  ["GL_IMPLEMENTATION_COLOR_READ_FORMAT"] = { type ="value", },
  ["GL_RGB565"] = { type ="value", },
  ["GL_LOW_FLOAT"] = { type ="value", },
  ["GL_MEDIUM_FLOAT"] = { type ="value", },
  ["GL_HIGH_FLOAT"] = { type ="value", },
  ["GL_LOW_INT"] = { type ="value", },
  ["GL_MEDIUM_INT"] = { type ="value", },
  ["GL_HIGH_INT"] = { type ="value", },
  ["GL_SHADER_BINARY_FORMATS"] = { type ="value", },
  ["GL_NUM_SHADER_BINARY_FORMATS"] = { type ="value", },
  ["GL_SHADER_COMPILER"] = { type ="value", },
  ["GL_MAX_VERTEX_UNIFORM_VECTORS"] = { type ="value", },
  ["GL_MAX_VARYING_VECTORS"] = { type ="value", },
  ["GL_MAX_FRAGMENT_UNIFORM_VECTORS"] = { type ="value", },
  ["GL_PRIMITIVE_BOUNDING_BOX_ARB"] = { type ="value", },
  ["GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB"] = { type ="value", },
  ["GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB"] = { type ="value", },
  ["GL_TEXTURE_IMMUTABLE_LEVELS"] = { type ="value", },
  ["GL_PRIMITIVE_RESTART_FIXED_INDEX"] = { type ="value", },
  ["GL_ANY_SAMPLES_PASSED_CONSERVATIVE"] = { type ="value", },
  ["GL_MAX_ELEMENT_INDEX"] = { type ="value", },
  ["GL_COMPRESSED_R11_EAC"] = { type ="value", },
  ["GL_COMPRESSED_SIGNED_R11_EAC"] = { type ="value", },
  ["GL_COMPRESSED_RG11_EAC"] = { type ="value", },
  ["GL_COMPRESSED_SIGNED_RG11_EAC"] = { type ="value", },
  ["GL_COMPRESSED_RGB8_ETC2"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ETC2"] = { type ="value", },
  ["GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = { type ="value", },
  ["GL_COMPRESSED_RGBA8_ETC2_EAC"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = { type ="value", },
  ["GL_UNSIGNED_INT64_ARB"] = { type ="value", },
  ["GL_SRC1_COLOR"] = { type ="value", },
  ["GL_ONE_MINUS_SRC1_COLOR"] = { type ="value", },
  ["GL_ONE_MINUS_SRC1_ALPHA"] = { type ="value", },
  ["GL_MAX_DUAL_SOURCE_DRAW_BUFFERS"] = { type ="value", },
  ["GL_MAP_READ_BIT"] = { type ="value", },
  ["GL_MAP_WRITE_BIT"] = { type ="value", },
  ["GL_MAP_PERSISTENT_BIT"] = { type ="value", },
  ["GL_MAP_COHERENT_BIT"] = { type ="value", },
  ["GL_DYNAMIC_STORAGE_BIT"] = { type ="value", },
  ["GL_CLIENT_STORAGE_BIT"] = { type ="value", },
  ["GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT"] = { type ="value", },
  ["GL_BUFFER_IMMUTABLE_STORAGE"] = { type ="value", },
  ["GL_BUFFER_STORAGE_FLAGS"] = { type ="value", },
  ["GL_SYNC_CL_EVENT_ARB"] = { type ="value", },
  ["GL_SYNC_CL_EVENT_COMPLETE_ARB"] = { type ="value", },
  ["GL_CLEAR_TEXTURE"] = { type ="value", },
  ["GL_CLIP_ORIGIN"] = { type ="value", },
  ["GL_CLIP_DEPTH_MODE"] = { type ="value", },
  ["GL_NEGATIVE_ONE_TO_ONE"] = { type ="value", },
  ["GL_ZERO_TO_ONE"] = { type ="value", },
  ["GL_RGBA_FLOAT_MODE_ARB"] = { type ="value", },
  ["GL_UNPACK_COMPRESSED_BLOCK_WIDTH"] = { type ="value", },
  ["GL_UNPACK_COMPRESSED_BLOCK_HEIGHT"] = { type ="value", },
  ["GL_UNPACK_COMPRESSED_BLOCK_DEPTH"] = { type ="value", },
  ["GL_UNPACK_COMPRESSED_BLOCK_SIZE"] = { type ="value", },
  ["GL_PACK_COMPRESSED_BLOCK_WIDTH"] = { type ="value", },
  ["GL_PACK_COMPRESSED_BLOCK_HEIGHT"] = { type ="value", },
  ["GL_PACK_COMPRESSED_BLOCK_DEPTH"] = { type ="value", },
  ["GL_PACK_COMPRESSED_BLOCK_SIZE"] = { type ="value", },
  ["GL_COMPUTE_SHADER_BIT"] = { type ="value", },
  ["GL_MAX_COMPUTE_SHARED_MEMORY_SIZE"] = { type ="value", },
  ["GL_MAX_COMPUTE_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS"] = { type ="value", },
  ["GL_MAX_COMPUTE_ATOMIC_COUNTERS"] = { type ="value", },
  ["GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_COMPUTE_WORK_GROUP_SIZE"] = { type ="value", },
  ["GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER"] = { type ="value", },
  ["GL_DISPATCH_INDIRECT_BUFFER"] = { type ="value", },
  ["GL_DISPATCH_INDIRECT_BUFFER_BINDING"] = { type ="value", },
  ["GL_COMPUTE_SHADER"] = { type ="value", },
  ["GL_MAX_COMPUTE_UNIFORM_BLOCKS"] = { type ="value", },
  ["GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS"] = { type ="value", },
  ["GL_MAX_COMPUTE_IMAGE_UNIFORMS"] = { type ="value", },
  ["GL_MAX_COMPUTE_WORK_GROUP_COUNT"] = { type ="value", },
  ["GL_MAX_COMPUTE_WORK_GROUP_SIZE"] = { type ="value", },
  ["GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB"] = { type ="value", },
  ["GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB"] = { type ="value", },
  ["GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB"] = { type ="value", },
  ["GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB"] = { type ="value", },
  ["GL_QUERY_WAIT_INVERTED"] = { type ="value", },
  ["GL_QUERY_NO_WAIT_INVERTED"] = { type ="value", },
  ["GL_QUERY_BY_REGION_WAIT_INVERTED"] = { type ="value", },
  ["GL_QUERY_BY_REGION_NO_WAIT_INVERTED"] = { type ="value", },
  ["GL_COPY_READ_BUFFER"] = { type ="value", },
  ["GL_COPY_WRITE_BUFFER"] = { type ="value", },
  ["GL_MAX_CULL_DISTANCES"] = { type ="value", },
  ["GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES"] = { type ="value", },
  ["GL_DEPTH_COMPONENT32F"] = { type ="value", },
  ["GL_DEPTH32F_STENCIL8"] = { type ="value", },
  ["GL_FLOAT_32_UNSIGNED_INT_24_8_REV"] = { type ="value", },
  ["GL_DEPTH_CLAMP"] = { type ="value", },
  ["GL_TEXTURE_TARGET"] = { type ="value", },
  ["GL_QUERY_TARGET"] = { type ="value", },
  ["GL_DRAW_INDIRECT_BUFFER"] = { type ="value", },
  ["GL_DRAW_INDIRECT_BUFFER_BINDING"] = { type ="value", },
  ["GL_LOCATION_COMPONENT"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER_INDEX"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE"] = { type ="value", },
  ["GL_MAX_UNIFORM_LOCATIONS"] = { type ="value", },
  ["GL_FRAGMENT_PROGRAM_ARB"] = { type ="value", },
  ["GL_PROGRAM_ALU_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_PROGRAM_TEX_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_PROGRAM_TEX_INDIRECTIONS_ARB"] = { type ="value", },
  ["GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB"] = { type ="value", },
  ["GL_FRAMEBUFFER_DEFAULT_WIDTH"] = { type ="value", },
  ["GL_FRAMEBUFFER_DEFAULT_HEIGHT"] = { type ="value", },
  ["GL_FRAMEBUFFER_DEFAULT_LAYERS"] = { type ="value", },
  ["GL_FRAMEBUFFER_DEFAULT_SAMPLES"] = { type ="value", },
  ["GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS"] = { type ="value", },
  ["GL_MAX_FRAMEBUFFER_WIDTH"] = { type ="value", },
  ["GL_MAX_FRAMEBUFFER_HEIGHT"] = { type ="value", },
  ["GL_MAX_FRAMEBUFFER_LAYERS"] = { type ="value", },
  ["GL_MAX_FRAMEBUFFER_SAMPLES"] = { type ="value", },
  ["GL_INVALID_FRAMEBUFFER_OPERATION"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"] = { type ="value", },
  ["GL_FRAMEBUFFER_DEFAULT"] = { type ="value", },
  ["GL_FRAMEBUFFER_UNDEFINED"] = { type ="value", },
  ["GL_DEPTH_STENCIL_ATTACHMENT"] = { type ="value", },
  ["GL_INDEX"] = { type ="value", },
  ["GL_MAX_RENDERBUFFER_SIZE"] = { type ="value", },
  ["GL_DEPTH_STENCIL"] = { type ="value", },
  ["GL_UNSIGNED_INT_24_8"] = { type ="value", },
  ["GL_DEPTH24_STENCIL8"] = { type ="value", },
  ["GL_TEXTURE_STENCIL_SIZE"] = { type ="value", },
  ["GL_UNSIGNED_NORMALIZED"] = { type ="value", },
  ["GL_DRAW_FRAMEBUFFER_BINDING"] = { type ="value", },
  ["GL_FRAMEBUFFER_BINDING"] = { type ="value", },
  ["GL_RENDERBUFFER_BINDING"] = { type ="value", },
  ["GL_READ_FRAMEBUFFER"] = { type ="value", },
  ["GL_DRAW_FRAMEBUFFER"] = { type ="value", },
  ["GL_READ_FRAMEBUFFER_BINDING"] = { type ="value", },
  ["GL_RENDERBUFFER_SAMPLES"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"] = { type ="value", },
  ["GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"] = { type ="value", },
  ["GL_FRAMEBUFFER_COMPLETE"] = { type ="value", },
  ["GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"] = { type ="value", },
  ["GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"] = { type ="value", },
  ["GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER"] = { type ="value", },
  ["GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER"] = { type ="value", },
  ["GL_FRAMEBUFFER_UNSUPPORTED"] = { type ="value", },
  ["GL_MAX_COLOR_ATTACHMENTS"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT0"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT1"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT2"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT3"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT4"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT5"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT6"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT7"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT8"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT9"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT10"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT11"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT12"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT13"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT14"] = { type ="value", },
  ["GL_COLOR_ATTACHMENT15"] = { type ="value", },
  ["GL_DEPTH_ATTACHMENT"] = { type ="value", },
  ["GL_STENCIL_ATTACHMENT"] = { type ="value", },
  ["GL_FRAMEBUFFER"] = { type ="value", },
  ["GL_RENDERBUFFER"] = { type ="value", },
  ["GL_RENDERBUFFER_WIDTH"] = { type ="value", },
  ["GL_RENDERBUFFER_HEIGHT"] = { type ="value", },
  ["GL_RENDERBUFFER_INTERNAL_FORMAT"] = { type ="value", },
  ["GL_STENCIL_INDEX1"] = { type ="value", },
  ["GL_STENCIL_INDEX4"] = { type ="value", },
  ["GL_STENCIL_INDEX8"] = { type ="value", },
  ["GL_STENCIL_INDEX16"] = { type ="value", },
  ["GL_RENDERBUFFER_RED_SIZE"] = { type ="value", },
  ["GL_RENDERBUFFER_GREEN_SIZE"] = { type ="value", },
  ["GL_RENDERBUFFER_BLUE_SIZE"] = { type ="value", },
  ["GL_RENDERBUFFER_ALPHA_SIZE"] = { type ="value", },
  ["GL_RENDERBUFFER_DEPTH_SIZE"] = { type ="value", },
  ["GL_RENDERBUFFER_STENCIL_SIZE"] = { type ="value", },
  ["GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"] = { type ="value", },
  ["GL_MAX_SAMPLES"] = { type ="value", },
  ["GL_FRAMEBUFFER_SRGB"] = { type ="value", },
  ["GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB"] = { type ="value", },
  ["GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB"] = { type ="value", },
  ["GL_MAX_VERTEX_VARYING_COMPONENTS_ARB"] = { type ="value", },
  ["GL_PROGRAM_BINARY_RETRIEVABLE_HINT"] = { type ="value", },
  ["GL_PROGRAM_BINARY_LENGTH"] = { type ="value", },
  ["GL_NUM_PROGRAM_BINARY_FORMATS"] = { type ="value", },
  ["GL_PROGRAM_BINARY_FORMATS"] = { type ="value", },
  ["GL_SHADER_BINARY_FORMAT_SPIR_V_ARB"] = { type ="value", },
  ["GL_SPIR_V_BINARY_ARB"] = { type ="value", },
  ["GL_GEOMETRY_SHADER_INVOCATIONS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_SHADER_INVOCATIONS"] = { type ="value", },
  ["GL_MIN_FRAGMENT_INTERPOLATION_OFFSET"] = { type ="value", },
  ["GL_MAX_FRAGMENT_INTERPOLATION_OFFSET"] = { type ="value", },
  ["GL_FRAGMENT_INTERPOLATION_OFFSET_BITS"] = { type ="value", },
  ["GL_MAX_VERTEX_STREAMS"] = { type ="value", },
  ["GL_DOUBLE_MAT2"] = { type ="value", },
  ["GL_DOUBLE_MAT3"] = { type ="value", },
  ["GL_DOUBLE_MAT4"] = { type ="value", },
  ["GL_DOUBLE_MAT2x3"] = { type ="value", },
  ["GL_DOUBLE_MAT2x4"] = { type ="value", },
  ["GL_DOUBLE_MAT3x2"] = { type ="value", },
  ["GL_DOUBLE_MAT3x4"] = { type ="value", },
  ["GL_DOUBLE_MAT4x2"] = { type ="value", },
  ["GL_DOUBLE_MAT4x3"] = { type ="value", },
  ["GL_DOUBLE_VEC2"] = { type ="value", },
  ["GL_DOUBLE_VEC3"] = { type ="value", },
  ["GL_DOUBLE_VEC4"] = { type ="value", },
  ["GL_INT64_ARB"] = { type ="value", },
  ["GL_INT64_VEC2_ARB"] = { type ="value", },
  ["GL_INT64_VEC3_ARB"] = { type ="value", },
  ["GL_INT64_VEC4_ARB"] = { type ="value", },
  ["GL_UNSIGNED_INT64_VEC2_ARB"] = { type ="value", },
  ["GL_UNSIGNED_INT64_VEC3_ARB"] = { type ="value", },
  ["GL_UNSIGNED_INT64_VEC4_ARB"] = { type ="value", },
  ["GL_HALF_FLOAT"] = { type ="value", },
  ["GL_CONSTANT_COLOR"] = { type ="value", },
  ["GL_ONE_MINUS_CONSTANT_COLOR"] = { type ="value", },
  ["GL_CONSTANT_ALPHA"] = { type ="value", },
  ["GL_ONE_MINUS_CONSTANT_ALPHA"] = { type ="value", },
  ["GL_BLEND_COLOR"] = { type ="value", },
  ["GL_FUNC_ADD"] = { type ="value", },
  ["GL_MIN"] = { type ="value", },
  ["GL_MAX"] = { type ="value", },
  ["GL_BLEND_EQUATION"] = { type ="value", },
  ["GL_FUNC_SUBTRACT"] = { type ="value", },
  ["GL_FUNC_REVERSE_SUBTRACT"] = { type ="value", },
  ["GL_CONVOLUTION_1D"] = { type ="value", },
  ["GL_CONVOLUTION_2D"] = { type ="value", },
  ["GL_SEPARABLE_2D"] = { type ="value", },
  ["GL_CONVOLUTION_BORDER_MODE"] = { type ="value", },
  ["GL_CONVOLUTION_FILTER_SCALE"] = { type ="value", },
  ["GL_CONVOLUTION_FILTER_BIAS"] = { type ="value", },
  ["GL_REDUCE"] = { type ="value", },
  ["GL_CONVOLUTION_FORMAT"] = { type ="value", },
  ["GL_CONVOLUTION_WIDTH"] = { type ="value", },
  ["GL_CONVOLUTION_HEIGHT"] = { type ="value", },
  ["GL_MAX_CONVOLUTION_WIDTH"] = { type ="value", },
  ["GL_MAX_CONVOLUTION_HEIGHT"] = { type ="value", },
  ["GL_POST_CONVOLUTION_RED_SCALE"] = { type ="value", },
  ["GL_POST_CONVOLUTION_GREEN_SCALE"] = { type ="value", },
  ["GL_POST_CONVOLUTION_BLUE_SCALE"] = { type ="value", },
  ["GL_POST_CONVOLUTION_ALPHA_SCALE"] = { type ="value", },
  ["GL_POST_CONVOLUTION_RED_BIAS"] = { type ="value", },
  ["GL_POST_CONVOLUTION_GREEN_BIAS"] = { type ="value", },
  ["GL_POST_CONVOLUTION_BLUE_BIAS"] = { type ="value", },
  ["GL_POST_CONVOLUTION_ALPHA_BIAS"] = { type ="value", },
  ["GL_HISTOGRAM"] = { type ="value", },
  ["GL_PROXY_HISTOGRAM"] = { type ="value", },
  ["GL_HISTOGRAM_WIDTH"] = { type ="value", },
  ["GL_HISTOGRAM_FORMAT"] = { type ="value", },
  ["GL_HISTOGRAM_RED_SIZE"] = { type ="value", },
  ["GL_HISTOGRAM_GREEN_SIZE"] = { type ="value", },
  ["GL_HISTOGRAM_BLUE_SIZE"] = { type ="value", },
  ["GL_HISTOGRAM_ALPHA_SIZE"] = { type ="value", },
  ["GL_HISTOGRAM_LUMINANCE_SIZE"] = { type ="value", },
  ["GL_HISTOGRAM_SINK"] = { type ="value", },
  ["GL_MINMAX"] = { type ="value", },
  ["GL_MINMAX_FORMAT"] = { type ="value", },
  ["GL_MINMAX_SINK"] = { type ="value", },
  ["GL_TABLE_TOO_LARGE"] = { type ="value", },
  ["GL_COLOR_MATRIX"] = { type ="value", },
  ["GL_COLOR_MATRIX_STACK_DEPTH"] = { type ="value", },
  ["GL_MAX_COLOR_MATRIX_STACK_DEPTH"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_RED_SCALE"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_GREEN_SCALE"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_BLUE_SCALE"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_ALPHA_SCALE"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_RED_BIAS"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_GREEN_BIAS"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_BLUE_BIAS"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_ALPHA_BIAS"] = { type ="value", },
  ["GL_COLOR_TABLE"] = { type ="value", },
  ["GL_POST_CONVOLUTION_COLOR_TABLE"] = { type ="value", },
  ["GL_POST_COLOR_MATRIX_COLOR_TABLE"] = { type ="value", },
  ["GL_PROXY_COLOR_TABLE"] = { type ="value", },
  ["GL_PROXY_POST_CONVOLUTION_COLOR_TABLE"] = { type ="value", },
  ["GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE"] = { type ="value", },
  ["GL_COLOR_TABLE_SCALE"] = { type ="value", },
  ["GL_COLOR_TABLE_BIAS"] = { type ="value", },
  ["GL_COLOR_TABLE_FORMAT"] = { type ="value", },
  ["GL_COLOR_TABLE_WIDTH"] = { type ="value", },
  ["GL_COLOR_TABLE_RED_SIZE"] = { type ="value", },
  ["GL_COLOR_TABLE_GREEN_SIZE"] = { type ="value", },
  ["GL_COLOR_TABLE_BLUE_SIZE"] = { type ="value", },
  ["GL_COLOR_TABLE_ALPHA_SIZE"] = { type ="value", },
  ["GL_COLOR_TABLE_LUMINANCE_SIZE"] = { type ="value", },
  ["GL_COLOR_TABLE_INTENSITY_SIZE"] = { type ="value", },
  ["GL_IGNORE_BORDER"] = { type ="value", },
  ["GL_CONSTANT_BORDER"] = { type ="value", },
  ["GL_WRAP_BORDER"] = { type ="value", },
  ["GL_REPLICATE_BORDER"] = { type ="value", },
  ["GL_CONVOLUTION_BORDER_COLOR"] = { type ="value", },
  ["GL_PARAMETER_BUFFER_ARB"] = { type ="value", },
  ["GL_PARAMETER_BUFFER_BINDING_ARB"] = { type ="value", },
  ["GL_NUM_SAMPLE_COUNTS"] = { type ="value", },
  ["GL_INTERNALFORMAT_SUPPORTED"] = { type ="value", },
  ["GL_INTERNALFORMAT_PREFERRED"] = { type ="value", },
  ["GL_INTERNALFORMAT_RED_SIZE"] = { type ="value", },
  ["GL_INTERNALFORMAT_GREEN_SIZE"] = { type ="value", },
  ["GL_INTERNALFORMAT_BLUE_SIZE"] = { type ="value", },
  ["GL_INTERNALFORMAT_ALPHA_SIZE"] = { type ="value", },
  ["GL_INTERNALFORMAT_DEPTH_SIZE"] = { type ="value", },
  ["GL_INTERNALFORMAT_STENCIL_SIZE"] = { type ="value", },
  ["GL_INTERNALFORMAT_SHARED_SIZE"] = { type ="value", },
  ["GL_INTERNALFORMAT_RED_TYPE"] = { type ="value", },
  ["GL_INTERNALFORMAT_GREEN_TYPE"] = { type ="value", },
  ["GL_INTERNALFORMAT_BLUE_TYPE"] = { type ="value", },
  ["GL_INTERNALFORMAT_ALPHA_TYPE"] = { type ="value", },
  ["GL_INTERNALFORMAT_DEPTH_TYPE"] = { type ="value", },
  ["GL_INTERNALFORMAT_STENCIL_TYPE"] = { type ="value", },
  ["GL_MAX_WIDTH"] = { type ="value", },
  ["GL_MAX_HEIGHT"] = { type ="value", },
  ["GL_MAX_DEPTH"] = { type ="value", },
  ["GL_MAX_LAYERS"] = { type ="value", },
  ["GL_MAX_COMBINED_DIMENSIONS"] = { type ="value", },
  ["GL_COLOR_COMPONENTS"] = { type ="value", },
  ["GL_DEPTH_COMPONENTS"] = { type ="value", },
  ["GL_STENCIL_COMPONENTS"] = { type ="value", },
  ["GL_COLOR_RENDERABLE"] = { type ="value", },
  ["GL_DEPTH_RENDERABLE"] = { type ="value", },
  ["GL_STENCIL_RENDERABLE"] = { type ="value", },
  ["GL_FRAMEBUFFER_RENDERABLE"] = { type ="value", },
  ["GL_FRAMEBUFFER_RENDERABLE_LAYERED"] = { type ="value", },
  ["GL_FRAMEBUFFER_BLEND"] = { type ="value", },
  ["GL_READ_PIXELS"] = { type ="value", },
  ["GL_READ_PIXELS_FORMAT"] = { type ="value", },
  ["GL_READ_PIXELS_TYPE"] = { type ="value", },
  ["GL_TEXTURE_IMAGE_FORMAT"] = { type ="value", },
  ["GL_TEXTURE_IMAGE_TYPE"] = { type ="value", },
  ["GL_GET_TEXTURE_IMAGE_FORMAT"] = { type ="value", },
  ["GL_GET_TEXTURE_IMAGE_TYPE"] = { type ="value", },
  ["GL_MIPMAP"] = { type ="value", },
  ["GL_MANUAL_GENERATE_MIPMAP"] = { type ="value", },
  ["GL_AUTO_GENERATE_MIPMAP"] = { type ="value", },
  ["GL_COLOR_ENCODING"] = { type ="value", },
  ["GL_SRGB_READ"] = { type ="value", },
  ["GL_SRGB_WRITE"] = { type ="value", },
  ["GL_SRGB_DECODE_ARB"] = { type ="value", },
  ["GL_FILTER"] = { type ="value", },
  ["GL_VERTEX_TEXTURE"] = { type ="value", },
  ["GL_TESS_CONTROL_TEXTURE"] = { type ="value", },
  ["GL_TESS_EVALUATION_TEXTURE"] = { type ="value", },
  ["GL_GEOMETRY_TEXTURE"] = { type ="value", },
  ["GL_FRAGMENT_TEXTURE"] = { type ="value", },
  ["GL_COMPUTE_TEXTURE"] = { type ="value", },
  ["GL_TEXTURE_SHADOW"] = { type ="value", },
  ["GL_TEXTURE_GATHER"] = { type ="value", },
  ["GL_TEXTURE_GATHER_SHADOW"] = { type ="value", },
  ["GL_SHADER_IMAGE_LOAD"] = { type ="value", },
  ["GL_SHADER_IMAGE_STORE"] = { type ="value", },
  ["GL_SHADER_IMAGE_ATOMIC"] = { type ="value", },
  ["GL_IMAGE_TEXEL_SIZE"] = { type ="value", },
  ["GL_IMAGE_COMPATIBILITY_CLASS"] = { type ="value", },
  ["GL_IMAGE_PIXEL_FORMAT"] = { type ="value", },
  ["GL_IMAGE_PIXEL_TYPE"] = { type ="value", },
  ["GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST"] = { type ="value", },
  ["GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST"] = { type ="value", },
  ["GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE"] = { type ="value", },
  ["GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE"] = { type ="value", },
  ["GL_TEXTURE_COMPRESSED_BLOCK_WIDTH"] = { type ="value", },
  ["GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT"] = { type ="value", },
  ["GL_TEXTURE_COMPRESSED_BLOCK_SIZE"] = { type ="value", },
  ["GL_CLEAR_BUFFER"] = { type ="value", },
  ["GL_TEXTURE_VIEW"] = { type ="value", },
  ["GL_VIEW_COMPATIBILITY_CLASS"] = { type ="value", },
  ["GL_FULL_SUPPORT"] = { type ="value", },
  ["GL_CAVEAT_SUPPORT"] = { type ="value", },
  ["GL_IMAGE_CLASS_4_X_32"] = { type ="value", },
  ["GL_IMAGE_CLASS_2_X_32"] = { type ="value", },
  ["GL_IMAGE_CLASS_1_X_32"] = { type ="value", },
  ["GL_IMAGE_CLASS_4_X_16"] = { type ="value", },
  ["GL_IMAGE_CLASS_2_X_16"] = { type ="value", },
  ["GL_IMAGE_CLASS_1_X_16"] = { type ="value", },
  ["GL_IMAGE_CLASS_4_X_8"] = { type ="value", },
  ["GL_IMAGE_CLASS_2_X_8"] = { type ="value", },
  ["GL_IMAGE_CLASS_1_X_8"] = { type ="value", },
  ["GL_IMAGE_CLASS_11_11_10"] = { type ="value", },
  ["GL_IMAGE_CLASS_10_10_10_2"] = { type ="value", },
  ["GL_VIEW_CLASS_128_BITS"] = { type ="value", },
  ["GL_VIEW_CLASS_96_BITS"] = { type ="value", },
  ["GL_VIEW_CLASS_64_BITS"] = { type ="value", },
  ["GL_VIEW_CLASS_48_BITS"] = { type ="value", },
  ["GL_VIEW_CLASS_32_BITS"] = { type ="value", },
  ["GL_VIEW_CLASS_24_BITS"] = { type ="value", },
  ["GL_VIEW_CLASS_16_BITS"] = { type ="value", },
  ["GL_VIEW_CLASS_8_BITS"] = { type ="value", },
  ["GL_VIEW_CLASS_S3TC_DXT1_RGB"] = { type ="value", },
  ["GL_VIEW_CLASS_S3TC_DXT1_RGBA"] = { type ="value", },
  ["GL_VIEW_CLASS_S3TC_DXT3_RGBA"] = { type ="value", },
  ["GL_VIEW_CLASS_S3TC_DXT5_RGBA"] = { type ="value", },
  ["GL_VIEW_CLASS_RGTC1_RED"] = { type ="value", },
  ["GL_VIEW_CLASS_RGTC2_RG"] = { type ="value", },
  ["GL_VIEW_CLASS_BPTC_UNORM"] = { type ="value", },
  ["GL_VIEW_CLASS_BPTC_FLOAT"] = { type ="value", },
  ["GL_MIN_MAP_BUFFER_ALIGNMENT"] = { type ="value", },
  ["GL_MAP_INVALIDATE_RANGE_BIT"] = { type ="value", },
  ["GL_MAP_INVALIDATE_BUFFER_BIT"] = { type ="value", },
  ["GL_MAP_FLUSH_EXPLICIT_BIT"] = { type ="value", },
  ["GL_MAP_UNSYNCHRONIZED_BIT"] = { type ="value", },
  ["GL_MATRIX_PALETTE_ARB"] = { type ="value", },
  ["GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB"] = { type ="value", },
  ["GL_MAX_PALETTE_MATRICES_ARB"] = { type ="value", },
  ["GL_CURRENT_PALETTE_MATRIX_ARB"] = { type ="value", },
  ["GL_MATRIX_INDEX_ARRAY_ARB"] = { type ="value", },
  ["GL_CURRENT_MATRIX_INDEX_ARB"] = { type ="value", },
  ["GL_MATRIX_INDEX_ARRAY_SIZE_ARB"] = { type ="value", },
  ["GL_MATRIX_INDEX_ARRAY_TYPE_ARB"] = { type ="value", },
  ["GL_MATRIX_INDEX_ARRAY_STRIDE_ARB"] = { type ="value", },
  ["GL_MATRIX_INDEX_ARRAY_POINTER_ARB"] = { type ="value", },
  ["GL_ANY_SAMPLES_PASSED"] = { type ="value", },
  ["GL_MAX_SHADER_COMPILER_THREADS_ARB"] = { type ="value", },
  ["GL_COMPLETION_STATUS_ARB"] = { type ="value", },
  ["GL_VERTICES_SUBMITTED_ARB"] = { type ="value", },
  ["GL_PRIMITIVES_SUBMITTED_ARB"] = { type ="value", },
  ["GL_VERTEX_SHADER_INVOCATIONS_ARB"] = { type ="value", },
  ["GL_TESS_CONTROL_SHADER_PATCHES_ARB"] = { type ="value", },
  ["GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB"] = { type ="value", },
  ["GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB"] = { type ="value", },
  ["GL_FRAGMENT_SHADER_INVOCATIONS_ARB"] = { type ="value", },
  ["GL_COMPUTE_SHADER_INVOCATIONS_ARB"] = { type ="value", },
  ["GL_CLIPPING_INPUT_PRIMITIVES_ARB"] = { type ="value", },
  ["GL_CLIPPING_OUTPUT_PRIMITIVES_ARB"] = { type ="value", },
  ["GL_UNIFORM"] = { type ="value", },
  ["GL_UNIFORM_BLOCK"] = { type ="value", },
  ["GL_PROGRAM_INPUT"] = { type ="value", },
  ["GL_PROGRAM_OUTPUT"] = { type ="value", },
  ["GL_BUFFER_VARIABLE"] = { type ="value", },
  ["GL_SHADER_STORAGE_BLOCK"] = { type ="value", },
  ["GL_IS_PER_PATCH"] = { type ="value", },
  ["GL_VERTEX_SUBROUTINE"] = { type ="value", },
  ["GL_TESS_CONTROL_SUBROUTINE"] = { type ="value", },
  ["GL_TESS_EVALUATION_SUBROUTINE"] = { type ="value", },
  ["GL_GEOMETRY_SUBROUTINE"] = { type ="value", },
  ["GL_FRAGMENT_SUBROUTINE"] = { type ="value", },
  ["GL_COMPUTE_SUBROUTINE"] = { type ="value", },
  ["GL_VERTEX_SUBROUTINE_UNIFORM"] = { type ="value", },
  ["GL_TESS_CONTROL_SUBROUTINE_UNIFORM"] = { type ="value", },
  ["GL_TESS_EVALUATION_SUBROUTINE_UNIFORM"] = { type ="value", },
  ["GL_GEOMETRY_SUBROUTINE_UNIFORM"] = { type ="value", },
  ["GL_FRAGMENT_SUBROUTINE_UNIFORM"] = { type ="value", },
  ["GL_COMPUTE_SUBROUTINE_UNIFORM"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_VARYING"] = { type ="value", },
  ["GL_ACTIVE_RESOURCES"] = { type ="value", },
  ["GL_MAX_NAME_LENGTH"] = { type ="value", },
  ["GL_MAX_NUM_ACTIVE_VARIABLES"] = { type ="value", },
  ["GL_MAX_NUM_COMPATIBLE_SUBROUTINES"] = { type ="value", },
  ["GL_NAME_LENGTH"] = { type ="value", },
  ["GL_TYPE"] = { type ="value", },
  ["GL_ARRAY_SIZE"] = { type ="value", },
  ["GL_OFFSET"] = { type ="value", },
  ["GL_BLOCK_INDEX"] = { type ="value", },
  ["GL_ARRAY_STRIDE"] = { type ="value", },
  ["GL_MATRIX_STRIDE"] = { type ="value", },
  ["GL_IS_ROW_MAJOR"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_INDEX"] = { type ="value", },
  ["GL_BUFFER_BINDING"] = { type ="value", },
  ["GL_BUFFER_DATA_SIZE"] = { type ="value", },
  ["GL_NUM_ACTIVE_VARIABLES"] = { type ="value", },
  ["GL_ACTIVE_VARIABLES"] = { type ="value", },
  ["GL_REFERENCED_BY_VERTEX_SHADER"] = { type ="value", },
  ["GL_REFERENCED_BY_TESS_CONTROL_SHADER"] = { type ="value", },
  ["GL_REFERENCED_BY_TESS_EVALUATION_SHADER"] = { type ="value", },
  ["GL_REFERENCED_BY_GEOMETRY_SHADER"] = { type ="value", },
  ["GL_REFERENCED_BY_FRAGMENT_SHADER"] = { type ="value", },
  ["GL_REFERENCED_BY_COMPUTE_SHADER"] = { type ="value", },
  ["GL_TOP_LEVEL_ARRAY_SIZE"] = { type ="value", },
  ["GL_TOP_LEVEL_ARRAY_STRIDE"] = { type ="value", },
  ["GL_LOCATION"] = { type ="value", },
  ["GL_LOCATION_INDEX"] = { type ="value", },
  ["GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION"] = { type ="value", },
  ["GL_FIRST_VERTEX_CONVENTION"] = { type ="value", },
  ["GL_LAST_VERTEX_CONVENTION"] = { type ="value", },
  ["GL_PROVOKING_VERTEX"] = { type ="value", },
  ["GL_QUERY_BUFFER_BARRIER_BIT"] = { type ="value", },
  ["GL_QUERY_BUFFER"] = { type ="value", },
  ["GL_QUERY_BUFFER_BINDING"] = { type ="value", },
  ["GL_QUERY_RESULT_NO_WAIT"] = { type ="value", },
  ["GL_SAMPLE_LOCATION_ARB"] = { type ="value", },
  ["GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB"] = { type ="value", },
  ["GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB"] = { type ="value", },
  ["GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB"] = { type ="value", },
  ["GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB"] = { type ="value", },
  ["GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB"] = { type ="value", },
  ["GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB"] = { type ="value", },
  ["GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB"] = { type ="value", },
  ["GL_SAMPLER_BINDING"] = { type ="value", },
  ["GL_TEXTURE_CUBE_MAP_SEAMLESS"] = { type ="value", },
  ["GL_VERTEX_SHADER_BIT"] = { type ="value", },
  ["GL_FRAGMENT_SHADER_BIT"] = { type ="value", },
  ["GL_GEOMETRY_SHADER_BIT"] = { type ="value", },
  ["GL_TESS_CONTROL_SHADER_BIT"] = { type ="value", },
  ["GL_TESS_EVALUATION_SHADER_BIT"] = { type ="value", },
  ["GL_PROGRAM_SEPARABLE"] = { type ="value", },
  ["GL_ACTIVE_PROGRAM"] = { type ="value", },
  ["GL_PROGRAM_PIPELINE_BINDING"] = { type ="value", },
  ["GL_ALL_SHADER_BITS"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_BINDING"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_START"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_SIZE"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER"] = { type ="value", },
  ["GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS"] = { type ="value", },
  ["GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS"] = { type ="value", },
  ["GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS"] = { type ="value", },
  ["GL_MAX_VERTEX_ATOMIC_COUNTERS"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_ATOMIC_COUNTERS"] = { type ="value", },
  ["GL_MAX_FRAGMENT_ATOMIC_COUNTERS"] = { type ="value", },
  ["GL_MAX_COMBINED_ATOMIC_COUNTERS"] = { type ="value", },
  ["GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE"] = { type ="value", },
  ["GL_ACTIVE_ATOMIC_COUNTER_BUFFERS"] = { type ="value", },
  ["GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX"] = { type ="value", },
  ["GL_UNSIGNED_INT_ATOMIC_COUNTER"] = { type ="value", },
  ["GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT"] = { type ="value", },
  ["GL_ELEMENT_ARRAY_BARRIER_BIT"] = { type ="value", },
  ["GL_UNIFORM_BARRIER_BIT"] = { type ="value", },
  ["GL_TEXTURE_FETCH_BARRIER_BIT"] = { type ="value", },
  ["GL_SHADER_IMAGE_ACCESS_BARRIER_BIT"] = { type ="value", },
  ["GL_COMMAND_BARRIER_BIT"] = { type ="value", },
  ["GL_PIXEL_BUFFER_BARRIER_BIT"] = { type ="value", },
  ["GL_TEXTURE_UPDATE_BARRIER_BIT"] = { type ="value", },
  ["GL_BUFFER_UPDATE_BARRIER_BIT"] = { type ="value", },
  ["GL_FRAMEBUFFER_BARRIER_BIT"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BARRIER_BIT"] = { type ="value", },
  ["GL_ATOMIC_COUNTER_BARRIER_BIT"] = { type ="value", },
  ["GL_MAX_IMAGE_UNITS"] = { type ="value", },
  ["GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS"] = { type ="value", },
  ["GL_IMAGE_BINDING_NAME"] = { type ="value", },
  ["GL_IMAGE_BINDING_LEVEL"] = { type ="value", },
  ["GL_IMAGE_BINDING_LAYERED"] = { type ="value", },
  ["GL_IMAGE_BINDING_LAYER"] = { type ="value", },
  ["GL_IMAGE_BINDING_ACCESS"] = { type ="value", },
  ["GL_IMAGE_1D"] = { type ="value", },
  ["GL_IMAGE_2D"] = { type ="value", },
  ["GL_IMAGE_3D"] = { type ="value", },
  ["GL_IMAGE_2D_RECT"] = { type ="value", },
  ["GL_IMAGE_CUBE"] = { type ="value", },
  ["GL_IMAGE_BUFFER"] = { type ="value", },
  ["GL_IMAGE_1D_ARRAY"] = { type ="value", },
  ["GL_IMAGE_2D_ARRAY"] = { type ="value", },
  ["GL_IMAGE_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_IMAGE_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_IMAGE_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_INT_IMAGE_1D"] = { type ="value", },
  ["GL_INT_IMAGE_2D"] = { type ="value", },
  ["GL_INT_IMAGE_3D"] = { type ="value", },
  ["GL_INT_IMAGE_2D_RECT"] = { type ="value", },
  ["GL_INT_IMAGE_CUBE"] = { type ="value", },
  ["GL_INT_IMAGE_BUFFER"] = { type ="value", },
  ["GL_INT_IMAGE_1D_ARRAY"] = { type ="value", },
  ["GL_INT_IMAGE_2D_ARRAY"] = { type ="value", },
  ["GL_INT_IMAGE_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_INT_IMAGE_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_1D"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_2D"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_3D"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_2D_RECT"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_CUBE"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_BUFFER"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_1D_ARRAY"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_2D_ARRAY"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_MAX_IMAGE_SAMPLES"] = { type ="value", },
  ["GL_IMAGE_BINDING_FORMAT"] = { type ="value", },
  ["GL_IMAGE_FORMAT_COMPATIBILITY_TYPE"] = { type ="value", },
  ["GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE"] = { type ="value", },
  ["GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS"] = { type ="value", },
  ["GL_MAX_VERTEX_IMAGE_UNIFORMS"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_IMAGE_UNIFORMS"] = { type ="value", },
  ["GL_MAX_FRAGMENT_IMAGE_UNIFORMS"] = { type ="value", },
  ["GL_MAX_COMBINED_IMAGE_UNIFORMS"] = { type ="value", },
  ["GL_ALL_BARRIER_BITS"] = { type ="value", },
  ["GL_PROGRAM_OBJECT_ARB"] = { type ="value", },
  ["GL_SHADER_OBJECT_ARB"] = { type ="value", },
  ["GL_OBJECT_SUBTYPE_ARB"] = { type ="value", },
  ["GL_OBJECT_DELETE_STATUS_ARB"] = { type ="value", },
  ["GL_OBJECT_COMPILE_STATUS_ARB"] = { type ="value", },
  ["GL_OBJECT_LINK_STATUS_ARB"] = { type ="value", },
  ["GL_OBJECT_VALIDATE_STATUS_ARB"] = { type ="value", },
  ["GL_OBJECT_INFO_LOG_LENGTH_ARB"] = { type ="value", },
  ["GL_OBJECT_ATTACHED_OBJECTS_ARB"] = { type ="value", },
  ["GL_OBJECT_ACTIVE_UNIFORMS_ARB"] = { type ="value", },
  ["GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB"] = { type ="value", },
  ["GL_OBJECT_SHADER_SOURCE_LENGTH_ARB"] = { type ="value", },
  ["GL_SHADER_STORAGE_BARRIER_BIT"] = { type ="value", },
  ["GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES"] = { type ="value", },
  ["GL_SHADER_STORAGE_BUFFER"] = { type ="value", },
  ["GL_SHADER_STORAGE_BUFFER_BINDING"] = { type ="value", },
  ["GL_SHADER_STORAGE_BUFFER_START"] = { type ="value", },
  ["GL_SHADER_STORAGE_BUFFER_SIZE"] = { type ="value", },
  ["GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS"] = { type ="value", },
  ["GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS"] = { type ="value", },
  ["GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS"] = { type ="value", },
  ["GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS"] = { type ="value", },
  ["GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS"] = { type ="value", },
  ["GL_MAX_SHADER_STORAGE_BLOCK_SIZE"] = { type ="value", },
  ["GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT"] = { type ="value", },
  ["GL_ACTIVE_SUBROUTINES"] = { type ="value", },
  ["GL_ACTIVE_SUBROUTINE_UNIFORMS"] = { type ="value", },
  ["GL_MAX_SUBROUTINES"] = { type ="value", },
  ["GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS"] = { type ="value", },
  ["GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS"] = { type ="value", },
  ["GL_ACTIVE_SUBROUTINE_MAX_LENGTH"] = { type ="value", },
  ["GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH"] = { type ="value", },
  ["GL_NUM_COMPATIBLE_SUBROUTINES"] = { type ="value", },
  ["GL_COMPATIBLE_SUBROUTINES"] = { type ="value", },
  ["GL_SHADER_INCLUDE_ARB"] = { type ="value", },
  ["GL_NAMED_STRING_LENGTH_ARB"] = { type ="value", },
  ["GL_NAMED_STRING_TYPE_ARB"] = { type ="value", },
  ["GL_TEXTURE_COMPARE_FAIL_VALUE_ARB"] = { type ="value", },
  ["GL_SPARSE_STORAGE_BIT_ARB"] = { type ="value", },
  ["GL_SPARSE_BUFFER_PAGE_SIZE_ARB"] = { type ="value", },
  ["GL_VIRTUAL_PAGE_SIZE_X_ARB"] = { type ="value", },
  ["GL_VIRTUAL_PAGE_SIZE_Y_ARB"] = { type ="value", },
  ["GL_VIRTUAL_PAGE_SIZE_Z_ARB"] = { type ="value", },
  ["GL_MAX_SPARSE_TEXTURE_SIZE_ARB"] = { type ="value", },
  ["GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB"] = { type ="value", },
  ["GL_TEXTURE_SPARSE_ARB"] = { type ="value", },
  ["GL_VIRTUAL_PAGE_SIZE_INDEX_ARB"] = { type ="value", },
  ["GL_NUM_VIRTUAL_PAGE_SIZES_ARB"] = { type ="value", },
  ["GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB"] = { type ="value", },
  ["GL_NUM_SPARSE_LEVELS_ARB"] = { type ="value", },
  ["GL_DEPTH_STENCIL_TEXTURE_MODE"] = { type ="value", },
  ["GL_SYNC_FLUSH_COMMANDS_BIT"] = { type ="value", },
  ["GL_MAX_SERVER_WAIT_TIMEOUT"] = { type ="value", },
  ["GL_OBJECT_TYPE"] = { type ="value", },
  ["GL_SYNC_CONDITION"] = { type ="value", },
  ["GL_SYNC_STATUS"] = { type ="value", },
  ["GL_SYNC_FLAGS"] = { type ="value", },
  ["GL_SYNC_FENCE"] = { type ="value", },
  ["GL_SYNC_GPU_COMMANDS_COMPLETE"] = { type ="value", },
  ["GL_UNSIGNALED"] = { type ="value", },
  ["GL_SIGNALED"] = { type ="value", },
  ["GL_ALREADY_SIGNALED"] = { type ="value", },
  ["GL_TIMEOUT_EXPIRED"] = { type ="value", },
  ["GL_CONDITION_SATISFIED"] = { type ="value", },
  ["GL_WAIT_FAILED"] = { type ="value", },
  ["GL_PATCHES"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_INPUT_COMPONENTS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS"] = { type ="value", },
  ["GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_PATCH_VERTICES"] = { type ="value", },
  ["GL_PATCH_DEFAULT_INNER_LEVEL"] = { type ="value", },
  ["GL_PATCH_DEFAULT_OUTER_LEVEL"] = { type ="value", },
  ["GL_TESS_CONTROL_OUTPUT_VERTICES"] = { type ="value", },
  ["GL_TESS_GEN_MODE"] = { type ="value", },
  ["GL_TESS_GEN_SPACING"] = { type ="value", },
  ["GL_TESS_GEN_VERTEX_ORDER"] = { type ="value", },
  ["GL_TESS_GEN_POINT_MODE"] = { type ="value", },
  ["GL_ISOLINES"] = { type ="value", },
  ["GL_FRACTIONAL_ODD"] = { type ="value", },
  ["GL_FRACTIONAL_EVEN"] = { type ="value", },
  ["GL_MAX_PATCH_VERTICES"] = { type ="value", },
  ["GL_MAX_TESS_GEN_LEVEL"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS"] = { type ="value", },
  ["GL_MAX_TESS_PATCH_COMPONENTS"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS"] = { type ="value", },
  ["GL_TESS_EVALUATION_SHADER"] = { type ="value", },
  ["GL_TESS_CONTROL_SHADER"] = { type ="value", },
  ["GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS"] = { type ="value", },
  ["GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS"] = { type ="value", },
  ["GL_TEXTURE_BUFFER_OFFSET"] = { type ="value", },
  ["GL_TEXTURE_BUFFER_SIZE"] = { type ="value", },
  ["GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT"] = { type ="value", },
  ["GL_COMPRESSED_RED_RGTC1"] = { type ="value", },
  ["GL_COMPRESSED_SIGNED_RED_RGTC1"] = { type ="value", },
  ["GL_COMPRESSED_RG_RGTC2"] = { type ="value", },
  ["GL_COMPRESSED_SIGNED_RG_RGTC2"] = { type ="value", },
  ["GL_TEXTURE_REDUCTION_MODE_ARB"] = { type ="value", },
  ["GL_WEIGHTED_AVERAGE_ARB"] = { type ="value", },
  ["GL_ALPHA32F_ARB"] = { type ="value", },
  ["GL_INTENSITY32F_ARB"] = { type ="value", },
  ["GL_LUMINANCE32F_ARB"] = { type ="value", },
  ["GL_LUMINANCE_ALPHA32F_ARB"] = { type ="value", },
  ["GL_ALPHA16F_ARB"] = { type ="value", },
  ["GL_INTENSITY16F_ARB"] = { type ="value", },
  ["GL_LUMINANCE16F_ARB"] = { type ="value", },
  ["GL_LUMINANCE_ALPHA16F_ARB"] = { type ="value", },
  ["GL_MIRROR_CLAMP_TO_EDGE"] = { type ="value", },
  ["GL_SAMPLE_POSITION"] = { type ="value", },
  ["GL_SAMPLE_MASK"] = { type ="value", },
  ["GL_SAMPLE_MASK_VALUE"] = { type ="value", },
  ["GL_MAX_SAMPLE_MASK_WORDS"] = { type ="value", },
  ["GL_TEXTURE_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_PROXY_TEXTURE_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_TEXTURE_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_TEXTURE_BINDING_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_TEXTURE_SAMPLES"] = { type ="value", },
  ["GL_TEXTURE_FIXED_SAMPLE_LOCATIONS"] = { type ="value", },
  ["GL_SAMPLER_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_INT_SAMPLER_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE"] = { type ="value", },
  ["GL_SAMPLER_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"] = { type ="value", },
  ["GL_MAX_COLOR_TEXTURE_SAMPLES"] = { type ="value", },
  ["GL_MAX_DEPTH_TEXTURE_SAMPLES"] = { type ="value", },
  ["GL_MAX_INTEGER_SAMPLES"] = { type ="value", },
  ["GL_COMPRESSED_RED"] = { type ="value", },
  ["GL_COMPRESSED_RG"] = { type ="value", },
  ["GL_RG"] = { type ="value", },
  ["GL_RG_INTEGER"] = { type ="value", },
  ["GL_R8"] = { type ="value", },
  ["GL_R16"] = { type ="value", },
  ["GL_RG8"] = { type ="value", },
  ["GL_RG16"] = { type ="value", },
  ["GL_R16F"] = { type ="value", },
  ["GL_R32F"] = { type ="value", },
  ["GL_RG16F"] = { type ="value", },
  ["GL_RG32F"] = { type ="value", },
  ["GL_R8I"] = { type ="value", },
  ["GL_R8UI"] = { type ="value", },
  ["GL_R16I"] = { type ="value", },
  ["GL_R16UI"] = { type ="value", },
  ["GL_R32I"] = { type ="value", },
  ["GL_R32UI"] = { type ="value", },
  ["GL_RG8I"] = { type ="value", },
  ["GL_RG16I"] = { type ="value", },
  ["GL_RG32I"] = { type ="value", },
  ["GL_RG32UI"] = { type ="value", },
  ["GL_TEXTURE_IMMUTABLE_FORMAT"] = { type ="value", },
  ["GL_TEXTURE_SWIZZLE_R"] = { type ="value", },
  ["GL_TEXTURE_SWIZZLE_G"] = { type ="value", },
  ["GL_TEXTURE_SWIZZLE_B"] = { type ="value", },
  ["GL_TEXTURE_SWIZZLE_A"] = { type ="value", },
  ["GL_TEXTURE_SWIZZLE_RGBA"] = { type ="value", },
  ["GL_TEXTURE_VIEW_MIN_LEVEL"] = { type ="value", },
  ["GL_TEXTURE_VIEW_NUM_LEVELS"] = { type ="value", },
  ["GL_TEXTURE_VIEW_MIN_LAYER"] = { type ="value", },
  ["GL_TEXTURE_VIEW_NUM_LAYERS"] = { type ="value", },
  ["GL_TIME_ELAPSED"] = { type ="value", },
  ["GL_TIMESTAMP"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_BINDING"] = { type ="value", },
  ["GL_MAX_TRANSFORM_FEEDBACK_BUFFERS"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB"] = { type ="value", },
  ["GL_UNIFORM_BUFFER"] = { type ="value", },
  ["GL_UNIFORM_BUFFER_BINDING"] = { type ="value", },
  ["GL_UNIFORM_BUFFER_START"] = { type ="value", },
  ["GL_UNIFORM_BUFFER_SIZE"] = { type ="value", },
  ["GL_MAX_VERTEX_UNIFORM_BLOCKS"] = { type ="value", },
  ["GL_MAX_GEOMETRY_UNIFORM_BLOCKS"] = { type ="value", },
  ["GL_MAX_FRAGMENT_UNIFORM_BLOCKS"] = { type ="value", },
  ["GL_MAX_COMBINED_UNIFORM_BLOCKS"] = { type ="value", },
  ["GL_MAX_UNIFORM_BUFFER_BINDINGS"] = { type ="value", },
  ["GL_MAX_UNIFORM_BLOCK_SIZE"] = { type ="value", },
  ["GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"] = { type ="value", },
  ["GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT"] = { type ="value", },
  ["GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH"] = { type ="value", },
  ["GL_ACTIVE_UNIFORM_BLOCKS"] = { type ="value", },
  ["GL_UNIFORM_TYPE"] = { type ="value", },
  ["GL_UNIFORM_SIZE"] = { type ="value", },
  ["GL_UNIFORM_NAME_LENGTH"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_INDEX"] = { type ="value", },
  ["GL_UNIFORM_OFFSET"] = { type ="value", },
  ["GL_UNIFORM_ARRAY_STRIDE"] = { type ="value", },
  ["GL_UNIFORM_MATRIX_STRIDE"] = { type ="value", },
  ["GL_UNIFORM_IS_ROW_MAJOR"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_BINDING"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_DATA_SIZE"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_NAME_LENGTH"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER"] = { type ="value", },
  ["GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"] = { type ="value", },
  ["GL_INVALID_INDEX"] = { type ="value", },
  ["GL_VERTEX_ARRAY_BINDING"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_BINDING"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_RELATIVE_OFFSET"] = { type ="value", },
  ["GL_VERTEX_BINDING_DIVISOR"] = { type ="value", },
  ["GL_VERTEX_BINDING_OFFSET"] = { type ="value", },
  ["GL_VERTEX_BINDING_STRIDE"] = { type ="value", },
  ["GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET"] = { type ="value", },
  ["GL_MAX_VERTEX_ATTRIB_BINDINGS"] = { type ="value", },
  ["GL_VERTEX_BINDING_BUFFER"] = { type ="value", },
  ["GL_MODELVIEW0_ARB"] = { type ="value", },
  ["GL_MODELVIEW1_ARB"] = { type ="value", },
  ["GL_MAX_VERTEX_UNITS_ARB"] = { type ="value", },
  ["GL_ACTIVE_VERTEX_UNITS_ARB"] = { type ="value", },
  ["GL_WEIGHT_SUM_UNITY_ARB"] = { type ="value", },
  ["GL_VERTEX_BLEND_ARB"] = { type ="value", },
  ["GL_CURRENT_WEIGHT_ARB"] = { type ="value", },
  ["GL_WEIGHT_ARRAY_TYPE_ARB"] = { type ="value", },
  ["GL_WEIGHT_ARRAY_STRIDE_ARB"] = { type ="value", },
  ["GL_WEIGHT_ARRAY_SIZE_ARB"] = { type ="value", },
  ["GL_WEIGHT_ARRAY_POINTER_ARB"] = { type ="value", },
  ["GL_WEIGHT_ARRAY_ARB"] = { type ="value", },
  ["GL_MODELVIEW2_ARB"] = { type ="value", },
  ["GL_MODELVIEW3_ARB"] = { type ="value", },
  ["GL_MODELVIEW4_ARB"] = { type ="value", },
  ["GL_MODELVIEW5_ARB"] = { type ="value", },
  ["GL_MODELVIEW6_ARB"] = { type ="value", },
  ["GL_MODELVIEW7_ARB"] = { type ="value", },
  ["GL_MODELVIEW8_ARB"] = { type ="value", },
  ["GL_MODELVIEW9_ARB"] = { type ="value", },
  ["GL_MODELVIEW10_ARB"] = { type ="value", },
  ["GL_MODELVIEW11_ARB"] = { type ="value", },
  ["GL_MODELVIEW12_ARB"] = { type ="value", },
  ["GL_MODELVIEW13_ARB"] = { type ="value", },
  ["GL_MODELVIEW14_ARB"] = { type ="value", },
  ["GL_MODELVIEW15_ARB"] = { type ="value", },
  ["GL_MODELVIEW16_ARB"] = { type ="value", },
  ["GL_MODELVIEW17_ARB"] = { type ="value", },
  ["GL_MODELVIEW18_ARB"] = { type ="value", },
  ["GL_MODELVIEW19_ARB"] = { type ="value", },
  ["GL_MODELVIEW20_ARB"] = { type ="value", },
  ["GL_MODELVIEW21_ARB"] = { type ="value", },
  ["GL_MODELVIEW22_ARB"] = { type ="value", },
  ["GL_MODELVIEW23_ARB"] = { type ="value", },
  ["GL_MODELVIEW24_ARB"] = { type ="value", },
  ["GL_MODELVIEW25_ARB"] = { type ="value", },
  ["GL_MODELVIEW26_ARB"] = { type ="value", },
  ["GL_MODELVIEW27_ARB"] = { type ="value", },
  ["GL_MODELVIEW28_ARB"] = { type ="value", },
  ["GL_MODELVIEW29_ARB"] = { type ="value", },
  ["GL_MODELVIEW30_ARB"] = { type ="value", },
  ["GL_MODELVIEW31_ARB"] = { type ="value", },
  ["GL_VERTEX_PROGRAM_ARB"] = { type ="value", },
  ["GL_PROGRAM_LENGTH_ARB"] = { type ="value", },
  ["GL_PROGRAM_STRING_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_MATRICES_ARB"] = { type ="value", },
  ["GL_CURRENT_MATRIX_STACK_DEPTH_ARB"] = { type ="value", },
  ["GL_CURRENT_MATRIX_ARB"] = { type ="value", },
  ["GL_PROGRAM_ERROR_POSITION_ARB"] = { type ="value", },
  ["GL_PROGRAM_BINDING_ARB"] = { type ="value", },
  ["GL_PROGRAM_ERROR_STRING_ARB"] = { type ="value", },
  ["GL_PROGRAM_FORMAT_ASCII_ARB"] = { type ="value", },
  ["GL_PROGRAM_FORMAT_ARB"] = { type ="value", },
  ["GL_PROGRAM_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB"] = { type ="value", },
  ["GL_PROGRAM_TEMPORARIES_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_TEMPORARIES_ARB"] = { type ="value", },
  ["GL_PROGRAM_NATIVE_TEMPORARIES_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB"] = { type ="value", },
  ["GL_PROGRAM_PARAMETERS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_PARAMETERS_ARB"] = { type ="value", },
  ["GL_PROGRAM_NATIVE_PARAMETERS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB"] = { type ="value", },
  ["GL_PROGRAM_ATTRIBS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_ATTRIBS_ARB"] = { type ="value", },
  ["GL_PROGRAM_NATIVE_ATTRIBS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB"] = { type ="value", },
  ["GL_PROGRAM_ADDRESS_REGISTERS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB"] = { type ="value", },
  ["GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB"] = { type ="value", },
  ["GL_MAX_PROGRAM_ENV_PARAMETERS_ARB"] = { type ="value", },
  ["GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB"] = { type ="value", },
  ["GL_TRANSPOSE_CURRENT_MATRIX_ARB"] = { type ="value", },
  ["GL_MATRIX0_ARB"] = { type ="value", },
  ["GL_MATRIX1_ARB"] = { type ="value", },
  ["GL_MATRIX2_ARB"] = { type ="value", },
  ["GL_MATRIX3_ARB"] = { type ="value", },
  ["GL_MATRIX4_ARB"] = { type ="value", },
  ["GL_MATRIX5_ARB"] = { type ="value", },
  ["GL_MATRIX6_ARB"] = { type ="value", },
  ["GL_MATRIX7_ARB"] = { type ="value", },
  ["GL_MATRIX8_ARB"] = { type ="value", },
  ["GL_MATRIX9_ARB"] = { type ="value", },
  ["GL_MATRIX10_ARB"] = { type ="value", },
  ["GL_MATRIX11_ARB"] = { type ="value", },
  ["GL_MATRIX12_ARB"] = { type ="value", },
  ["GL_MATRIX13_ARB"] = { type ="value", },
  ["GL_MATRIX14_ARB"] = { type ="value", },
  ["GL_MATRIX15_ARB"] = { type ="value", },
  ["GL_MATRIX16_ARB"] = { type ="value", },
  ["GL_MATRIX17_ARB"] = { type ="value", },
  ["GL_MATRIX18_ARB"] = { type ="value", },
  ["GL_MATRIX19_ARB"] = { type ="value", },
  ["GL_MATRIX20_ARB"] = { type ="value", },
  ["GL_MATRIX21_ARB"] = { type ="value", },
  ["GL_MATRIX22_ARB"] = { type ="value", },
  ["GL_MATRIX23_ARB"] = { type ="value", },
  ["GL_MATRIX24_ARB"] = { type ="value", },
  ["GL_MATRIX25_ARB"] = { type ="value", },
  ["GL_MATRIX26_ARB"] = { type ="value", },
  ["GL_MATRIX27_ARB"] = { type ="value", },
  ["GL_MATRIX28_ARB"] = { type ="value", },
  ["GL_MATRIX29_ARB"] = { type ="value", },
  ["GL_MATRIX30_ARB"] = { type ="value", },
  ["GL_MATRIX31_ARB"] = { type ="value", },
  ["GL_OBJECT_ACTIVE_ATTRIBUTES_ARB"] = { type ="value", },
  ["GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB"] = { type ="value", },
  ["GL_UNSIGNED_INT_2_10_10_10_REV"] = { type ="value", },
  ["GL_INT_2_10_10_10_REV"] = { type ="value", },
  ["GL_MAX_VIEWPORTS"] = { type ="value", },
  ["GL_VIEWPORT_SUBPIXEL_BITS"] = { type ="value", },
  ["GL_VIEWPORT_BOUNDS_RANGE"] = { type ="value", },
  ["GL_LAYER_PROVOKING_VERTEX"] = { type ="value", },
  ["GL_VIEWPORT_INDEX_PROVOKING_VERTEX"] = { type ="value", },
  ["GL_UNDEFINED_VERTEX"] = { type ="value", },
  ["GL_PROGRAM_MATRIX_EXT"] = { type ="value", },
  ["GL_TRANSPOSE_PROGRAM_MATRIX_EXT"] = { type ="value", },
  ["GL_PROGRAM_MATRIX_STACK_DEPTH_EXT"] = { type ="value", },
  ["GL_BLEND_ADVANCED_COHERENT_KHR"] = { type ="value", },
  ["GL_MULTIPLY_KHR"] = { type ="value", },
  ["GL_SCREEN_KHR"] = { type ="value", },
  ["GL_OVERLAY_KHR"] = { type ="value", },
  ["GL_DARKEN_KHR"] = { type ="value", },
  ["GL_LIGHTEN_KHR"] = { type ="value", },
  ["GL_COLORDODGE_KHR"] = { type ="value", },
  ["GL_COLORBURN_KHR"] = { type ="value", },
  ["GL_HARDLIGHT_KHR"] = { type ="value", },
  ["GL_SOFTLIGHT_KHR"] = { type ="value", },
  ["GL_DIFFERENCE_KHR"] = { type ="value", },
  ["GL_EXCLUSION_KHR"] = { type ="value", },
  ["GL_HSL_HUE_KHR"] = { type ="value", },
  ["GL_HSL_SATURATION_KHR"] = { type ="value", },
  ["GL_HSL_COLOR_KHR"] = { type ="value", },
  ["GL_HSL_LUMINOSITY_KHR"] = { type ="value", },
  ["GL_CONTEXT_RELEASE_BEHAVIOR"] = { type ="value", },
  ["GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH"] = { type ="value", },
  ["GL_CONTEXT_FLAG_DEBUG_BIT"] = { type ="value", },
  ["GL_DEBUG_OUTPUT_SYNCHRONOUS"] = { type ="value", },
  ["GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH"] = { type ="value", },
  ["GL_DEBUG_CALLBACK_FUNCTION"] = { type ="value", },
  ["GL_DEBUG_CALLBACK_USER_PARAM"] = { type ="value", },
  ["GL_DEBUG_SOURCE_API"] = { type ="value", },
  ["GL_DEBUG_SOURCE_WINDOW_SYSTEM"] = { type ="value", },
  ["GL_DEBUG_SOURCE_SHADER_COMPILER"] = { type ="value", },
  ["GL_DEBUG_SOURCE_THIRD_PARTY"] = { type ="value", },
  ["GL_DEBUG_SOURCE_APPLICATION"] = { type ="value", },
  ["GL_DEBUG_SOURCE_OTHER"] = { type ="value", },
  ["GL_DEBUG_TYPE_ERROR"] = { type ="value", },
  ["GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR"] = { type ="value", },
  ["GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR"] = { type ="value", },
  ["GL_DEBUG_TYPE_PORTABILITY"] = { type ="value", },
  ["GL_DEBUG_TYPE_PERFORMANCE"] = { type ="value", },
  ["GL_DEBUG_TYPE_OTHER"] = { type ="value", },
  ["GL_DEBUG_TYPE_MARKER"] = { type ="value", },
  ["GL_DEBUG_TYPE_PUSH_GROUP"] = { type ="value", },
  ["GL_DEBUG_TYPE_POP_GROUP"] = { type ="value", },
  ["GL_DEBUG_SEVERITY_NOTIFICATION"] = { type ="value", },
  ["GL_MAX_DEBUG_GROUP_STACK_DEPTH"] = { type ="value", },
  ["GL_DEBUG_GROUP_STACK_DEPTH"] = { type ="value", },
  ["GL_BUFFER"] = { type ="value", },
  ["GL_SHADER"] = { type ="value", },
  ["GL_PROGRAM"] = { type ="value", },
  ["GL_QUERY"] = { type ="value", },
  ["GL_PROGRAM_PIPELINE"] = { type ="value", },
  ["GL_SAMPLER"] = { type ="value", },
  ["GL_DISPLAY_LIST"] = { type ="value", },
  ["GL_MAX_LABEL_LENGTH"] = { type ="value", },
  ["GL_MAX_DEBUG_MESSAGE_LENGTH"] = { type ="value", },
  ["GL_MAX_DEBUG_LOGGED_MESSAGES"] = { type ="value", },
  ["GL_DEBUG_LOGGED_MESSAGES"] = { type ="value", },
  ["GL_DEBUG_SEVERITY_HIGH"] = { type ="value", },
  ["GL_DEBUG_SEVERITY_MEDIUM"] = { type ="value", },
  ["GL_DEBUG_SEVERITY_LOW"] = { type ="value", },
  ["GL_DEBUG_OUTPUT"] = { type ="value", },
  ["GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR"] = { type ="value", },
  ["GL_CONTEXT_LOST"] = { type ="value", },
  ["GL_LOSE_CONTEXT_ON_RESET"] = { type ="value", },
  ["GL_GUILTY_CONTEXT_RESET"] = { type ="value", },
  ["GL_INNOCENT_CONTEXT_RESET"] = { type ="value", },
  ["GL_UNKNOWN_CONTEXT_RESET"] = { type ="value", },
  ["GL_RESET_NOTIFICATION_STRATEGY"] = { type ="value", },
  ["GL_NO_RESET_NOTIFICATION"] = { type ="value", },
  ["GL_CONTEXT_ROBUST_ACCESS"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_4x4_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_5x4_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_5x5_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_6x5_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_6x6_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_8x5_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_8x6_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_8x8_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_10x5_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_10x6_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_10x8_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_10x10_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_12x10_KHR"] = { type ="value", },
  ["GL_COMPRESSED_RGBA_ASTC_12x12_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = { type ="value", },
  ["GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = { type ="value", },
  ["GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX"] = { type ="value", },
  ["GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX"] = { type ="value", },
  ["GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX"] = { type ="value", },
  ["GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX"] = { type ="value", },
  ["GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX"] = { type ="value", },
  ["GL_LGPU_SEPARATE_STORAGE_BIT_NVX"] = { type ="value", },
  ["GL_MAX_LGPU_GPUS_NVX"] = { type ="value", },
  ["GL_BLEND_PREMULTIPLIED_SRC_NV"] = { type ="value", },
  ["GL_BLEND_OVERLAP_NV"] = { type ="value", },
  ["GL_UNCORRELATED_NV"] = { type ="value", },
  ["GL_DISJOINT_NV"] = { type ="value", },
  ["GL_CONJOINT_NV"] = { type ="value", },
  ["GL_BLEND_ADVANCED_COHERENT_NV"] = { type ="value", },
  ["GL_SRC_NV"] = { type ="value", },
  ["GL_DST_NV"] = { type ="value", },
  ["GL_SRC_OVER_NV"] = { type ="value", },
  ["GL_DST_OVER_NV"] = { type ="value", },
  ["GL_SRC_IN_NV"] = { type ="value", },
  ["GL_DST_IN_NV"] = { type ="value", },
  ["GL_SRC_OUT_NV"] = { type ="value", },
  ["GL_DST_OUT_NV"] = { type ="value", },
  ["GL_SRC_ATOP_NV"] = { type ="value", },
  ["GL_DST_ATOP_NV"] = { type ="value", },
  ["GL_PLUS_NV"] = { type ="value", },
  ["GL_PLUS_DARKER_NV"] = { type ="value", },
  ["GL_MULTIPLY_NV"] = { type ="value", },
  ["GL_SCREEN_NV"] = { type ="value", },
  ["GL_OVERLAY_NV"] = { type ="value", },
  ["GL_DARKEN_NV"] = { type ="value", },
  ["GL_LIGHTEN_NV"] = { type ="value", },
  ["GL_COLORDODGE_NV"] = { type ="value", },
  ["GL_COLORBURN_NV"] = { type ="value", },
  ["GL_HARDLIGHT_NV"] = { type ="value", },
  ["GL_SOFTLIGHT_NV"] = { type ="value", },
  ["GL_DIFFERENCE_NV"] = { type ="value", },
  ["GL_MINUS_NV"] = { type ="value", },
  ["GL_EXCLUSION_NV"] = { type ="value", },
  ["GL_CONTRAST_NV"] = { type ="value", },
  ["GL_INVERT_RGB_NV"] = { type ="value", },
  ["GL_LINEARDODGE_NV"] = { type ="value", },
  ["GL_LINEARBURN_NV"] = { type ="value", },
  ["GL_VIVIDLIGHT_NV"] = { type ="value", },
  ["GL_LINEARLIGHT_NV"] = { type ="value", },
  ["GL_PINLIGHT_NV"] = { type ="value", },
  ["GL_HARDMIX_NV"] = { type ="value", },
  ["GL_HSL_HUE_NV"] = { type ="value", },
  ["GL_HSL_SATURATION_NV"] = { type ="value", },
  ["GL_HSL_COLOR_NV"] = { type ="value", },
  ["GL_HSL_LUMINOSITY_NV"] = { type ="value", },
  ["GL_PLUS_CLAMPED_NV"] = { type ="value", },
  ["GL_PLUS_CLAMPED_ALPHA_NV"] = { type ="value", },
  ["GL_MINUS_CLAMPED_NV"] = { type ="value", },
  ["GL_INVERT_OVG_NV"] = { type ="value", },
  ["GL_VIEWPORT_POSITION_W_SCALE_NV"] = { type ="value", },
  ["GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV"] = { type ="value", },
  ["GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV"] = { type ="value", },
  ["GL_TERMINATE_SEQUENCE_COMMAND_NV"] = { type ="value", },
  ["GL_NOP_COMMAND_NV"] = { type ="value", },
  ["GL_DRAW_ELEMENTS_COMMAND_NV"] = { type ="value", },
  ["GL_DRAW_ARRAYS_COMMAND_NV"] = { type ="value", },
  ["GL_DRAW_ELEMENTS_STRIP_COMMAND_NV"] = { type ="value", },
  ["GL_DRAW_ARRAYS_STRIP_COMMAND_NV"] = { type ="value", },
  ["GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV"] = { type ="value", },
  ["GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV"] = { type ="value", },
  ["GL_ELEMENT_ADDRESS_COMMAND_NV"] = { type ="value", },
  ["GL_ATTRIBUTE_ADDRESS_COMMAND_NV"] = { type ="value", },
  ["GL_UNIFORM_ADDRESS_COMMAND_NV"] = { type ="value", },
  ["GL_BLEND_COLOR_COMMAND_NV"] = { type ="value", },
  ["GL_STENCIL_REF_COMMAND_NV"] = { type ="value", },
  ["GL_LINE_WIDTH_COMMAND_NV"] = { type ="value", },
  ["GL_POLYGON_OFFSET_COMMAND_NV"] = { type ="value", },
  ["GL_ALPHA_REF_COMMAND_NV"] = { type ="value", },
  ["GL_VIEWPORT_COMMAND_NV"] = { type ="value", },
  ["GL_SCISSOR_COMMAND_NV"] = { type ="value", },
  ["GL_FRONT_FACE_COMMAND_NV"] = { type ="value", },
  ["GL_COMPUTE_PROGRAM_NV"] = { type ="value", },
  ["GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV"] = { type ="value", },
  ["GL_CONSERVATIVE_RASTERIZATION_NV"] = { type ="value", },
  ["GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV"] = { type ="value", },
  ["GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV"] = { type ="value", },
  ["GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV"] = { type ="value", },
  ["GL_CONSERVATIVE_RASTER_DILATE_NV"] = { type ="value", },
  ["GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV"] = { type ="value", },
  ["GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV"] = { type ="value", },
  ["GL_CONSERVATIVE_RASTER_MODE_NV"] = { type ="value", },
  ["GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV"] = { type ="value", },
  ["GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV"] = { type ="value", },
  ["GL_DEPTH_STENCIL_TO_RGBA_NV"] = { type ="value", },
  ["GL_DEPTH_STENCIL_TO_BGRA_NV"] = { type ="value", },
  ["GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV"] = { type ="value", },
  ["GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV"] = { type ="value", },
  ["GL_DEPTH_BUFFER_FLOAT_MODE_NV"] = { type ="value", },
  ["GL_SAMPLE_COUNT_BITS_NV"] = { type ="value", },
  ["GL_CURRENT_SAMPLE_COUNT_QUERY_NV"] = { type ="value", },
  ["GL_SAMPLE_COUNT_NV"] = { type ="value", },
  ["GL_EVAL_2D_NV"] = { type ="value", },
  ["GL_EVAL_TRIANGULAR_2D_NV"] = { type ="value", },
  ["GL_MAP_TESSELLATION_NV"] = { type ="value", },
  ["GL_MAP_ATTRIB_U_ORDER_NV"] = { type ="value", },
  ["GL_MAP_ATTRIB_V_ORDER_NV"] = { type ="value", },
  ["GL_EVAL_FRACTIONAL_TESSELLATION_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB0_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB1_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB2_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB3_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB4_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB5_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB6_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB7_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB8_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB9_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB10_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB11_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB12_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB13_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB14_NV"] = { type ="value", },
  ["GL_EVAL_VERTEX_ATTRIB15_NV"] = { type ="value", },
  ["GL_MAX_MAP_TESSELLATION_NV"] = { type ="value", },
  ["GL_MAX_RATIONAL_EVAL_ORDER_NV"] = { type ="value", },
  ["GL_TEXTURE_BINDING_RENDERBUFFER_NV"] = { type ="value", },
  ["GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV"] = { type ="value", },
  ["GL_TEXTURE_RENDERBUFFER_NV"] = { type ="value", },
  ["GL_SAMPLER_RENDERBUFFER_NV"] = { type ="value", },
  ["GL_INT_SAMPLER_RENDERBUFFER_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV"] = { type ="value", },
  ["GL_ALL_COMPLETED_NV"] = { type ="value", },
  ["GL_FENCE_STATUS_NV"] = { type ="value", },
  ["GL_FENCE_CONDITION_NV"] = { type ="value", },
  ["GL_FILL_RECTANGLE_NV"] = { type ="value", },
  ["GL_FLOAT_R_NV"] = { type ="value", },
  ["GL_FLOAT_RG_NV"] = { type ="value", },
  ["GL_FLOAT_RGB_NV"] = { type ="value", },
  ["GL_FLOAT_RGBA_NV"] = { type ="value", },
  ["GL_FLOAT_R16_NV"] = { type ="value", },
  ["GL_FLOAT_R32_NV"] = { type ="value", },
  ["GL_FLOAT_RG16_NV"] = { type ="value", },
  ["GL_FLOAT_RG32_NV"] = { type ="value", },
  ["GL_FLOAT_RGB16_NV"] = { type ="value", },
  ["GL_FLOAT_RGB32_NV"] = { type ="value", },
  ["GL_FLOAT_RGBA16_NV"] = { type ="value", },
  ["GL_FLOAT_RGBA32_NV"] = { type ="value", },
  ["GL_TEXTURE_FLOAT_COMPONENTS_NV"] = { type ="value", },
  ["GL_FLOAT_CLEAR_COLOR_VALUE_NV"] = { type ="value", },
  ["GL_FLOAT_RGBA_MODE_NV"] = { type ="value", },
  ["GL_FOG_DISTANCE_MODE_NV"] = { type ="value", },
  ["GL_EYE_RADIAL_NV"] = { type ="value", },
  ["GL_EYE_PLANE_ABSOLUTE_NV"] = { type ="value", },
  ["GL_FRAGMENT_COVERAGE_TO_COLOR_NV"] = { type ="value", },
  ["GL_FRAGMENT_COVERAGE_COLOR_NV"] = { type ="value", },
  ["GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV"] = { type ="value", },
  ["GL_FRAGMENT_PROGRAM_NV"] = { type ="value", },
  ["GL_FRAGMENT_PROGRAM_BINDING_NV"] = { type ="value", },
  ["GL_PROGRAM_ERROR_STRING_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_CALL_DEPTH_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_IF_DEPTH_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_LOOP_DEPTH_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_LOOP_COUNT_NV"] = { type ="value", },
  ["GL_RENDERBUFFER_COVERAGE_SAMPLES_NV"] = { type ="value", },
  ["GL_RENDERBUFFER_COLOR_SAMPLES_NV"] = { type ="value", },
  ["GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV"] = { type ="value", },
  ["GL_MULTISAMPLE_COVERAGE_MODES_NV"] = { type ="value", },
  ["GL_GEOMETRY_PROGRAM_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_OUTPUT_VERTICES_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV"] = { type ="value", },
  ["GL_PER_GPU_STORAGE_BIT_NV"] = { type ="value", },
  ["GL_MULTICAST_GPUS_NV"] = { type ="value", },
  ["GL_PER_GPU_STORAGE_NV"] = { type ="value", },
  ["GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV"] = { type ="value", },
  ["GL_RENDER_GPU_MASK_NV"] = { type ="value", },
  ["GL_PROGRAM_ATTRIB_COMPONENTS_NV"] = { type ="value", },
  ["GL_PROGRAM_RESULT_COMPONENTS_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_RESULT_COMPONENTS_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_GENERIC_RESULTS_NV"] = { type ="value", },
  ["GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV"] = { type ="value", },
  ["GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV"] = { type ="value", },
  ["GL_INT64_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT64_NV"] = { type ="value", },
  ["GL_INT8_NV"] = { type ="value", },
  ["GL_INT8_VEC2_NV"] = { type ="value", },
  ["GL_INT8_VEC3_NV"] = { type ="value", },
  ["GL_INT8_VEC4_NV"] = { type ="value", },
  ["GL_INT16_NV"] = { type ="value", },
  ["GL_INT16_VEC2_NV"] = { type ="value", },
  ["GL_INT16_VEC3_NV"] = { type ="value", },
  ["GL_INT16_VEC4_NV"] = { type ="value", },
  ["GL_INT64_VEC2_NV"] = { type ="value", },
  ["GL_INT64_VEC3_NV"] = { type ="value", },
  ["GL_INT64_VEC4_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT8_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT8_VEC2_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT8_VEC3_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT8_VEC4_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT16_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT16_VEC2_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT16_VEC3_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT16_VEC4_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT64_VEC2_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT64_VEC3_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT64_VEC4_NV"] = { type ="value", },
  ["GL_FLOAT16_NV"] = { type ="value", },
  ["GL_FLOAT16_VEC2_NV"] = { type ="value", },
  ["GL_FLOAT16_VEC3_NV"] = { type ="value", },
  ["GL_FLOAT16_VEC4_NV"] = { type ="value", },
  ["GL_MULTISAMPLES_NV"] = { type ="value", },
  ["GL_SUPERSAMPLE_SCALE_X_NV"] = { type ="value", },
  ["GL_SUPERSAMPLE_SCALE_Y_NV"] = { type ="value", },
  ["GL_CONFORMANT_NV"] = { type ="value", },
  ["GL_MAX_SHININESS_NV"] = { type ="value", },
  ["GL_MAX_SPOT_EXPONENT_NV"] = { type ="value", },
  ["GL_MULTISAMPLE_FILTER_HINT_NV"] = { type ="value", },
  ["GL_PIXEL_COUNTER_BITS_NV"] = { type ="value", },
  ["GL_CURRENT_OCCLUSION_QUERY_ID_NV"] = { type ="value", },
  ["GL_PIXEL_COUNT_NV"] = { type ="value", },
  ["GL_PIXEL_COUNT_AVAILABLE_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV"] = { type ="value", },
  ["GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV"] = { type ="value", },
  ["GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV"] = { type ="value", },
  ["GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV"] = { type ="value", },
  ["GL_CLOSE_PATH_NV"] = { type ="value", },
  ["GL_BOLD_BIT_NV"] = { type ="value", },
  ["GL_GLYPH_WIDTH_BIT_NV"] = { type ="value", },
  ["GL_GLYPH_HEIGHT_BIT_NV"] = { type ="value", },
  ["GL_ITALIC_BIT_NV"] = { type ="value", },
  ["GL_MOVE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_MOVE_TO_NV"] = { type ="value", },
  ["GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV"] = { type ="value", },
  ["GL_LINE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_LINE_TO_NV"] = { type ="value", },
  ["GL_HORIZONTAL_LINE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_HORIZONTAL_LINE_TO_NV"] = { type ="value", },
  ["GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV"] = { type ="value", },
  ["GL_VERTICAL_LINE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_VERTICAL_LINE_TO_NV"] = { type ="value", },
  ["GL_QUADRATIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_QUADRATIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_CUBIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_CUBIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_SMOOTH_QUADRATIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV"] = { type ="value", },
  ["GL_SMOOTH_CUBIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_SMALL_CCW_ARC_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_SMALL_CCW_ARC_TO_NV"] = { type ="value", },
  ["GL_SMALL_CW_ARC_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_SMALL_CW_ARC_TO_NV"] = { type ="value", },
  ["GL_LARGE_CCW_ARC_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_LARGE_CCW_ARC_TO_NV"] = { type ="value", },
  ["GL_LARGE_CW_ARC_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_LARGE_CW_ARC_TO_NV"] = { type ="value", },
  ["GL_CONIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_CONIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_GLYPH_VERTICAL_BEARING_X_BIT_NV"] = { type ="value", },
  ["GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV"] = { type ="value", },
  ["GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV"] = { type ="value", },
  ["GL_ROUNDED_RECT_NV"] = { type ="value", },
  ["GL_RELATIVE_ROUNDED_RECT_NV"] = { type ="value", },
  ["GL_ROUNDED_RECT2_NV"] = { type ="value", },
  ["GL_RELATIVE_ROUNDED_RECT2_NV"] = { type ="value", },
  ["GL_ROUNDED_RECT4_NV"] = { type ="value", },
  ["GL_RELATIVE_ROUNDED_RECT4_NV"] = { type ="value", },
  ["GL_ROUNDED_RECT8_NV"] = { type ="value", },
  ["GL_RELATIVE_ROUNDED_RECT8_NV"] = { type ="value", },
  ["GL_RESTART_PATH_NV"] = { type ="value", },
  ["GL_DUP_FIRST_CUBIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_DUP_LAST_CUBIC_CURVE_TO_NV"] = { type ="value", },
  ["GL_RECT_NV"] = { type ="value", },
  ["GL_RELATIVE_RECT_NV"] = { type ="value", },
  ["GL_CIRCULAR_CCW_ARC_TO_NV"] = { type ="value", },
  ["GL_CIRCULAR_CW_ARC_TO_NV"] = { type ="value", },
  ["GL_CIRCULAR_TANGENT_ARC_TO_NV"] = { type ="value", },
  ["GL_ARC_TO_NV"] = { type ="value", },
  ["GL_RELATIVE_ARC_TO_NV"] = { type ="value", },
  ["GL_GLYPH_HAS_KERNING_BIT_NV"] = { type ="value", },
  ["GL_SECONDARY_COLOR_NV"] = { type ="value", },
  ["GL_PATH_FORMAT_SVG_NV"] = { type ="value", },
  ["GL_PATH_FORMAT_PS_NV"] = { type ="value", },
  ["GL_STANDARD_FONT_NAME_NV"] = { type ="value", },
  ["GL_SYSTEM_FONT_NAME_NV"] = { type ="value", },
  ["GL_FILE_NAME_NV"] = { type ="value", },
  ["GL_PATH_STROKE_WIDTH_NV"] = { type ="value", },
  ["GL_PATH_END_CAPS_NV"] = { type ="value", },
  ["GL_PATH_INITIAL_END_CAP_NV"] = { type ="value", },
  ["GL_PATH_TERMINAL_END_CAP_NV"] = { type ="value", },
  ["GL_PATH_JOIN_STYLE_NV"] = { type ="value", },
  ["GL_PATH_MITER_LIMIT_NV"] = { type ="value", },
  ["GL_PATH_DASH_CAPS_NV"] = { type ="value", },
  ["GL_PATH_INITIAL_DASH_CAP_NV"] = { type ="value", },
  ["GL_PATH_TERMINAL_DASH_CAP_NV"] = { type ="value", },
  ["GL_PATH_DASH_OFFSET_NV"] = { type ="value", },
  ["GL_PATH_CLIENT_LENGTH_NV"] = { type ="value", },
  ["GL_PATH_FILL_MODE_NV"] = { type ="value", },
  ["GL_PATH_FILL_MASK_NV"] = { type ="value", },
  ["GL_PATH_FILL_COVER_MODE_NV"] = { type ="value", },
  ["GL_PATH_STROKE_COVER_MODE_NV"] = { type ="value", },
  ["GL_PATH_STROKE_MASK_NV"] = { type ="value", },
  ["GL_PATH_STROKE_BOUND_NV"] = { type ="value", },
  ["GL_COUNT_UP_NV"] = { type ="value", },
  ["GL_COUNT_DOWN_NV"] = { type ="value", },
  ["GL_PATH_OBJECT_BOUNDING_BOX_NV"] = { type ="value", },
  ["GL_CONVEX_HULL_NV"] = { type ="value", },
  ["GL_BOUNDING_BOX_NV"] = { type ="value", },
  ["GL_TRANSLATE_X_NV"] = { type ="value", },
  ["GL_TRANSLATE_Y_NV"] = { type ="value", },
  ["GL_TRANSLATE_2D_NV"] = { type ="value", },
  ["GL_TRANSLATE_3D_NV"] = { type ="value", },
  ["GL_AFFINE_2D_NV"] = { type ="value", },
  ["GL_AFFINE_3D_NV"] = { type ="value", },
  ["GL_TRANSPOSE_AFFINE_2D_NV"] = { type ="value", },
  ["GL_TRANSPOSE_AFFINE_3D_NV"] = { type ="value", },
  ["GL_UTF8_NV"] = { type ="value", },
  ["GL_UTF16_NV"] = { type ="value", },
  ["GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV"] = { type ="value", },
  ["GL_PATH_COMMAND_COUNT_NV"] = { type ="value", },
  ["GL_PATH_COORD_COUNT_NV"] = { type ="value", },
  ["GL_PATH_DASH_ARRAY_COUNT_NV"] = { type ="value", },
  ["GL_PATH_COMPUTED_LENGTH_NV"] = { type ="value", },
  ["GL_PATH_FILL_BOUNDING_BOX_NV"] = { type ="value", },
  ["GL_PATH_STROKE_BOUNDING_BOX_NV"] = { type ="value", },
  ["GL_SQUARE_NV"] = { type ="value", },
  ["GL_ROUND_NV"] = { type ="value", },
  ["GL_TRIANGULAR_NV"] = { type ="value", },
  ["GL_BEVEL_NV"] = { type ="value", },
  ["GL_MITER_REVERT_NV"] = { type ="value", },
  ["GL_MITER_TRUNCATE_NV"] = { type ="value", },
  ["GL_SKIP_MISSING_GLYPH_NV"] = { type ="value", },
  ["GL_USE_MISSING_GLYPH_NV"] = { type ="value", },
  ["GL_PATH_ERROR_POSITION_NV"] = { type ="value", },
  ["GL_PATH_FOG_GEN_MODE_NV"] = { type ="value", },
  ["GL_ACCUM_ADJACENT_PAIRS_NV"] = { type ="value", },
  ["GL_ADJACENT_PAIRS_NV"] = { type ="value", },
  ["GL_FIRST_TO_REST_NV"] = { type ="value", },
  ["GL_PATH_GEN_MODE_NV"] = { type ="value", },
  ["GL_PATH_GEN_COEFF_NV"] = { type ="value", },
  ["GL_PATH_GEN_COLOR_FORMAT_NV"] = { type ="value", },
  ["GL_PATH_GEN_COMPONENTS_NV"] = { type ="value", },
  ["GL_PATH_DASH_OFFSET_RESET_NV"] = { type ="value", },
  ["GL_MOVE_TO_RESETS_NV"] = { type ="value", },
  ["GL_MOVE_TO_CONTINUES_NV"] = { type ="value", },
  ["GL_PATH_STENCIL_FUNC_NV"] = { type ="value", },
  ["GL_PATH_STENCIL_REF_NV"] = { type ="value", },
  ["GL_PATH_STENCIL_VALUE_MASK_NV"] = { type ="value", },
  ["GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV"] = { type ="value", },
  ["GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV"] = { type ="value", },
  ["GL_PATH_COVER_DEPTH_FUNC_NV"] = { type ="value", },
  ["GL_FONT_GLYPHS_AVAILABLE_NV"] = { type ="value", },
  ["GL_FONT_TARGET_UNAVAILABLE_NV"] = { type ="value", },
  ["GL_FONT_UNAVAILABLE_NV"] = { type ="value", },
  ["GL_FONT_UNINTELLIGIBLE_NV"] = { type ="value", },
  ["GL_STANDARD_FONT_FORMAT_NV"] = { type ="value", },
  ["GL_FRAGMENT_INPUT_NV"] = { type ="value", },
  ["GL_FONT_X_MIN_BOUNDS_BIT_NV"] = { type ="value", },
  ["GL_FONT_Y_MIN_BOUNDS_BIT_NV"] = { type ="value", },
  ["GL_FONT_X_MAX_BOUNDS_BIT_NV"] = { type ="value", },
  ["GL_FONT_Y_MAX_BOUNDS_BIT_NV"] = { type ="value", },
  ["GL_FONT_UNITS_PER_EM_BIT_NV"] = { type ="value", },
  ["GL_FONT_ASCENDER_BIT_NV"] = { type ="value", },
  ["GL_FONT_DESCENDER_BIT_NV"] = { type ="value", },
  ["GL_FONT_HEIGHT_BIT_NV"] = { type ="value", },
  ["GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV"] = { type ="value", },
  ["GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV"] = { type ="value", },
  ["GL_FONT_UNDERLINE_POSITION_BIT_NV"] = { type ="value", },
  ["GL_FONT_UNDERLINE_THICKNESS_BIT_NV"] = { type ="value", },
  ["GL_FONT_HAS_KERNING_BIT_NV"] = { type ="value", },
  ["GL_FONT_NUM_GLYPH_INDICES_BIT_NV"] = { type ="value", },
  ["GL_SHARED_EDGE_NV"] = { type ="value", },
  ["GL_WRITE_PIXEL_DATA_RANGE_NV"] = { type ="value", },
  ["GL_READ_PIXEL_DATA_RANGE_NV"] = { type ="value", },
  ["GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV"] = { type ="value", },
  ["GL_READ_PIXEL_DATA_RANGE_LENGTH_NV"] = { type ="value", },
  ["GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV"] = { type ="value", },
  ["GL_READ_PIXEL_DATA_RANGE_POINTER_NV"] = { type ="value", },
  ["GL_POINT_SPRITE_R_MODE_NV"] = { type ="value", },
  ["GL_FRAME_NV"] = { type ="value", },
  ["GL_FIELDS_NV"] = { type ="value", },
  ["GL_CURRENT_TIME_NV"] = { type ="value", },
  ["GL_NUM_FILL_STREAMS_NV"] = { type ="value", },
  ["GL_PRESENT_TIME_NV"] = { type ="value", },
  ["GL_PRESENT_DURATION_NV"] = { type ="value", },
  ["GL_REGISTER_COMBINERS_NV"] = { type ="value", },
  ["GL_VARIABLE_A_NV"] = { type ="value", },
  ["GL_VARIABLE_B_NV"] = { type ="value", },
  ["GL_VARIABLE_C_NV"] = { type ="value", },
  ["GL_VARIABLE_D_NV"] = { type ="value", },
  ["GL_VARIABLE_E_NV"] = { type ="value", },
  ["GL_VARIABLE_F_NV"] = { type ="value", },
  ["GL_VARIABLE_G_NV"] = { type ="value", },
  ["GL_CONSTANT_COLOR0_NV"] = { type ="value", },
  ["GL_CONSTANT_COLOR1_NV"] = { type ="value", },
  ["GL_SPARE0_NV"] = { type ="value", },
  ["GL_SPARE1_NV"] = { type ="value", },
  ["GL_DISCARD_NV"] = { type ="value", },
  ["GL_E_TIMES_F_NV"] = { type ="value", },
  ["GL_SPARE0_PLUS_SECONDARY_COLOR_NV"] = { type ="value", },
  ["GL_UNSIGNED_IDENTITY_NV"] = { type ="value", },
  ["GL_UNSIGNED_INVERT_NV"] = { type ="value", },
  ["GL_EXPAND_NORMAL_NV"] = { type ="value", },
  ["GL_EXPAND_NEGATE_NV"] = { type ="value", },
  ["GL_HALF_BIAS_NORMAL_NV"] = { type ="value", },
  ["GL_HALF_BIAS_NEGATE_NV"] = { type ="value", },
  ["GL_SIGNED_IDENTITY_NV"] = { type ="value", },
  ["GL_SIGNED_NEGATE_NV"] = { type ="value", },
  ["GL_SCALE_BY_TWO_NV"] = { type ="value", },
  ["GL_SCALE_BY_FOUR_NV"] = { type ="value", },
  ["GL_SCALE_BY_ONE_HALF_NV"] = { type ="value", },
  ["GL_BIAS_BY_NEGATIVE_ONE_HALF_NV"] = { type ="value", },
  ["GL_COMBINER_INPUT_NV"] = { type ="value", },
  ["GL_COMBINER_MAPPING_NV"] = { type ="value", },
  ["GL_COMBINER_COMPONENT_USAGE_NV"] = { type ="value", },
  ["GL_COMBINER_AB_DOT_PRODUCT_NV"] = { type ="value", },
  ["GL_COMBINER_CD_DOT_PRODUCT_NV"] = { type ="value", },
  ["GL_COMBINER_MUX_SUM_NV"] = { type ="value", },
  ["GL_COMBINER_SCALE_NV"] = { type ="value", },
  ["GL_COMBINER_BIAS_NV"] = { type ="value", },
  ["GL_COMBINER_AB_OUTPUT_NV"] = { type ="value", },
  ["GL_COMBINER_CD_OUTPUT_NV"] = { type ="value", },
  ["GL_COMBINER_SUM_OUTPUT_NV"] = { type ="value", },
  ["GL_MAX_GENERAL_COMBINERS_NV"] = { type ="value", },
  ["GL_NUM_GENERAL_COMBINERS_NV"] = { type ="value", },
  ["GL_COLOR_SUM_CLAMP_NV"] = { type ="value", },
  ["GL_COMBINER0_NV"] = { type ="value", },
  ["GL_COMBINER1_NV"] = { type ="value", },
  ["GL_COMBINER2_NV"] = { type ="value", },
  ["GL_COMBINER3_NV"] = { type ="value", },
  ["GL_COMBINER4_NV"] = { type ="value", },
  ["GL_COMBINER5_NV"] = { type ="value", },
  ["GL_COMBINER6_NV"] = { type ="value", },
  ["GL_COMBINER7_NV"] = { type ="value", },
  ["GL_PER_STAGE_CONSTANTS_NV"] = { type ="value", },
  ["GL_SAMPLE_LOCATION_NV"] = { type ="value", },
  ["GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV"] = { type ="value", },
  ["GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV"] = { type ="value", },
  ["GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV"] = { type ="value", },
  ["GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV"] = { type ="value", },
  ["GL_PROGRAMMABLE_SAMPLE_LOCATION_NV"] = { type ="value", },
  ["GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV"] = { type ="value", },
  ["GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV"] = { type ="value", },
  ["GL_BUFFER_GPU_ADDRESS_NV"] = { type ="value", },
  ["GL_GPU_ADDRESS_NV"] = { type ="value", },
  ["GL_MAX_SHADER_BUFFER_ADDRESS_NV"] = { type ="value", },
  ["GL_WARP_SIZE_NV"] = { type ="value", },
  ["GL_WARPS_PER_SM_NV"] = { type ="value", },
  ["GL_SM_COUNT_NV"] = { type ="value", },
  ["GL_MAX_PROGRAM_PATCH_ATTRIBS_NV"] = { type ="value", },
  ["GL_TESS_CONTROL_PROGRAM_NV"] = { type ="value", },
  ["GL_TESS_EVALUATION_PROGRAM_NV"] = { type ="value", },
  ["GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV"] = { type ="value", },
  ["GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV"] = { type ="value", },
  ["GL_EMBOSS_LIGHT_NV"] = { type ="value", },
  ["GL_EMBOSS_CONSTANT_NV"] = { type ="value", },
  ["GL_EMBOSS_MAP_NV"] = { type ="value", },
  ["GL_COMBINE4_NV"] = { type ="value", },
  ["GL_SOURCE3_RGB_NV"] = { type ="value", },
  ["GL_SOURCE3_ALPHA_NV"] = { type ="value", },
  ["GL_OPERAND3_RGB_NV"] = { type ="value", },
  ["GL_OPERAND3_ALPHA_NV"] = { type ="value", },
  ["GL_TEXTURE_UNSIGNED_REMAP_MODE_NV"] = { type ="value", },
  ["GL_TEXTURE_COVERAGE_SAMPLES_NV"] = { type ="value", },
  ["GL_TEXTURE_COLOR_SAMPLES_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_RECTANGLE_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV"] = { type ="value", },
  ["GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT_S8_S8_8_8_NV"] = { type ="value", },
  ["GL_UNSIGNED_INT_8_8_S8_S8_REV_NV"] = { type ="value", },
  ["GL_DSDT_MAG_INTENSITY_NV"] = { type ="value", },
  ["GL_SHADER_CONSISTENT_NV"] = { type ="value", },
  ["GL_TEXTURE_SHADER_NV"] = { type ="value", },
  ["GL_SHADER_OPERATION_NV"] = { type ="value", },
  ["GL_CULL_MODES_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_2D_MATRIX_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_MATRIX_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_2D_SCALE_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_SCALE_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_2D_BIAS_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_BIAS_NV"] = { type ="value", },
  ["GL_PREVIOUS_TEXTURE_INPUT_NV"] = { type ="value", },
  ["GL_CONST_EYE_NV"] = { type ="value", },
  ["GL_PASS_THROUGH_NV"] = { type ="value", },
  ["GL_CULL_FRAGMENT_NV"] = { type ="value", },
  ["GL_OFFSET_TEXTURE_2D_NV"] = { type ="value", },
  ["GL_DEPENDENT_AR_TEXTURE_2D_NV"] = { type ="value", },
  ["GL_DEPENDENT_GB_TEXTURE_2D_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_DEPTH_REPLACE_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_TEXTURE_2D_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV"] = { type ="value", },
  ["GL_HILO_NV"] = { type ="value", },
  ["GL_DSDT_NV"] = { type ="value", },
  ["GL_DSDT_MAG_NV"] = { type ="value", },
  ["GL_DSDT_MAG_VIB_NV"] = { type ="value", },
  ["GL_HILO16_NV"] = { type ="value", },
  ["GL_SIGNED_HILO_NV"] = { type ="value", },
  ["GL_SIGNED_HILO16_NV"] = { type ="value", },
  ["GL_SIGNED_RGBA_NV"] = { type ="value", },
  ["GL_SIGNED_RGBA8_NV"] = { type ="value", },
  ["GL_SIGNED_RGB_NV"] = { type ="value", },
  ["GL_SIGNED_RGB8_NV"] = { type ="value", },
  ["GL_SIGNED_LUMINANCE_NV"] = { type ="value", },
  ["GL_SIGNED_LUMINANCE8_NV"] = { type ="value", },
  ["GL_SIGNED_LUMINANCE_ALPHA_NV"] = { type ="value", },
  ["GL_SIGNED_LUMINANCE8_ALPHA8_NV"] = { type ="value", },
  ["GL_SIGNED_ALPHA_NV"] = { type ="value", },
  ["GL_SIGNED_ALPHA8_NV"] = { type ="value", },
  ["GL_SIGNED_INTENSITY_NV"] = { type ="value", },
  ["GL_SIGNED_INTENSITY8_NV"] = { type ="value", },
  ["GL_DSDT8_NV"] = { type ="value", },
  ["GL_DSDT8_MAG8_NV"] = { type ="value", },
  ["GL_DSDT8_MAG8_INTENSITY8_NV"] = { type ="value", },
  ["GL_SIGNED_RGB_UNSIGNED_ALPHA_NV"] = { type ="value", },
  ["GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV"] = { type ="value", },
  ["GL_HI_SCALE_NV"] = { type ="value", },
  ["GL_LO_SCALE_NV"] = { type ="value", },
  ["GL_DS_SCALE_NV"] = { type ="value", },
  ["GL_DT_SCALE_NV"] = { type ="value", },
  ["GL_MAGNITUDE_SCALE_NV"] = { type ="value", },
  ["GL_VIBRANCE_SCALE_NV"] = { type ="value", },
  ["GL_HI_BIAS_NV"] = { type ="value", },
  ["GL_LO_BIAS_NV"] = { type ="value", },
  ["GL_DS_BIAS_NV"] = { type ="value", },
  ["GL_DT_BIAS_NV"] = { type ="value", },
  ["GL_MAGNITUDE_BIAS_NV"] = { type ="value", },
  ["GL_VIBRANCE_BIAS_NV"] = { type ="value", },
  ["GL_TEXTURE_BORDER_VALUES_NV"] = { type ="value", },
  ["GL_TEXTURE_HI_SIZE_NV"] = { type ="value", },
  ["GL_TEXTURE_LO_SIZE_NV"] = { type ="value", },
  ["GL_TEXTURE_DS_SIZE_NV"] = { type ="value", },
  ["GL_TEXTURE_DT_SIZE_NV"] = { type ="value", },
  ["GL_TEXTURE_MAG_SIZE_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_TEXTURE_3D_NV"] = { type ="value", },
  ["GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV"] = { type ="value", },
  ["GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV"] = { type ="value", },
  ["GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV"] = { type ="value", },
  ["GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV"] = { type ="value", },
  ["GL_OFFSET_HILO_TEXTURE_2D_NV"] = { type ="value", },
  ["GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV"] = { type ="value", },
  ["GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV"] = { type ="value", },
  ["GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV"] = { type ="value", },
  ["GL_DEPENDENT_HILO_TEXTURE_2D_NV"] = { type ="value", },
  ["GL_DEPENDENT_RGB_TEXTURE_3D_NV"] = { type ="value", },
  ["GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_PASS_THROUGH_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_TEXTURE_1D_NV"] = { type ="value", },
  ["GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV"] = { type ="value", },
  ["GL_HILO8_NV"] = { type ="value", },
  ["GL_SIGNED_HILO8_NV"] = { type ="value", },
  ["GL_FORCE_BLUE_TO_ONE_NV"] = { type ="value", },
  ["GL_BACK_PRIMARY_COLOR_NV"] = { type ="value", },
  ["GL_BACK_SECONDARY_COLOR_NV"] = { type ="value", },
  ["GL_TEXTURE_COORD_NV"] = { type ="value", },
  ["GL_CLIP_DISTANCE_NV"] = { type ="value", },
  ["GL_VERTEX_ID_NV"] = { type ="value", },
  ["GL_PRIMITIVE_ID_NV"] = { type ="value", },
  ["GL_GENERIC_ATTRIB_NV"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_ATTRIBS_NV"] = { type ="value", },
  ["GL_ACTIVE_VARYINGS_NV"] = { type ="value", },
  ["GL_ACTIVE_VARYING_MAX_LENGTH_NV"] = { type ="value", },
  ["GL_TRANSFORM_FEEDBACK_RECORD_NV"] = { type ="value", },
  ["GL_UNIFORM_BUFFER_UNIFIED_NV"] = { type ="value", },
  ["GL_UNIFORM_BUFFER_ADDRESS_NV"] = { type ="value", },
  ["GL_UNIFORM_BUFFER_LENGTH_NV"] = { type ="value", },
  ["GL_SURFACE_STATE_NV"] = { type ="value", },
  ["GL_SURFACE_REGISTERED_NV"] = { type ="value", },
  ["GL_SURFACE_MAPPED_NV"] = { type ="value", },
  ["GL_WRITE_DISCARD_NV"] = { type ="value", },
  ["GL_VERTEX_ARRAY_RANGE_NV"] = { type ="value", },
  ["GL_VERTEX_ARRAY_RANGE_LENGTH_NV"] = { type ="value", },
  ["GL_VERTEX_ARRAY_RANGE_VALID_NV"] = { type ="value", },
  ["GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV"] = { type ="value", },
  ["GL_VERTEX_ARRAY_RANGE_POINTER_NV"] = { type ="value", },
  ["GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV"] = { type ="value", },
  ["GL_ELEMENT_ARRAY_UNIFIED_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_VERTEX_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_NORMAL_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_COLOR_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_INDEX_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_TEXTURE_COORD_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_EDGE_FLAG_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_FOG_COORD_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_ELEMENT_ARRAY_ADDRESS_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_VERTEX_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_NORMAL_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_COLOR_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_INDEX_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_TEXTURE_COORD_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_EDGE_FLAG_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_SECONDARY_COLOR_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_FOG_COORD_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_ELEMENT_ARRAY_LENGTH_NV"] = { type ="value", },
  ["GL_DRAW_INDIRECT_UNIFIED_NV"] = { type ="value", },
  ["GL_DRAW_INDIRECT_ADDRESS_NV"] = { type ="value", },
  ["GL_DRAW_INDIRECT_LENGTH_NV"] = { type ="value", },
  ["GL_VERTEX_PROGRAM_NV"] = { type ="value", },
  ["GL_VERTEX_STATE_PROGRAM_NV"] = { type ="value", },
  ["GL_ATTRIB_ARRAY_SIZE_NV"] = { type ="value", },
  ["GL_ATTRIB_ARRAY_STRIDE_NV"] = { type ="value", },
  ["GL_ATTRIB_ARRAY_TYPE_NV"] = { type ="value", },
  ["GL_CURRENT_ATTRIB_NV"] = { type ="value", },
  ["GL_PROGRAM_LENGTH_NV"] = { type ="value", },
  ["GL_PROGRAM_STRING_NV"] = { type ="value", },
  ["GL_MODELVIEW_PROJECTION_NV"] = { type ="value", },
  ["GL_IDENTITY_NV"] = { type ="value", },
  ["GL_INVERSE_NV"] = { type ="value", },
  ["GL_TRANSPOSE_NV"] = { type ="value", },
  ["GL_INVERSE_TRANSPOSE_NV"] = { type ="value", },
  ["GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV"] = { type ="value", },
  ["GL_MAX_TRACK_MATRICES_NV"] = { type ="value", },
  ["GL_MATRIX0_NV"] = { type ="value", },
  ["GL_MATRIX1_NV"] = { type ="value", },
  ["GL_MATRIX2_NV"] = { type ="value", },
  ["GL_MATRIX3_NV"] = { type ="value", },
  ["GL_MATRIX4_NV"] = { type ="value", },
  ["GL_MATRIX5_NV"] = { type ="value", },
  ["GL_MATRIX6_NV"] = { type ="value", },
  ["GL_MATRIX7_NV"] = { type ="value", },
  ["GL_CURRENT_MATRIX_STACK_DEPTH_NV"] = { type ="value", },
  ["GL_CURRENT_MATRIX_NV"] = { type ="value", },
  ["GL_PROGRAM_PARAMETER_NV"] = { type ="value", },
  ["GL_ATTRIB_ARRAY_POINTER_NV"] = { type ="value", },
  ["GL_PROGRAM_TARGET_NV"] = { type ="value", },
  ["GL_PROGRAM_RESIDENT_NV"] = { type ="value", },
  ["GL_TRACK_MATRIX_NV"] = { type ="value", },
  ["GL_TRACK_MATRIX_TRANSFORM_NV"] = { type ="value", },
  ["GL_VERTEX_PROGRAM_BINDING_NV"] = { type ="value", },
  ["GL_PROGRAM_ERROR_POSITION_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY0_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY1_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY2_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY3_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY4_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY5_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY6_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY7_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY8_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY9_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY10_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY11_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY12_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY13_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY14_NV"] = { type ="value", },
  ["GL_VERTEX_ATTRIB_ARRAY15_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB0_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB1_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB2_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB3_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB4_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB5_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB6_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB7_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB8_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB9_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB10_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB11_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB12_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB13_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB14_4_NV"] = { type ="value", },
  ["GL_MAP1_VERTEX_ATTRIB15_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB0_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB1_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB2_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB3_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB4_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB5_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB6_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB7_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB8_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB9_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB10_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB11_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB12_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB13_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB14_4_NV"] = { type ="value", },
  ["GL_MAP2_VERTEX_ATTRIB15_4_NV"] = { type ="value", },
  ["MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB"] = { type ="value", },
  ["GL_VIDEO_BUFFER_NV"] = { type ="value", },
  ["GL_VIDEO_BUFFER_BINDING_NV"] = { type ="value", },
  ["GL_FIELD_UPPER_NV"] = { type ="value", },
  ["GL_FIELD_LOWER_NV"] = { type ="value", },
  ["GL_NUM_VIDEO_CAPTURE_STREAMS_NV"] = { type ="value", },
  ["GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV"] = { type ="value", },
  ["GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV"] = { type ="value", },
  ["GL_LAST_VIDEO_CAPTURE_STATUS_NV"] = { type ="value", },
  ["GL_VIDEO_BUFFER_PITCH_NV"] = { type ="value", },
  ["GL_VIDEO_COLOR_CONVERSION_MATRIX_NV"] = { type ="value", },
  ["GL_VIDEO_COLOR_CONVERSION_MAX_NV"] = { type ="value", },
  ["GL_VIDEO_COLOR_CONVERSION_MIN_NV"] = { type ="value", },
  ["GL_VIDEO_COLOR_CONVERSION_OFFSET_NV"] = { type ="value", },
  ["GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV"] = { type ="value", },
  ["GL_PARTIAL_SUCCESS_NV"] = { type ="value", },
  ["GL_SUCCESS_NV"] = { type ="value", },
  ["GL_FAILURE_NV"] = { type ="value", },
  ["GL_YCBYCR8_422_NV"] = { type ="value", },
  ["GL_YCBAYCR8A_4224_NV"] = { type ="value", },
  ["GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV"] = { type ="value", },
  ["GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV"] = { type ="value", },
  ["GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV"] = { type ="value", },
  ["GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV"] = { type ="value", },
  ["GL_Z4Y12Z4CB12Z4CR12_444_NV"] = { type ="value", },
  ["GL_VIDEO_CAPTURE_FRAME_WIDTH_NV"] = { type ="value", },
  ["GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV"] = { type ="value", },
  ["GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV"] = { type ="value", },
  ["GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV"] = { type ="value", },
  ["GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_X_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_Y_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_Z_NV"] = { type ="value", },
  ["GL_VIEWPORT_SWIZZLE_W_NV"] = { type ="value", },
  ["glAccum"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum op, GLfloat value)", },
  ["glAlphaFunc"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum func, GLclampf ref)", },
  ["glAreTexturesResident"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLsizei n, const GLuint *textures, GLboolean *residences)", },
  ["glArrayElement"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint i)", },
  ["glBegin"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glBindTexture"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint texture)", },
  ["glBitmap"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)", },
  ["glBlendFunc"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum sfactor, GLenum dfactor)", },
  ["glCallList"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint list)", },
  ["glCallLists"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLenum type, const GLvoid *lists)", },
  ["glClear"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield mask)", },
  ["glClearAccum"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)", },
  ["glClearColor"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)", },
  ["glClearDepth"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLclampd depth)", },
  ["glClearIndex"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat c)", },
  ["glClearStencil"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint s)", },
  ["glClipPlane"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum plane, const GLdouble *equation)", },
  ["glColor3b"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbyte red, GLbyte green, GLbyte blue)", },
  ["glColor3bv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLbyte *v)", },
  ["glColor3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble red, GLdouble green, GLdouble blue)", },
  ["glColor3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glColor3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat red, GLfloat green, GLfloat blue)", },
  ["glColor3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glColor3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint red, GLint green, GLint blue)", },
  ["glColor3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glColor3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort red, GLshort green, GLshort blue)", },
  ["glColor3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glColor3ub"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLubyte red, GLubyte green, GLubyte blue)", },
  ["glColor3ubv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLubyte *v)", },
  ["glColor3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint red, GLuint green, GLuint blue)", },
  ["glColor3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLuint *v)", },
  ["glColor3us"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLushort red, GLushort green, GLushort blue)", },
  ["glColor3usv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLushort *v)", },
  ["glColor4b"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)", },
  ["glColor4bv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLbyte *v)", },
  ["glColor4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)", },
  ["glColor4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glColor4f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)", },
  ["glColor4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glColor4i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint red, GLint green, GLint blue, GLint alpha)", },
  ["glColor4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glColor4s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort red, GLshort green, GLshort blue, GLshort alpha)", },
  ["glColor4sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glColor4ub"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)", },
  ["glColor4ubv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLubyte *v)", },
  ["glColor4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint red, GLuint green, GLuint blue, GLuint alpha)", },
  ["glColor4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLuint *v)", },
  ["glColor4us"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLushort red, GLushort green, GLushort blue, GLushort alpha)", },
  ["glColor4usv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLushort *v)", },
  ["glColorMask"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)", },
  ["glColorMaterial"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum mode)", },
  ["glColorPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)", },
  ["glCopyPixels"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)", },
  ["glCopyTexImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border)", },
  ["glCopyTexImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)", },
  ["glCopyTexSubImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)", },
  ["glCopyTexSubImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glCullFace"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glDeleteLists"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint list, GLsizei range)", },
  ["glDeleteTextures"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint *textures)", },
  ["glDepthFunc"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum func)", },
  ["glDepthMask"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLboolean flag)", },
  ["glDepthRange"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLclampd zNear, GLclampd zFar)", },
  ["glDisable"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum cap)", },
  ["glDisableClientState"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum array)", },
  ["glDrawArrays"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLint first, GLsizei count)", },
  ["glDrawBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glDrawElements"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)", },
  ["glDrawPixels"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)", },
  ["glEdgeFlag"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLboolean flag)", },
  ["glEdgeFlagPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei stride, const GLvoid *pointer)", },
  ["glEdgeFlagv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLboolean *flag)", },
  ["glEnable"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum cap)", },
  ["glEnableClientState"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum array)", },
  ["glEnd"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glEndList"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glEvalCoord1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble u)", },
  ["glEvalCoord1dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *u)", },
  ["glEvalCoord1f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat u)", },
  ["glEvalCoord1fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *u)", },
  ["glEvalCoord2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble u, GLdouble v)", },
  ["glEvalCoord2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *u)", },
  ["glEvalCoord2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat u, GLfloat v)", },
  ["glEvalCoord2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *u)", },
  ["glEvalMesh1"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLint i1, GLint i2)", },
  ["glEvalMesh2"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)", },
  ["glEvalPoint1"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint i)", },
  ["glEvalPoint2"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint i, GLint j)", },
  ["glFeedbackBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei size, GLenum type, GLfloat *buffer)", },
  ["glFinish"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glFlush"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glFogf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLfloat param)", },
  ["glFogfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLfloat *params)", },
  ["glFogi"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint param)", },
  ["glFogiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLint *params)", },
  ["glFrontFace"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glFrustum"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)", },
  ["glGenLists"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLsizei range)", },
  ["glGenTextures"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint *textures)", },
  ["glGetBooleanv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLboolean *params)", },
  ["glGetClipPlane"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum plane, GLdouble *equation)", },
  ["glGetDoublev"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLdouble *params)", },
  ["glGetError"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(void)", },
  ["glGetFloatv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLfloat *params)", },
  ["glGetIntegerv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint *params)", },
  ["glGetLightfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum light, GLenum pname, GLfloat *params)", },
  ["glGetLightiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum light, GLenum pname, GLint *params)", },
  ["glGetMapdv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum query, GLdouble *v)", },
  ["glGetMapfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum query, GLfloat *v)", },
  ["glGetMapiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum query, GLint *v)", },
  ["glGetMaterialfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum pname, GLfloat *params)", },
  ["glGetMaterialiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum pname, GLint *params)", },
  ["glGetPixelMapfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLfloat *values)", },
  ["glGetPixelMapuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLuint *values)", },
  ["glGetPixelMapusv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLushort *values)", },
  ["glGetPointerv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLvoid* *params)", },
  ["glGetPolygonStipple"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLubyte *mask)", },
  ["glGetString"] = { type ="function",
    description = "",
    returns = "(const GLubyte*)",
    args = "(GLenum s)", },
  ["glGetTexEnvfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat *params)", },
  ["glGetTexEnviv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint *params)", },
  ["glGetTexGendv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, GLdouble *params)", },
  ["glGetTexGenfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, GLfloat *params)", },
  ["glGetTexGeniv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, GLint *params)", },
  ["glGetTexImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)", },
  ["glGetTexLevelParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLenum pname, GLfloat *params)", },
  ["glGetTexLevelParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLenum pname, GLint *params)", },
  ["glGetTexParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat *params)", },
  ["glGetTexParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint *params)", },
  ["glHint"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum mode)", },
  ["glIndexMask"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint mask)", },
  ["glIndexPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLsizei stride, const GLvoid *pointer)", },
  ["glIndexd"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble c)", },
  ["glIndexdv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *c)", },
  ["glIndexf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat c)", },
  ["glIndexfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *c)", },
  ["glIndexi"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint c)", },
  ["glIndexiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *c)", },
  ["glIndexs"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort c)", },
  ["glIndexsv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *c)", },
  ["glIndexub"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLubyte c)", },
  ["glIndexubv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLubyte *c)", },
  ["glInitNames"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glInterleavedArrays"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum format, GLsizei stride, const GLvoid *pointer)", },
  ["glIsEnabled"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLenum cap)", },
  ["glIsList"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint list)", },
  ["glIsTexture"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint texture)", },
  ["glLightModelf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLfloat param)", },
  ["glLightModelfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLfloat *params)", },
  ["glLightModeli"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint param)", },
  ["glLightModeliv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLint *params)", },
  ["glLightf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum light, GLenum pname, GLfloat param)", },
  ["glLightfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum light, GLenum pname, const GLfloat *params)", },
  ["glLighti"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum light, GLenum pname, GLint param)", },
  ["glLightiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum light, GLenum pname, const GLint *params)", },
  ["glLineStipple"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint factor, GLushort pattern)", },
  ["glLineWidth"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat width)", },
  ["glListBase"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint base)", },
  ["glLoadIdentity"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glLoadMatrixd"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *m)", },
  ["glLoadMatrixf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *m)", },
  ["glLoadName"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint name)", },
  ["glLogicOp"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum opcode)", },
  ["glMap1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)", },
  ["glMap1f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)", },
  ["glMap2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)", },
  ["glMap2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)", },
  ["glMapGrid1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint un, GLdouble u1, GLdouble u2)", },
  ["glMapGrid1f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint un, GLfloat u1, GLfloat u2)", },
  ["glMapGrid2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)", },
  ["glMapGrid2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)", },
  ["glMaterialf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum pname, GLfloat param)", },
  ["glMaterialfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum pname, const GLfloat *params)", },
  ["glMateriali"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum pname, GLint param)", },
  ["glMaterialiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum pname, const GLint *params)", },
  ["glMatrixMode"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glMultMatrixd"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *m)", },
  ["glMultMatrixf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *m)", },
  ["glNewList"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint list, GLenum mode)", },
  ["glNormal3b"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbyte nx, GLbyte ny, GLbyte nz)", },
  ["glNormal3bv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLbyte *v)", },
  ["glNormal3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble nx, GLdouble ny, GLdouble nz)", },
  ["glNormal3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glNormal3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat nx, GLfloat ny, GLfloat nz)", },
  ["glNormal3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glNormal3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint nx, GLint ny, GLint nz)", },
  ["glNormal3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glNormal3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort nx, GLshort ny, GLshort nz)", },
  ["glNormal3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glNormalPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLsizei stride, const GLvoid *pointer)", },
  ["glOrtho"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)", },
  ["glPassThrough"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat token)", },
  ["glPixelMapfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLsizei mapsize, const GLfloat *values)", },
  ["glPixelMapuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLsizei mapsize, const GLuint *values)", },
  ["glPixelMapusv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLsizei mapsize, const GLushort *values)", },
  ["glPixelStoref"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLfloat param)", },
  ["glPixelStorei"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint param)", },
  ["glPixelTransferf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLfloat param)", },
  ["glPixelTransferi"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint param)", },
  ["glPixelZoom"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat xfactor, GLfloat yfactor)", },
  ["glPointSize"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat size)", },
  ["glPolygonMode"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum mode)", },
  ["glPolygonOffset"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat factor, GLfloat units)", },
  ["glPolygonStipple"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLubyte *mask)", },
  ["glPopAttrib"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glPopClientAttrib"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glPopMatrix"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glPopName"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glPrioritizeTextures"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint *textures, const GLclampf *priorities)", },
  ["glPushAttrib"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield mask)", },
  ["glPushClientAttrib"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield mask)", },
  ["glPushMatrix"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glPushName"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint name)", },
  ["glRasterPos2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y)", },
  ["glRasterPos2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glRasterPos2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y)", },
  ["glRasterPos2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glRasterPos2i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y)", },
  ["glRasterPos2iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glRasterPos2s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x, GLshort y)", },
  ["glRasterPos2sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glRasterPos3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y, GLdouble z)", },
  ["glRasterPos3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glRasterPos3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y, GLfloat z)", },
  ["glRasterPos3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glRasterPos3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLint z)", },
  ["glRasterPos3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glRasterPos3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x, GLshort y, GLshort z)", },
  ["glRasterPos3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glRasterPos4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glRasterPos4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glRasterPos4f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glRasterPos4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glRasterPos4i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLint z, GLint w)", },
  ["glRasterPos4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glRasterPos4s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x, GLshort y, GLshort z, GLshort w)", },
  ["glRasterPos4sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glReadBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glReadPixels"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)", },
  ["glRectd"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)", },
  ["glRectdv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v1, const GLdouble *v2)", },
  ["glRectf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)", },
  ["glRectfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v1, const GLfloat *v2)", },
  ["glRecti"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x1, GLint y1, GLint x2, GLint y2)", },
  ["glRectiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v1, const GLint *v2)", },
  ["glRects"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x1, GLshort y1, GLshort x2, GLshort y2)", },
  ["glRectsv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v1, const GLshort *v2)", },
  ["glRenderMode"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLenum mode)", },
  ["glRotated"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)", },
  ["glRotatef"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)", },
  ["glScaled"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y, GLdouble z)", },
  ["glScalef"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y, GLfloat z)", },
  ["glScissor"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glSelectBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei size, GLuint *buffer)", },
  ["glShadeModel"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glStencilFunc"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum func, GLint ref, GLuint mask)", },
  ["glStencilMask"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint mask)", },
  ["glStencilOp"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum fail, GLenum zfail, GLenum zpass)", },
  ["glTexCoord1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble s)", },
  ["glTexCoord1dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glTexCoord1f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat s)", },
  ["glTexCoord1fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glTexCoord1i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint s)", },
  ["glTexCoord1iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glTexCoord1s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort s)", },
  ["glTexCoord1sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glTexCoord2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble s, GLdouble t)", },
  ["glTexCoord2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glTexCoord2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat s, GLfloat t)", },
  ["glTexCoord2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glTexCoord2i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint s, GLint t)", },
  ["glTexCoord2iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glTexCoord2s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort s, GLshort t)", },
  ["glTexCoord2sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glTexCoord3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble s, GLdouble t, GLdouble r)", },
  ["glTexCoord3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glTexCoord3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat s, GLfloat t, GLfloat r)", },
  ["glTexCoord3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glTexCoord3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint s, GLint t, GLint r)", },
  ["glTexCoord3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glTexCoord3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort s, GLshort t, GLshort r)", },
  ["glTexCoord3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glTexCoord4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble s, GLdouble t, GLdouble r, GLdouble q)", },
  ["glTexCoord4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glTexCoord4f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat s, GLfloat t, GLfloat r, GLfloat q)", },
  ["glTexCoord4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glTexCoord4i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint s, GLint t, GLint r, GLint q)", },
  ["glTexCoord4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glTexCoord4s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort s, GLshort t, GLshort r, GLshort q)", },
  ["glTexCoord4sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glTexCoordPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)", },
  ["glTexEnvf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat param)", },
  ["glTexEnvfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLfloat *params)", },
  ["glTexEnvi"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint param)", },
  ["glTexEnviv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLint *params)", },
  ["glTexGend"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, GLdouble param)", },
  ["glTexGendv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, const GLdouble *params)", },
  ["glTexGenf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, GLfloat param)", },
  ["glTexGenfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, const GLfloat *params)", },
  ["glTexGeni"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, GLint param)", },
  ["glTexGeniv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum coord, GLenum pname, const GLint *params)", },
  ["glTexImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)", },
  ["glTexImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)", },
  ["glTexParameterf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat param)", },
  ["glTexParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLfloat *params)", },
  ["glTexParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint param)", },
  ["glTexParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLint *params)", },
  ["glTexSubImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)", },
  ["glTexSubImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)", },
  ["glTranslated"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y, GLdouble z)", },
  ["glTranslatef"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y, GLfloat z)", },
  ["glVertex2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y)", },
  ["glVertex2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glVertex2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y)", },
  ["glVertex2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glVertex2i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y)", },
  ["glVertex2iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glVertex2s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x, GLshort y)", },
  ["glVertex2sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glVertex3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y, GLdouble z)", },
  ["glVertex3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glVertex3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y, GLfloat z)", },
  ["glVertex3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glVertex3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLint z)", },
  ["glVertex3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glVertex3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x, GLshort y, GLshort z)", },
  ["glVertex3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glVertex4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glVertex4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glVertex4f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glVertex4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glVertex4i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLint z, GLint w)", },
  ["glVertex4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glVertex4s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x, GLshort y, GLshort z, GLshort w)", },
  ["glVertex4sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glVertexPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)", },
  ["glViewport"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glCopyTexSubImage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glDrawRangeElements"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)", },
  ["glTexImage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)", },
  ["glTexSubImage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)", },
  ["glActiveTexture"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture)", },
  ["glClientActiveTexture"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture)", },
  ["glCompressedTexImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)", },
  ["glCompressedTexImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)", },
  ["glCompressedTexImage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)", },
  ["glCompressedTexSubImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)", },
  ["glCompressedTexSubImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)", },
  ["glCompressedTexSubImage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)", },
  ["glGetCompressedTexImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint lod, void *img)", },
  ["glLoadTransposeMatrixd"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble m[16])", },
  ["glLoadTransposeMatrixf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat m[16])", },
  ["glMultTransposeMatrixd"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble m[16])", },
  ["glMultTransposeMatrixf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat m[16])", },
  ["glMultiTexCoord1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLdouble s)", },
  ["glMultiTexCoord1dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLdouble *v)", },
  ["glMultiTexCoord1f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLfloat s)", },
  ["glMultiTexCoord1fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLfloat *v)", },
  ["glMultiTexCoord1i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint s)", },
  ["glMultiTexCoord1iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLint *v)", },
  ["glMultiTexCoord1s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLshort s)", },
  ["glMultiTexCoord1sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLshort *v)", },
  ["glMultiTexCoord2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLdouble s, GLdouble t)", },
  ["glMultiTexCoord2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLdouble *v)", },
  ["glMultiTexCoord2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLfloat s, GLfloat t)", },
  ["glMultiTexCoord2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLfloat *v)", },
  ["glMultiTexCoord2i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint s, GLint t)", },
  ["glMultiTexCoord2iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLint *v)", },
  ["glMultiTexCoord2s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLshort s, GLshort t)", },
  ["glMultiTexCoord2sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLshort *v)", },
  ["glMultiTexCoord3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLdouble s, GLdouble t, GLdouble r)", },
  ["glMultiTexCoord3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLdouble *v)", },
  ["glMultiTexCoord3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLfloat s, GLfloat t, GLfloat r)", },
  ["glMultiTexCoord3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLfloat *v)", },
  ["glMultiTexCoord3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint s, GLint t, GLint r)", },
  ["glMultiTexCoord3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLint *v)", },
  ["glMultiTexCoord3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLshort s, GLshort t, GLshort r)", },
  ["glMultiTexCoord3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLshort *v)", },
  ["glMultiTexCoord4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)", },
  ["glMultiTexCoord4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLdouble *v)", },
  ["glMultiTexCoord4f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)", },
  ["glMultiTexCoord4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLfloat *v)", },
  ["glMultiTexCoord4i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint s, GLint t, GLint r, GLint q)", },
  ["glMultiTexCoord4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLint *v)", },
  ["glMultiTexCoord4s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)", },
  ["glMultiTexCoord4sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLshort *v)", },
  ["glSampleCoverage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLclampf value, GLboolean invert)", },
  ["glBlendColor"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)", },
  ["glBlendEquation"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glBlendFuncSeparate"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)", },
  ["glFogCoordPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLsizei stride, const void *pointer)", },
  ["glFogCoordd"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble coord)", },
  ["glFogCoorddv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *coord)", },
  ["glFogCoordf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat coord)", },
  ["glFogCoordfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *coord)", },
  ["glMultiDrawArrays"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)", },
  ["glMultiDrawElements"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, const GLsizei *count, GLenum type, const void *const* indices, GLsizei drawcount)", },
  ["glPointParameterf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLfloat param)", },
  ["glPointParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLfloat *params)", },
  ["glPointParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint param)", },
  ["glPointParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLint *params)", },
  ["glSecondaryColor3b"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbyte red, GLbyte green, GLbyte blue)", },
  ["glSecondaryColor3bv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLbyte *v)", },
  ["glSecondaryColor3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble red, GLdouble green, GLdouble blue)", },
  ["glSecondaryColor3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *v)", },
  ["glSecondaryColor3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat red, GLfloat green, GLfloat blue)", },
  ["glSecondaryColor3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *v)", },
  ["glSecondaryColor3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint red, GLint green, GLint blue)", },
  ["glSecondaryColor3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *v)", },
  ["glSecondaryColor3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort red, GLshort green, GLshort blue)", },
  ["glSecondaryColor3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *v)", },
  ["glSecondaryColor3ub"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLubyte red, GLubyte green, GLubyte blue)", },
  ["glSecondaryColor3ubv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLubyte *v)", },
  ["glSecondaryColor3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint red, GLuint green, GLuint blue)", },
  ["glSecondaryColor3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLuint *v)", },
  ["glSecondaryColor3us"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLushort red, GLushort green, GLushort blue)", },
  ["glSecondaryColor3usv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLushort *v)", },
  ["glSecondaryColorPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride, const void *pointer)", },
  ["glWindowPos2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y)", },
  ["glWindowPos2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *p)", },
  ["glWindowPos2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y)", },
  ["glWindowPos2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *p)", },
  ["glWindowPos2i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y)", },
  ["glWindowPos2iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *p)", },
  ["glWindowPos2s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x, GLshort y)", },
  ["glWindowPos2sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *p)", },
  ["glWindowPos3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble x, GLdouble y, GLdouble z)", },
  ["glWindowPos3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLdouble *p)", },
  ["glWindowPos3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat x, GLfloat y, GLfloat z)", },
  ["glWindowPos3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLfloat *p)", },
  ["glWindowPos3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLint z)", },
  ["glWindowPos3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLint *p)", },
  ["glWindowPos3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLshort x, GLshort y, GLshort z)", },
  ["glWindowPos3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLshort *p)", },
  ["glBeginQuery"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint id)", },
  ["glBindBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint buffer)", },
  ["glBufferData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizeiptr size, const void* data, GLenum usage)", },
  ["glBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLintptr offset, GLsizeiptr size, const void* data)", },
  ["glDeleteBuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* buffers)", },
  ["glDeleteQueries"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* ids)", },
  ["glEndQuery"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target)", },
  ["glGenBuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* buffers)", },
  ["glGenQueries"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* ids)", },
  ["glGetBufferParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint* params)", },
  ["glGetBufferPointerv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, void** params)", },
  ["glGetBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLintptr offset, GLsizeiptr size, void* data)", },
  ["glGetQueryObjectiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum pname, GLint* params)", },
  ["glGetQueryObjectuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum pname, GLuint* params)", },
  ["glGetQueryiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint* params)", },
  ["glIsBuffer"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint buffer)", },
  ["glIsQuery"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint id)", },
  ["glMapBuffer"] = { type ="function",
    description = "",
    returns = "(void*)",
    args = "(GLenum target, GLenum access)", },
  ["glUnmapBuffer"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLenum target)", },
  ["glAttachShader"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint shader)", },
  ["glBindAttribLocation"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint index, const GLchar* name)", },
  ["glBlendEquationSeparate"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum modeRGB, GLenum modeAlpha)", },
  ["glCompileShader"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint shader)", },
  ["glCreateProgram"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(void)", },
  ["glCreateShader"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLenum type)", },
  ["glDeleteProgram"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program)", },
  ["glDeleteShader"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint shader)", },
  ["glDetachShader"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint shader)", },
  ["glDisableVertexAttribArray"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index)", },
  ["glDrawBuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLenum* bufs)", },
  ["glEnableVertexAttribArray"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index)", },
  ["glGetActiveAttrib"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name)", },
  ["glGetActiveUniform"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name)", },
  ["glGetAttachedShaders"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders)", },
  ["glGetAttribLocation"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLuint program, const GLchar* name)", },
  ["glGetProgramInfoLog"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog)", },
  ["glGetProgramiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum pname, GLint* param)", },
  ["glGetShaderInfoLog"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog)", },
  ["glGetShaderSource"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint obj, GLsizei maxLength, GLsizei* length, GLchar* source)", },
  ["glGetShaderiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint shader, GLenum pname, GLint* param)", },
  ["glGetUniformLocation"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLuint program, const GLchar* name)", },
  ["glGetUniformfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLfloat* params)", },
  ["glGetUniformiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint* params)", },
  ["glGetVertexAttribPointerv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, void** pointer)", },
  ["glGetVertexAttribdv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLdouble* params)", },
  ["glGetVertexAttribfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLfloat* params)", },
  ["glGetVertexAttribiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLint* params)", },
  ["glIsProgram"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint program)", },
  ["glIsShader"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint shader)", },
  ["glLinkProgram"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program)", },
  ["glShaderSource"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint shader, GLsizei count, const GLchar *const* string, const GLint* length)", },
  ["glStencilFuncSeparate"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)", },
  ["glStencilMaskSeparate"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLuint mask)", },
  ["glStencilOpSeparate"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)", },
  ["glUniform1f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLfloat v0)", },
  ["glUniform1fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLfloat* value)", },
  ["glUniform1i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint v0)", },
  ["glUniform1iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint* value)", },
  ["glUniform2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLfloat v0, GLfloat v1)", },
  ["glUniform2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLfloat* value)", },
  ["glUniform2i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint v0, GLint v1)", },
  ["glUniform2iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint* value)", },
  ["glUniform3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)", },
  ["glUniform3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLfloat* value)", },
  ["glUniform3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint v0, GLint v1, GLint v2)", },
  ["glUniform3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint* value)", },
  ["glUniform4f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)", },
  ["glUniform4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLfloat* value)", },
  ["glUniform4i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)", },
  ["glUniform4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint* value)", },
  ["glUniformMatrix2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glUniformMatrix3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glUniformMatrix4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glUseProgram"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program)", },
  ["glValidateProgram"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program)", },
  ["glVertexAttrib1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLdouble x)", },
  ["glVertexAttrib1dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLdouble* v)", },
  ["glVertexAttrib1f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLfloat x)", },
  ["glVertexAttrib1fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLfloat* v)", },
  ["glVertexAttrib1s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLshort x)", },
  ["glVertexAttrib1sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLshort* v)", },
  ["glVertexAttrib2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLdouble x, GLdouble y)", },
  ["glVertexAttrib2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLdouble* v)", },
  ["glVertexAttrib2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLfloat x, GLfloat y)", },
  ["glVertexAttrib2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLfloat* v)", },
  ["glVertexAttrib2s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLshort x, GLshort y)", },
  ["glVertexAttrib2sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLshort* v)", },
  ["glVertexAttrib3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLdouble x, GLdouble y, GLdouble z)", },
  ["glVertexAttrib3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLdouble* v)", },
  ["glVertexAttrib3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLfloat x, GLfloat y, GLfloat z)", },
  ["glVertexAttrib3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLfloat* v)", },
  ["glVertexAttrib3s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLshort x, GLshort y, GLshort z)", },
  ["glVertexAttrib3sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLshort* v)", },
  ["glVertexAttrib4Nbv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLbyte* v)", },
  ["glVertexAttrib4Niv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint* v)", },
  ["glVertexAttrib4Nsv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLshort* v)", },
  ["glVertexAttrib4Nub"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)", },
  ["glVertexAttrib4Nubv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLubyte* v)", },
  ["glVertexAttrib4Nuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint* v)", },
  ["glVertexAttrib4Nusv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLushort* v)", },
  ["glVertexAttrib4bv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLbyte* v)", },
  ["glVertexAttrib4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glVertexAttrib4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLdouble* v)", },
  ["glVertexAttrib4f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glVertexAttrib4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLfloat* v)", },
  ["glVertexAttrib4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint* v)", },
  ["glVertexAttrib4s"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)", },
  ["glVertexAttrib4sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLshort* v)", },
  ["glVertexAttrib4ubv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLubyte* v)", },
  ["glVertexAttrib4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint* v)", },
  ["glVertexAttrib4usv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLushort* v)", },
  ["glVertexAttribPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer)", },
  ["glUniformMatrix2x3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)", },
  ["glUniformMatrix2x4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)", },
  ["glUniformMatrix3x2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)", },
  ["glUniformMatrix3x4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)", },
  ["glUniformMatrix4x2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)", },
  ["glUniformMatrix4x3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)", },
  ["glBeginConditionalRender"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum mode)", },
  ["glBeginTransformFeedback"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum primitiveMode)", },
  ["glBindFragDataLocation"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint colorNumber, const GLchar* name)", },
  ["glClampColor"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum clamp)", },
  ["glClearBufferfi"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil)", },
  ["glClearBufferfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum buffer, GLint drawBuffer, const GLfloat* value)", },
  ["glClearBufferiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum buffer, GLint drawBuffer, const GLint* value)", },
  ["glClearBufferuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum buffer, GLint drawBuffer, const GLuint* value)", },
  ["glColorMaski"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)", },
  ["glDisablei"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum cap, GLuint index)", },
  ["glEnablei"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum cap, GLuint index)", },
  ["glEndConditionalRender"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glEndTransformFeedback"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glGetBooleani_v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLuint index, GLboolean* data)", },
  ["glGetFragDataLocation"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLuint program, const GLchar* name)", },
  ["glGetStringi"] = { type ="function",
    description = "",
    returns = "(const GLubyte*)",
    args = "(GLenum name, GLuint index)", },
  ["glGetTexParameterIiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint* params)", },
  ["glGetTexParameterIuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLuint* params)", },
  ["glGetTransformFeedbackVarying"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)", },
  ["glGetUniformuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint* params)", },
  ["glGetVertexAttribIiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLint* params)", },
  ["glGetVertexAttribIuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLuint* params)", },
  ["glIsEnabledi"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLenum cap, GLuint index)", },
  ["glTexParameterIiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLint* params)", },
  ["glTexParameterIuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLuint* params)", },
  ["glTransformFeedbackVaryings"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)", },
  ["glUniform1ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint v0)", },
  ["glUniform1uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint* value)", },
  ["glUniform2ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint v0, GLuint v1)", },
  ["glUniform2uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint* value)", },
  ["glUniform3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint v0, GLuint v1, GLuint v2)", },
  ["glUniform3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint* value)", },
  ["glUniform4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)", },
  ["glUniform4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint* value)", },
  ["glVertexAttribI1i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint v0)", },
  ["glVertexAttribI1iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint* v0)", },
  ["glVertexAttribI1ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint v0)", },
  ["glVertexAttribI1uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint* v0)", },
  ["glVertexAttribI2i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint v0, GLint v1)", },
  ["glVertexAttribI2iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint* v0)", },
  ["glVertexAttribI2ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint v0, GLuint v1)", },
  ["glVertexAttribI2uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint* v0)", },
  ["glVertexAttribI3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint v0, GLint v1, GLint v2)", },
  ["glVertexAttribI3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint* v0)", },
  ["glVertexAttribI3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint v0, GLuint v1, GLuint v2)", },
  ["glVertexAttribI3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint* v0)", },
  ["glVertexAttribI4bv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLbyte* v0)", },
  ["glVertexAttribI4i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint v0, GLint v1, GLint v2, GLint v3)", },
  ["glVertexAttribI4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint* v0)", },
  ["glVertexAttribI4sv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLshort* v0)", },
  ["glVertexAttribI4ubv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLubyte* v0)", },
  ["glVertexAttribI4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3)", },
  ["glVertexAttribI4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint* v0)", },
  ["glVertexAttribI4usv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLushort* v0)", },
  ["glVertexAttribIPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint size, GLenum type, GLsizei stride, const void*pointer)", },
  ["glDrawArraysInstanced"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLint first, GLsizei count, GLsizei primcount)", },
  ["glDrawElementsInstanced"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)", },
  ["glPrimitiveRestartIndex"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer)", },
  ["glTexBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalFormat, GLuint buffer)", },
  ["glFramebufferTexture"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum attachment, GLuint texture, GLint level)", },
  ["glGetBufferParameteri64v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum value, GLint64 * data)", },
  ["glGetInteger64i_v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLuint index, GLint64 * data)", },
  ["glVertexAttribDivisor"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint divisor)", },
  ["glBlendEquationSeparatei"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLenum modeRGB, GLenum modeAlpha)", },
  ["glBlendEquationi"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLenum mode)", },
  ["glBlendFuncSeparatei"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)", },
  ["glBlendFunci"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLenum src, GLenum dst)", },
  ["glMinSampleShading"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLclampf value)", },
  ["glGetGraphicsResetStatus"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(void)", },
  ["glGetnCompressedTexImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint lod, GLsizei bufSize, GLvoid *pixels)", },
  ["glGetnTexImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum tex, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)", },
  ["glGetnUniformdv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)", },
  ["glDebugMessageEnableAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)", },
  ["glBlendEquationIndexedAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLenum mode)", },
  ["glBlendEquationSeparateIndexedAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLenum modeRGB, GLenum modeAlpha)", },
  ["glBlendFuncIndexedAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLenum src, GLenum dst)", },
  ["glBlendFuncSeparateIndexedAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)", },
  ["glVertexAttribParameteriAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLint param)", },
  ["glDeleteNamesAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum identifier, GLuint num, const GLuint* names)", },
  ["glGenNamesAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum identifier, GLuint num, GLuint* names)", },
  ["glIsNameAMD"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLenum identifier, GLuint name)", },
  ["glQueryObjectParameteruiAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint id, GLenum pname, GLuint param)", },
  ["glBeginPerfMonitorAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint monitor)", },
  ["glDeletePerfMonitorsAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* monitors)", },
  ["glEndPerfMonitorAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint monitor)", },
  ["glGenPerfMonitorsAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* monitors)", },
  ["glGetPerfMonitorCounterDataAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint *bytesWritten)", },
  ["glGetPerfMonitorCounterInfoAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint group, GLuint counter, GLenum pname, void *data)", },
  ["glGetPerfMonitorCounterStringAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar *counterString)", },
  ["glGetPerfMonitorCountersAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint group, GLint* numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)", },
  ["glGetPerfMonitorGroupStringAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint group, GLsizei bufSize, GLsizei* length, GLchar *groupString)", },
  ["glGetPerfMonitorGroupsAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint* numGroups, GLsizei groupsSize, GLuint *groups)", },
  ["glSelectPerfMonitorCountersAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList)", },
  ["glSetMultisamplefvAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLuint index, const GLfloat* val)", },
  ["glTexStorageSparseAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)", },
  ["glTextureStorageSparseAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)", },
  ["glStencilOpValueAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum face, GLuint value)", },
  ["glTessellationFactorAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat factor)", },
  ["glTessellationModeAMD"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glClearDepthf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLclampf d)", },
  ["glDepthRangef"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLclampf n, GLclampf f)", },
  ["glGetShaderPrecisionFormat"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum shadertype, GLenum precisiontype, GLint* range, GLint *precision)", },
  ["glReleaseShaderCompiler"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glShaderBinary"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei count, const GLuint* shaders, GLenum binaryformat, const void*binary, GLsizei length)", },
  ["glMemoryBarrierByRegion"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield barriers)", },
  ["glPrimitiveBoundingBoxARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)", },
  ["glDrawArraysInstancedBaseInstance"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)", },
  ["glDrawElementsInstancedBaseInstance"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLuint baseinstance)", },
  ["glDrawElementsInstancedBaseVertexBaseInstance"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)", },
  ["glGetImageHandleARB"] = { type ="function",
    description = "",
    returns = "(GLuint64)",
    args = "(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)", },
  ["glGetTextureHandleARB"] = { type ="function",
    description = "",
    returns = "(GLuint64)",
    args = "(GLuint texture)", },
  ["glGetTextureSamplerHandleARB"] = { type ="function",
    description = "",
    returns = "(GLuint64)",
    args = "(GLuint texture, GLuint sampler)", },
  ["glGetVertexAttribLui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLuint64EXT* params)", },
  ["glIsImageHandleResidentARB"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint64 handle)", },
  ["glIsTextureHandleResidentARB"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint64 handle)", },
  ["glMakeImageHandleNonResidentARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 handle)", },
  ["glMakeImageHandleResidentARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 handle, GLenum access)", },
  ["glMakeTextureHandleNonResidentARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 handle)", },
  ["glMakeTextureHandleResidentARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 handle)", },
  ["glProgramUniformHandleui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64 value)", },
  ["glProgramUniformHandleui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64* values)", },
  ["glUniformHandleui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64 value)", },
  ["glUniformHandleui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64* value)", },
  ["glVertexAttribL1ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint64EXT x)", },
  ["glVertexAttribL1ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint64EXT* v)", },
  ["glBindFragDataLocationIndexed"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name)", },
  ["glGetFragDataIndex"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLuint program, const GLchar * name)", },
  ["glBufferStorage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)", },
  ["glCreateSyncFromCLeventARB"] = { type ="function",
    description = "",
    returns = "(GLsync)",
    args = "(cl_context context, cl_event event, GLbitfield flags)", },
  ["glClearBufferData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)", },
  ["glClearBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)", },
  ["glClearTexImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLenum format, GLenum type, const void *data)", },
  ["glClearTexSubImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)", },
  ["glClipControl"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum origin, GLenum depth)", },
  ["glDispatchCompute"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)", },
  ["glDispatchComputeIndirect"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLintptr indirect)", },
  ["glDispatchComputeGroupSizeARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)", },
  ["glCopyBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)", },
  ["glCopyImageSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)", },
  ["glBindTextureUnit"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint unit, GLuint texture)", },
  ["glBlitNamedFramebuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)", },
  ["glCheckNamedFramebufferStatus"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(GLuint framebuffer, GLenum target)", },
  ["glClearNamedBufferData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)", },
  ["glClearNamedBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)", },
  ["glClearNamedFramebufferfi"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)", },
  ["glClearNamedFramebufferfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat* value)", },
  ["glClearNamedFramebufferiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value)", },
  ["glClearNamedFramebufferuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value)", },
  ["glCompressedTextureSubImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)", },
  ["glCompressedTextureSubImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)", },
  ["glCompressedTextureSubImage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)", },
  ["glCopyNamedBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)", },
  ["glCopyTextureSubImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)", },
  ["glCopyTextureSubImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glCopyTextureSubImage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glCreateBuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* buffers)", },
  ["glCreateFramebuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* framebuffers)", },
  ["glCreateProgramPipelines"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* pipelines)", },
  ["glCreateQueries"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei n, GLuint* ids)", },
  ["glCreateRenderbuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* renderbuffers)", },
  ["glCreateSamplers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* samplers)", },
  ["glCreateTextures"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei n, GLuint* textures)", },
  ["glCreateTransformFeedbacks"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* ids)", },
  ["glCreateVertexArrays"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* arrays)", },
  ["glDisableVertexArrayAttrib"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint index)", },
  ["glEnableVertexArrayAttrib"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint index)", },
  ["glFlushMappedNamedBufferRange"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLintptr offset, GLsizeiptr length)", },
  ["glGenerateTextureMipmap"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture)", },
  ["glGetCompressedTextureImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLsizei bufSize, void *pixels)", },
  ["glGetNamedBufferParameteri64v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLenum pname, GLint64* params)", },
  ["glGetNamedBufferParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLenum pname, GLint* params)", },
  ["glGetNamedBufferPointerv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLenum pname, void** params)", },
  ["glGetNamedBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)", },
  ["glGetNamedFramebufferAttachmentParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params)", },
  ["glGetNamedFramebufferParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum pname, GLint* param)", },
  ["glGetNamedRenderbufferParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint renderbuffer, GLenum pname, GLint* params)", },
  ["glGetQueryBufferObjecti64v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id,GLuint buffer,GLenum pname,GLintptr offset)", },
  ["glGetQueryBufferObjectiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id,GLuint buffer,GLenum pname,GLintptr offset)", },
  ["glGetQueryBufferObjectui64v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id,GLuint buffer,GLenum pname,GLintptr offset)", },
  ["glGetQueryBufferObjectuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id,GLuint buffer,GLenum pname,GLintptr offset)", },
  ["glGetTextureImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)", },
  ["glGetTextureLevelParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLenum pname, GLfloat* params)", },
  ["glGetTextureLevelParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLenum pname, GLint* params)", },
  ["glGetTextureParameterIiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, GLint* params)", },
  ["glGetTextureParameterIuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, GLuint* params)", },
  ["glGetTextureParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, GLfloat* params)", },
  ["glGetTextureParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, GLint* params)", },
  ["glGetTransformFeedbacki64_v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint xfb, GLenum pname, GLuint index, GLint64* param)", },
  ["glGetTransformFeedbacki_v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint xfb, GLenum pname, GLuint index, GLint* param)", },
  ["glGetTransformFeedbackiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint xfb, GLenum pname, GLint* param)", },
  ["glGetVertexArrayIndexed64iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint index, GLenum pname, GLint64* param)", },
  ["glGetVertexArrayIndexediv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint index, GLenum pname, GLint* param)", },
  ["glGetVertexArrayiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLenum pname, GLint* param)", },
  ["glInvalidateNamedFramebufferData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments)", },
  ["glInvalidateNamedFramebufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glMapNamedBuffer"] = { type ="function",
    description = "",
    returns = "(void *)",
    args = "(GLuint buffer, GLenum access)", },
  ["glMapNamedBufferRange"] = { type ="function",
    description = "",
    returns = "(void *)",
    args = "(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)", },
  ["glNamedBufferData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)", },
  ["glNamedBufferStorage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)", },
  ["glNamedBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)", },
  ["glNamedFramebufferDrawBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum mode)", },
  ["glNamedFramebufferDrawBuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLsizei n, const GLenum* bufs)", },
  ["glNamedFramebufferParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum pname, GLint param)", },
  ["glNamedFramebufferReadBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum mode)", },
  ["glNamedFramebufferRenderbuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)", },
  ["glNamedFramebufferTexture"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)", },
  ["glNamedFramebufferTextureLayer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)", },
  ["glNamedRenderbufferStorage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)", },
  ["glNamedRenderbufferStorageMultisample"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)", },
  ["glTextureBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum internalformat, GLuint buffer)", },
  ["glTextureBufferRange"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)", },
  ["glTextureParameterIiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, const GLint* params)", },
  ["glTextureParameterIuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, const GLuint* params)", },
  ["glTextureParameterf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, GLfloat param)", },
  ["glTextureParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, const GLfloat* param)", },
  ["glTextureParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, GLint param)", },
  ["glTextureParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum pname, const GLint* param)", },
  ["glTextureStorage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)", },
  ["glTextureStorage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)", },
  ["glTextureStorage2DMultisample"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)", },
  ["glTextureStorage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)", },
  ["glTextureStorage3DMultisample"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)", },
  ["glTextureSubImage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)", },
  ["glTextureSubImage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)", },
  ["glTextureSubImage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)", },
  ["glTransformFeedbackBufferBase"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint xfb, GLuint index, GLuint buffer)", },
  ["glTransformFeedbackBufferRange"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)", },
  ["glUnmapNamedBuffer"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint buffer)", },
  ["glVertexArrayAttribBinding"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint attribindex, GLuint bindingindex)", },
  ["glVertexArrayAttribFormat"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)", },
  ["glVertexArrayAttribIFormat"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)", },
  ["glVertexArrayAttribLFormat"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)", },
  ["glVertexArrayBindingDivisor"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint bindingindex, GLuint divisor)", },
  ["glVertexArrayElementBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer)", },
  ["glVertexArrayVertexBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)", },
  ["glVertexArrayVertexBuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides)", },
  ["glDrawElementsBaseVertex"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)", },
  ["glDrawElementsInstancedBaseVertex"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex)", },
  ["glDrawRangeElementsBaseVertex"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)", },
  ["glMultiDrawElementsBaseVertex"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, const GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex)", },
  ["glDrawArraysIndirect"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, const void *indirect)", },
  ["glDrawElementsIndirect"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLenum type, const void *indirect)", },
  ["glFramebufferParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint param)", },
  ["glGetFramebufferParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint* params)", },
  ["glBindFramebuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint framebuffer)", },
  ["glBindRenderbuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint renderbuffer)", },
  ["glBlitFramebuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)", },
  ["glCheckFramebufferStatus"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(GLenum target)", },
  ["glDeleteFramebuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* framebuffers)", },
  ["glDeleteRenderbuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* renderbuffers)", },
  ["glFramebufferRenderbuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)", },
  ["glFramebufferTexture1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)", },
  ["glFramebufferTexture2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)", },
  ["glFramebufferTexture3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)", },
  ["glFramebufferTextureLayer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target,GLenum attachment, GLuint texture,GLint level,GLint layer)", },
  ["glGenFramebuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* framebuffers)", },
  ["glGenRenderbuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* renderbuffers)", },
  ["glGenerateMipmap"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target)", },
  ["glGetFramebufferAttachmentParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum attachment, GLenum pname, GLint* params)", },
  ["glGetRenderbufferParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint* params)", },
  ["glIsFramebuffer"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint framebuffer)", },
  ["glIsRenderbuffer"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint renderbuffer)", },
  ["glRenderbufferStorage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)", },
  ["glRenderbufferStorageMultisample"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)", },
  ["glFramebufferTextureFaceARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)", },
  ["glGetProgramBinary"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLsizei bufSize, GLsizei* length, GLenum *binaryFormat, void*binary)", },
  ["glProgramBinary"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)", },
  ["glProgramParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum pname, GLint value)", },
  ["glGetCompressedTextureSubImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)", },
  ["glGetTextureSubImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)", },
  ["glSpecializeShaderARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue)", },
  ["glGetUniformdv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLdouble* params)", },
  ["glUniform1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLdouble x)", },
  ["glUniform1dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLdouble* value)", },
  ["glUniform2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLdouble x, GLdouble y)", },
  ["glUniform2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLdouble* value)", },
  ["glUniform3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLdouble x, GLdouble y, GLdouble z)", },
  ["glUniform3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLdouble* value)", },
  ["glUniform4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glUniform4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLdouble* value)", },
  ["glUniformMatrix2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glUniformMatrix2x3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glUniformMatrix2x4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glUniformMatrix3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glUniformMatrix3x2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glUniformMatrix3x4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glUniformMatrix4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glUniformMatrix4x2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glUniformMatrix4x3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glGetUniformi64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64* params)", },
  ["glGetUniformui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64* params)", },
  ["glGetnUniformi64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei bufSize, GLint64* params)", },
  ["glGetnUniformui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei bufSize, GLuint64* params)", },
  ["glProgramUniform1i64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64 x)", },
  ["glProgramUniform1i64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint64* value)", },
  ["glProgramUniform1ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64 x)", },
  ["glProgramUniform1ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64* value)", },
  ["glProgramUniform2i64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64 x, GLint64 y)", },
  ["glProgramUniform2i64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint64* value)", },
  ["glProgramUniform2ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64 x, GLuint64 y)", },
  ["glProgramUniform2ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64* value)", },
  ["glProgramUniform3i64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)", },
  ["glProgramUniform3i64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint64* value)", },
  ["glProgramUniform3ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)", },
  ["glProgramUniform3ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64* value)", },
  ["glProgramUniform4i64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)", },
  ["glProgramUniform4i64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint64* value)", },
  ["glProgramUniform4ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)", },
  ["glProgramUniform4ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64* value)", },
  ["glUniform1i64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint64 x)", },
  ["glUniform1i64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint64* value)", },
  ["glUniform1ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64 x)", },
  ["glUniform1ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64* value)", },
  ["glUniform2i64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint64 x, GLint64 y)", },
  ["glUniform2i64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint64* value)", },
  ["glUniform2ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64 x, GLuint64 y)", },
  ["glUniform2ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64* value)", },
  ["glUniform3i64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint64 x, GLint64 y, GLint64 z)", },
  ["glUniform3i64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint64* value)", },
  ["glUniform3ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)", },
  ["glUniform3ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64* value)", },
  ["glUniform4i64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)", },
  ["glUniform4i64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint64* value)", },
  ["glUniform4ui64ARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)", },
  ["glUniform4ui64vARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64* value)", },
  ["glColorSubTable"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)", },
  ["glColorTable"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)", },
  ["glColorTableParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLfloat *params)", },
  ["glColorTableParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLint *params)", },
  ["glConvolutionFilter1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)", },
  ["glConvolutionFilter2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)", },
  ["glConvolutionParameterf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat params)", },
  ["glConvolutionParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLfloat *params)", },
  ["glConvolutionParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint params)", },
  ["glConvolutionParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLint *params)", },
  ["glCopyColorSubTable"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)", },
  ["glCopyColorTable"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)", },
  ["glCopyConvolutionFilter1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)", },
  ["glCopyConvolutionFilter2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glGetColorTable"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum format, GLenum type, void *table)", },
  ["glGetColorTableParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat *params)", },
  ["glGetColorTableParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint *params)", },
  ["glGetConvolutionFilter"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum format, GLenum type, void *image)", },
  ["glGetConvolutionParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat *params)", },
  ["glGetConvolutionParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint *params)", },
  ["glGetHistogram"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)", },
  ["glGetHistogramParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat *params)", },
  ["glGetHistogramParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint *params)", },
  ["glGetMinmax"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLboolean reset, GLenum format, GLenum types, void *values)", },
  ["glGetMinmaxParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat *params)", },
  ["glGetMinmaxParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint *params)", },
  ["glGetSeparableFilter"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)", },
  ["glHistogram"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)", },
  ["glMinmax"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLboolean sink)", },
  ["glResetHistogram"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target)", },
  ["glResetMinmax"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target)", },
  ["glSeparableFilter2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)", },
  ["glMultiDrawArraysIndirectCountARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)", },
  ["glMultiDrawElementsIndirectCountARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)", },
  ["glGetInternalformativ"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params)", },
  ["glGetInternalformati64v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params)", },
  ["glInvalidateBufferData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer)", },
  ["glInvalidateBufferSubData"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLintptr offset, GLsizeiptr length)", },
  ["glInvalidateFramebuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei numAttachments, const GLenum* attachments)", },
  ["glInvalidateSubFramebuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glInvalidateTexImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level)", },
  ["glInvalidateTexSubImage"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)", },
  ["glFlushMappedBufferRange"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLintptr offset, GLsizeiptr length)", },
  ["glMapBufferRange"] = { type ="function",
    description = "",
    returns = "(void *)",
    args = "(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)", },
  ["glCurrentPaletteMatrixARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint index)", },
  ["glMatrixIndexPointerARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride, void *pointer)", },
  ["glMatrixIndexubvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLubyte *indices)", },
  ["glMatrixIndexuivARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLuint *indices)", },
  ["glMatrixIndexusvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLushort *indices)", },
  ["glBindBuffersBase"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint first, GLsizei count, const GLuint* buffers)", },
  ["glBindBuffersRange"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizeiptr *sizes)", },
  ["glBindImageTextures"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint first, GLsizei count, const GLuint* textures)", },
  ["glBindSamplers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint first, GLsizei count, const GLuint* samplers)", },
  ["glBindTextures"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint first, GLsizei count, const GLuint* textures)", },
  ["glBindVertexBuffers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides)", },
  ["glMultiDrawArraysIndirect"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride)", },
  ["glMultiDrawElementsIndirect"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride)", },
  ["glMaxShaderCompilerThreadsARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint count)", },
  ["glGetProgramInterfaceiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum programInterface, GLenum pname, GLint* params)", },
  ["glGetProgramResourceIndex"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLuint program, GLenum programInterface, const GLchar* name)", },
  ["glGetProgramResourceLocation"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLuint program, GLenum programInterface, const GLchar* name)", },
  ["glGetProgramResourceLocationIndex"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLuint program, GLenum programInterface, const GLchar* name)", },
  ["glGetProgramResourceName"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar *name)", },
  ["glGetProgramResourceiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLint *params)", },
  ["glProvokingVertex"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode)", },
  ["glGetnColorTableARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table)", },
  ["glGetnConvolutionFilterARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image)", },
  ["glGetnHistogramARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)", },
  ["glGetnMapdvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v)", },
  ["glGetnMapfvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v)", },
  ["glGetnMapivARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum query, GLsizei bufSize, GLint* v)", },
  ["glGetnMinmaxARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)", },
  ["glGetnPixelMapfvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLsizei bufSize, GLfloat* values)", },
  ["glGetnPixelMapuivARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLsizei bufSize, GLuint* values)", },
  ["glGetnPixelMapusvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum map, GLsizei bufSize, GLushort* values)", },
  ["glGetnPolygonStippleARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei bufSize, GLubyte* pattern)", },
  ["glGetnSeparableFilterARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void*column, void*span)", },
  ["glFramebufferSampleLocationsfvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint start, GLsizei count, const GLfloat* v)", },
  ["glNamedFramebufferSampleLocationsfvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)", },
  ["glBindSampler"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint unit, GLuint sampler)", },
  ["glDeleteSamplers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei count, const GLuint * samplers)", },
  ["glGenSamplers"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei count, GLuint* samplers)", },
  ["glGetSamplerParameterIiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, GLint* params)", },
  ["glGetSamplerParameterIuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, GLuint* params)", },
  ["glGetSamplerParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, GLfloat* params)", },
  ["glGetSamplerParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, GLint* params)", },
  ["glIsSampler"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint sampler)", },
  ["glSamplerParameterIiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, const GLint* params)", },
  ["glSamplerParameterIuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, const GLuint* params)", },
  ["glSamplerParameterf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, GLfloat param)", },
  ["glSamplerParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, const GLfloat* params)", },
  ["glSamplerParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, GLint param)", },
  ["glSamplerParameteriv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sampler, GLenum pname, const GLint* params)", },
  ["glActiveShaderProgram"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint pipeline, GLuint program)", },
  ["glBindProgramPipeline"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint pipeline)", },
  ["glCreateShaderProgramv"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLenum type, GLsizei count, const GLchar * const * strings)", },
  ["glDeleteProgramPipelines"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* pipelines)", },
  ["glGenProgramPipelines"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* pipelines)", },
  ["glGetProgramPipelineInfoLog"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar *infoLog)", },
  ["glGetProgramPipelineiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint pipeline, GLenum pname, GLint* params)", },
  ["glIsProgramPipeline"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint pipeline)", },
  ["glProgramUniform1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLdouble x)", },
  ["glProgramUniform1dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLdouble* value)", },
  ["glProgramUniform1f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLfloat x)", },
  ["glProgramUniform1fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLfloat* value)", },
  ["glProgramUniform1i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint x)", },
  ["glProgramUniform1iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint* value)", },
  ["glProgramUniform1ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint x)", },
  ["glProgramUniform1uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint* value)", },
  ["glProgramUniform2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLdouble x, GLdouble y)", },
  ["glProgramUniform2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLdouble* value)", },
  ["glProgramUniform2f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLfloat x, GLfloat y)", },
  ["glProgramUniform2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLfloat* value)", },
  ["glProgramUniform2i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint x, GLint y)", },
  ["glProgramUniform2iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint* value)", },
  ["glProgramUniform2ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint x, GLuint y)", },
  ["glProgramUniform2uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint* value)", },
  ["glProgramUniform3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)", },
  ["glProgramUniform3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLdouble* value)", },
  ["glProgramUniform3f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)", },
  ["glProgramUniform3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLfloat* value)", },
  ["glProgramUniform3i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint x, GLint y, GLint z)", },
  ["glProgramUniform3iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint* value)", },
  ["glProgramUniform3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)", },
  ["glProgramUniform3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint* value)", },
  ["glProgramUniform4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glProgramUniform4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLdouble* value)", },
  ["glProgramUniform4f"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glProgramUniform4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLfloat* value)", },
  ["glProgramUniform4i"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)", },
  ["glProgramUniform4iv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint* value)", },
  ["glProgramUniform4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)", },
  ["glProgramUniform4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint* value)", },
  ["glProgramUniformMatrix2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glProgramUniformMatrix2x3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix2x3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glProgramUniformMatrix2x4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix2x4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glProgramUniformMatrix3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glProgramUniformMatrix3x2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix3x2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glProgramUniformMatrix3x4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix3x4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glProgramUniformMatrix4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix4fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glProgramUniformMatrix4x2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix4x2fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glProgramUniformMatrix4x3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)", },
  ["glProgramUniformMatrix4x3fv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)", },
  ["glUseProgramStages"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint pipeline, GLbitfield stages, GLuint program)", },
  ["glValidateProgramPipeline"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint pipeline)", },
  ["glGetActiveAtomicCounterBufferiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params)", },
  ["glBindImageTexture"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)", },
  ["glMemoryBarrier"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield barriers)", },
  ["glAttachObjectARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhandleARB containerObj, GLhandleARB obj)", },
  ["glCreateProgramObjectARB"] = { type ="function",
    description = "",
    returns = "(GLhandleARB)",
    args = "(void)", },
  ["glCreateShaderObjectARB"] = { type ="function",
    description = "",
    returns = "(GLhandleARB)",
    args = "(GLenum shaderType)", },
  ["glDeleteObjectARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhandleARB obj)", },
  ["glDetachObjectARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhandleARB containerObj, GLhandleARB attachedObj)", },
  ["glGetAttachedObjectsARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj)", },
  ["glGetHandleARB"] = { type ="function",
    description = "",
    returns = "(GLhandleARB)",
    args = "(GLenum pname)", },
  ["glGetInfoLogARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog)", },
  ["glGetObjectParameterfvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhandleARB obj, GLenum pname, GLfloat* params)", },
  ["glGetObjectParameterivARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhandleARB obj, GLenum pname, GLint* params)", },
  ["glUseProgramObjectARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhandleARB programObj)", },
  ["glShaderStorageBlockBinding"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)", },
  ["glGetActiveSubroutineName"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name)", },
  ["glGetActiveSubroutineUniformName"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name)", },
  ["glGetActiveSubroutineUniformiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values)", },
  ["glGetProgramStageiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum shadertype, GLenum pname, GLint* values)", },
  ["glGetSubroutineIndex"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLuint program, GLenum shadertype, const GLchar* name)", },
  ["glGetSubroutineUniformLocation"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLuint program, GLenum shadertype, const GLchar* name)", },
  ["glGetUniformSubroutineuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum shadertype, GLint location, GLuint* params)", },
  ["glUniformSubroutinesuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum shadertype, GLsizei count, const GLuint* indices)", },
  ["glCompileShaderIncludeARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint shader, GLsizei count, const GLchar* const *path, const GLint *length)", },
  ["glDeleteNamedStringARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint namelen, const GLchar* name)", },
  ["glGetNamedStringARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint namelen, const GLchar* name, GLsizei bufSize, GLint *stringlen, GLchar *string)", },
  ["glGetNamedStringivARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint namelen, const GLchar* name, GLenum pname, GLint *params)", },
  ["glIsNamedStringARB"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLint namelen, const GLchar* name)", },
  ["glNamedStringARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar *string)", },
  ["glBufferPageCommitmentARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)", },
  ["glTexPageCommitmentARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)", },
  ["glTexturePageCommitmentEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)", },
  ["glClientWaitSync"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(GLsync GLsync,GLbitfield flags,GLuint64 timeout)", },
  ["glDeleteSync"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsync GLsync)", },
  ["glFenceSync"] = { type ="function",
    description = "",
    returns = "(GLsync)",
    args = "(GLenum condition,GLbitfield flags)", },
  ["glGetInteger64v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint64* params)", },
  ["glGetSynciv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsync GLsync,GLenum pname,GLsizei bufSize,GLsizei* length, GLint *values)", },
  ["glIsSync"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLsync GLsync)", },
  ["glWaitSync"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsync GLsync,GLbitfield flags,GLuint64 timeout)", },
  ["glPatchParameterfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLfloat* values)", },
  ["glPatchParameteri"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint value)", },
  ["glTextureBarrier"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glTexBufferRange"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)", },
  ["glGetMultisamplefv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLuint index, GLfloat* val)", },
  ["glSampleMaski"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLbitfield mask)", },
  ["glTexImage2DMultisample"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)", },
  ["glTexImage3DMultisample"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)", },
  ["glTexStorage1D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)", },
  ["glTexStorage2D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)", },
  ["glTexStorage3D"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)", },
  ["glTexStorage2DMultisample"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)", },
  ["glTexStorage3DMultisample"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)", },
  ["glTextureView"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)", },
  ["glGetQueryObjecti64v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum pname, GLint64* params)", },
  ["glGetQueryObjectui64v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum pname, GLuint64* params)", },
  ["glQueryCounter"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum target)", },
  ["glBindTransformFeedback"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint id)", },
  ["glDeleteTransformFeedbacks"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* ids)", },
  ["glDrawTransformFeedback"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLuint id)", },
  ["glGenTransformFeedbacks"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* ids)", },
  ["glIsTransformFeedback"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint id)", },
  ["glPauseTransformFeedback"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glResumeTransformFeedback"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glBeginQueryIndexed"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLuint id)", },
  ["glDrawTransformFeedbackStream"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLuint id, GLuint stream)", },
  ["glEndQueryIndexed"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index)", },
  ["glGetQueryIndexediv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLenum pname, GLint* params)", },
  ["glDrawTransformFeedbackInstanced"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLuint id, GLsizei primcount)", },
  ["glDrawTransformFeedbackStreamInstanced"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)", },
  ["glBindBufferBase"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLuint buffer)", },
  ["glBindBufferRange"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)", },
  ["glGetActiveUniformBlockName"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)", },
  ["glGetActiveUniformBlockiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)", },
  ["glGetActiveUniformName"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName)", },
  ["glGetActiveUniformsiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)", },
  ["glGetIntegeri_v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLint* data)", },
  ["glGetUniformBlockIndex"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLuint program, const GLchar* uniformBlockName)", },
  ["glGetUniformIndices"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLsizei uniformCount, const GLchar* const * uniformNames, GLuint* uniformIndices)", },
  ["glUniformBlockBinding"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)", },
  ["glBindVertexArray"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint array)", },
  ["glDeleteVertexArrays"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* arrays)", },
  ["glGenVertexArrays"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* arrays)", },
  ["glIsVertexArray"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint array)", },
  ["glGetVertexAttribLdv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLdouble* params)", },
  ["glVertexAttribL1d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLdouble x)", },
  ["glVertexAttribL1dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLdouble* v)", },
  ["glVertexAttribL2d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLdouble x, GLdouble y)", },
  ["glVertexAttribL2dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLdouble* v)", },
  ["glVertexAttribL3d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLdouble x, GLdouble y, GLdouble z)", },
  ["glVertexAttribL3dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLdouble* v)", },
  ["glVertexAttribL4d"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glVertexAttribL4dv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLdouble* v)", },
  ["glVertexAttribLPointer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)", },
  ["glBindVertexBuffer"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)", },
  ["glVertexArrayBindVertexBufferEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)", },
  ["glVertexArrayVertexAttribBindingEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint attribindex, GLuint bindingindex)", },
  ["glVertexArrayVertexAttribFormatEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)", },
  ["glVertexArrayVertexAttribIFormatEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)", },
  ["glVertexArrayVertexAttribLFormatEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)", },
  ["glVertexArrayVertexBindingDivisorEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint bindingindex, GLuint divisor)", },
  ["glVertexAttribBinding"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint attribindex, GLuint bindingindex)", },
  ["glVertexAttribFormat"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)", },
  ["glVertexAttribIFormat"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)", },
  ["glVertexAttribLFormat"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)", },
  ["glVertexBindingDivisor"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint bindingindex, GLuint divisor)", },
  ["glVertexBlendARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint count)", },
  ["glWeightPointerARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride, void *pointer)", },
  ["glWeightbvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLbyte *weights)", },
  ["glWeightdvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLdouble *weights)", },
  ["glWeightfvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLfloat *weights)", },
  ["glWeightivARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLint *weights)", },
  ["glWeightsvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLshort *weights)", },
  ["glWeightubvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLubyte *weights)", },
  ["glWeightuivARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLuint *weights)", },
  ["glWeightusvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLushort *weights)", },
  ["glBindProgramARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint program)", },
  ["glDeleteProgramsARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* programs)", },
  ["glGenProgramsARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* programs)", },
  ["glGetProgramEnvParameterdvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLdouble* params)", },
  ["glGetProgramEnvParameterfvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLfloat* params)", },
  ["glGetProgramLocalParameterdvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLdouble* params)", },
  ["glGetProgramLocalParameterfvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLfloat* params)", },
  ["glGetProgramStringARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, void *string)", },
  ["glProgramEnvParameter4dARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glProgramEnvParameter4dvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLdouble* params)", },
  ["glProgramEnvParameter4fARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glProgramEnvParameter4fvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLfloat* params)", },
  ["glProgramLocalParameter4dARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glProgramLocalParameter4dvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLdouble* params)", },
  ["glProgramLocalParameter4fARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glProgramLocalParameter4fvARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLfloat* params)", },
  ["glProgramStringARB"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum format, GLsizei len, const void *string)", },
  ["glColorP3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint color)", },
  ["glColorP3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* color)", },
  ["glColorP4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint color)", },
  ["glColorP4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* color)", },
  ["glMultiTexCoordP1ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture, GLenum type, GLuint coords)", },
  ["glMultiTexCoordP1uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture, GLenum type, const GLuint* coords)", },
  ["glMultiTexCoordP2ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture, GLenum type, GLuint coords)", },
  ["glMultiTexCoordP2uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture, GLenum type, const GLuint* coords)", },
  ["glMultiTexCoordP3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture, GLenum type, GLuint coords)", },
  ["glMultiTexCoordP3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture, GLenum type, const GLuint* coords)", },
  ["glMultiTexCoordP4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture, GLenum type, GLuint coords)", },
  ["glMultiTexCoordP4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texture, GLenum type, const GLuint* coords)", },
  ["glNormalP3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint coords)", },
  ["glNormalP3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* coords)", },
  ["glSecondaryColorP3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint color)", },
  ["glSecondaryColorP3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* color)", },
  ["glTexCoordP1ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint coords)", },
  ["glTexCoordP1uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* coords)", },
  ["glTexCoordP2ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint coords)", },
  ["glTexCoordP2uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* coords)", },
  ["glTexCoordP3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint coords)", },
  ["glTexCoordP3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* coords)", },
  ["glTexCoordP4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint coords)", },
  ["glTexCoordP4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* coords)", },
  ["glVertexAttribP1ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum type, GLboolean normalized, GLuint value)", },
  ["glVertexAttribP1uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)", },
  ["glVertexAttribP2ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum type, GLboolean normalized, GLuint value)", },
  ["glVertexAttribP2uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)", },
  ["glVertexAttribP3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum type, GLboolean normalized, GLuint value)", },
  ["glVertexAttribP3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)", },
  ["glVertexAttribP4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum type, GLboolean normalized, GLuint value)", },
  ["glVertexAttribP4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)", },
  ["glVertexP2ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint value)", },
  ["glVertexP2uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* value)", },
  ["glVertexP3ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint value)", },
  ["glVertexP3uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* value)", },
  ["glVertexP4ui"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLuint value)", },
  ["glVertexP4uiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, const GLuint* value)", },
  ["glDepthRangeArrayv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint first, GLsizei count, const GLclampd * v)", },
  ["glDepthRangeIndexed"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLclampd n, GLclampd f)", },
  ["glGetDoublei_v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLdouble* data)", },
  ["glGetFloati_v"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLfloat* data)", },
  ["glScissorArrayv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint first, GLsizei count, const GLint * v)", },
  ["glScissorIndexed"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)", },
  ["glScissorIndexedv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint * v)", },
  ["glViewportArrayv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint first, GLsizei count, const GLfloat * v)", },
  ["glViewportIndexedf"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)", },
  ["glViewportIndexedfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLfloat * v)", },
  ["glBindMultiTextureEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLuint texture)", },
  ["glClientAttribDefaultEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield mask)", },
  ["glCompressedMultiTexImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)", },
  ["glCompressedMultiTexImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)", },
  ["glCompressedMultiTexImage3DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)", },
  ["glCompressedMultiTexSubImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)", },
  ["glCompressedMultiTexSubImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)", },
  ["glCompressedMultiTexSubImage3DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)", },
  ["glCompressedTextureImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)", },
  ["glCompressedTextureImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)", },
  ["glCompressedTextureImage3DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)", },
  ["glCopyMultiTexImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)", },
  ["glCopyMultiTexImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)", },
  ["glCopyMultiTexSubImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)", },
  ["glCopyMultiTexSubImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glCopyMultiTexSubImage3DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)", },
  ["glCopyTextureImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)", },
  ["glCopyTextureImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)", },
  ["glDisableClientStateIndexedEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum array, GLuint index)", },
  ["glDisableClientStateiEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum array, GLuint index)", },
  ["glDisableVertexArrayEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLenum array)", },
  ["glEnableClientStateIndexedEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum array, GLuint index)", },
  ["glEnableClientStateiEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum array, GLuint index)", },
  ["glEnableVertexArrayEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLenum array)", },
  ["glFramebufferDrawBufferEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum mode)", },
  ["glFramebufferDrawBuffersEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLsizei n, const GLenum* bufs)", },
  ["glFramebufferReadBufferEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum mode)", },
  ["glGenerateMultiTexMipmapEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target)", },
  ["glGetCompressedMultiTexImageEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, void *img)", },
  ["glGetDoubleIndexedvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLdouble* params)", },
  ["glGetFloatIndexedvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLfloat* params)", },
  ["glGetMultiTexEnvfvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLfloat* params)", },
  ["glGetMultiTexEnvivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLint* params)", },
  ["glGetMultiTexGendvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params)", },
  ["glGetMultiTexGenfvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params)", },
  ["glGetMultiTexGenivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, GLint* params)", },
  ["glGetMultiTexImageEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)", },
  ["glGetMultiTexLevelParameterfvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params)", },
  ["glGetMultiTexLevelParameterivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params)", },
  ["glGetMultiTexParameterIivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLint* params)", },
  ["glGetMultiTexParameterIuivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLuint* params)", },
  ["glGetMultiTexParameterfvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLfloat* params)", },
  ["glGetMultiTexParameterivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLint* params)", },
  ["glGetNamedProgramLocalParameterIivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLint* params)", },
  ["glGetNamedProgramLocalParameterIuivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLuint* params)", },
  ["glGetNamedProgramLocalParameterdvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLdouble* params)", },
  ["glGetNamedProgramLocalParameterfvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLfloat* params)", },
  ["glGetNamedProgramStringEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLenum pname, void *string)", },
  ["glGetNamedProgramivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLenum pname, GLint* params)", },
  ["glGetPointerIndexedvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, void** params)", },
  ["glGetPointeri_vEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLuint index, void** params)", },
  ["glGetVertexArrayIntegeri_vEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint index, GLenum pname, GLint* param)", },
  ["glGetVertexArrayIntegervEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLenum pname, GLint* param)", },
  ["glGetVertexArrayPointeri_vEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint index, GLenum pname, void** param)", },
  ["glGetVertexArrayPointervEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLenum pname, void** param)", },
  ["glMatrixFrustumEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)", },
  ["glMatrixLoadIdentityEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode)", },
  ["glMatrixLoadTransposedEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLdouble* m)", },
  ["glMatrixLoadTransposefEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixLoaddEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLdouble* m)", },
  ["glMatrixLoadfEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixMultTransposedEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLdouble* m)", },
  ["glMatrixMultTransposefEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixMultdEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLdouble* m)", },
  ["glMatrixMultfEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixOrthoEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)", },
  ["glMatrixPopEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode)", },
  ["glMatrixPushEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode)", },
  ["glMatrixRotatedEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)", },
  ["glMatrixRotatefEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)", },
  ["glMatrixScaledEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)", },
  ["glMatrixScalefEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)", },
  ["glMatrixTranslatedEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)", },
  ["glMatrixTranslatefEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)", },
  ["glMultiTexBufferEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)", },
  ["glMultiTexCoordPointerEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer)", },
  ["glMultiTexEnvfEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLfloat param)", },
  ["glMultiTexEnvfvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params)", },
  ["glMultiTexEnviEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLint param)", },
  ["glMultiTexEnvivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, const GLint* params)", },
  ["glMultiTexGendEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)", },
  ["glMultiTexGendvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params)", },
  ["glMultiTexGenfEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)", },
  ["glMultiTexGenfvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params)", },
  ["glMultiTexGeniEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, GLint param)", },
  ["glMultiTexGenivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum coord, GLenum pname, const GLint* params)", },
  ["glMultiTexImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)", },
  ["glMultiTexImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)", },
  ["glMultiTexImage3DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)", },
  ["glMultiTexParameterIivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, const GLint* params)", },
  ["glMultiTexParameterIuivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, const GLuint* params)", },
  ["glMultiTexParameterfEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLfloat param)", },
  ["glMultiTexParameterfvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, const GLfloat* param)", },
  ["glMultiTexParameteriEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, GLint param)", },
  ["glMultiTexParameterivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLenum pname, const GLint* param)", },
  ["glMultiTexRenderbufferEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLuint renderbuffer)", },
  ["glMultiTexSubImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)", },
  ["glMultiTexSubImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)", },
  ["glMultiTexSubImage3DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)", },
  ["glNamedCopyBufferSubDataEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)", },
  ["glNamedFramebufferTexture1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)", },
  ["glNamedFramebufferTexture2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)", },
  ["glNamedFramebufferTexture3DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)", },
  ["glNamedFramebufferTextureFaceEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)", },
  ["glNamedProgramLocalParameter4dEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glNamedProgramLocalParameter4dvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, const GLdouble* params)", },
  ["glNamedProgramLocalParameter4fEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glNamedProgramLocalParameter4fvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, const GLfloat* params)", },
  ["glNamedProgramLocalParameterI4iEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)", },
  ["glNamedProgramLocalParameterI4ivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, const GLint* params)", },
  ["glNamedProgramLocalParameterI4uiEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)", },
  ["glNamedProgramLocalParameterI4uivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, const GLuint* params)", },
  ["glNamedProgramLocalParameters4fvEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params)", },
  ["glNamedProgramLocalParametersI4ivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params)", },
  ["glNamedProgramLocalParametersI4uivEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params)", },
  ["glNamedProgramStringEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string)", },
  ["glNamedRenderbufferStorageMultisampleCoverageEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)", },
  ["glPushClientAttribDefaultEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield mask)", },
  ["glTextureImage1DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)", },
  ["glTextureImage2DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)", },
  ["glTextureImage3DEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)", },
  ["glTextureRenderbufferEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLuint renderbuffer)", },
  ["glVertexArrayColorOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayEdgeFlagOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayFogCoordOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayIndexOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayMultiTexCoordOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayNormalOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glVertexArraySecondaryColorOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayTexCoordOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayVertexAttribDivisorEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint index, GLuint divisor)", },
  ["glVertexArrayVertexAttribIOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayVertexAttribOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)", },
  ["glVertexArrayVertexOffsetEXT"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)", },
  ["glBlendBarrierKHR"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glDebugMessageCallback"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLDEBUGPROC callback, const void *userParam)", },
  ["glDebugMessageControl"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)", },
  ["glDebugMessageInsert"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf)", },
  ["glGetDebugMessageLog"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog)", },
  ["glGetObjectLabel"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar *label)", },
  ["glGetObjectPtrLabel"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const void *ptr, GLsizei bufSize, GLsizei* length, GLchar *label)", },
  ["glObjectLabel"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum identifier, GLuint name, GLsizei length, const GLchar* label)", },
  ["glObjectPtrLabel"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const void *ptr, GLsizei length, const GLchar* label)", },
  ["glPopDebugGroup"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glPushDebugGroup"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum source, GLuint id, GLsizei length, const GLchar * message)", },
  ["glGetnUniformfv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei bufSize, GLfloat* params)", },
  ["glGetnUniformiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei bufSize, GLint* params)", },
  ["glGetnUniformuiv"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei bufSize, GLuint* params)", },
  ["glReadnPixels"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)", },
  ["glLGPUCopyImageSubDataNVX"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)", },
  ["glLGPUInterlockNVX"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glLGPUNamedBufferSubDataNVX"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)", },
  ["glMultiDrawArraysIndirectBindlessNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)", },
  ["glMultiDrawElementsIndirectBindlessNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)", },
  ["glMultiDrawArraysIndirectBindlessCountNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)", },
  ["glMultiDrawElementsIndirectBindlessCountNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum mode, GLenum type, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)", },
  ["glGetImageHandleNV"] = { type ="function",
    description = "",
    returns = "(GLuint64)",
    args = "(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)", },
  ["glGetTextureHandleNV"] = { type ="function",
    description = "",
    returns = "(GLuint64)",
    args = "(GLuint texture)", },
  ["glGetTextureSamplerHandleNV"] = { type ="function",
    description = "",
    returns = "(GLuint64)",
    args = "(GLuint texture, GLuint sampler)", },
  ["glIsImageHandleResidentNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint64 handle)", },
  ["glIsTextureHandleResidentNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint64 handle)", },
  ["glMakeImageHandleNonResidentNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 handle)", },
  ["glMakeImageHandleResidentNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 handle, GLenum access)", },
  ["glMakeTextureHandleNonResidentNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 handle)", },
  ["glMakeTextureHandleResidentNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 handle)", },
  ["glProgramUniformHandleui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64 value)", },
  ["glProgramUniformHandleui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64* values)", },
  ["glUniformHandleui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64 value)", },
  ["glUniformHandleui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64* value)", },
  ["glBlendBarrierNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glBlendParameteriNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint value)", },
  ["glViewportPositionWScaleNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLfloat xcoeff, GLfloat ycoeff)", },
  ["glCallCommandListNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint list)", },
  ["glCommandListSegmentsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint list, GLuint segments)", },
  ["glCompileCommandListNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint list)", },
  ["glCreateCommandListsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* lists)", },
  ["glCreateStatesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* states)", },
  ["glDeleteCommandListsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* lists)", },
  ["glDeleteStatesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* states)", },
  ["glDrawCommandsAddressNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count)", },
  ["glDrawCommandsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count)", },
  ["glDrawCommandsStatesAddressNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)", },
  ["glDrawCommandsStatesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)", },
  ["glGetCommandHeaderNV"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLenum tokenID, GLuint size)", },
  ["glGetStageIndexNV"] = { type ="function",
    description = "",
    returns = "(GLushort)",
    args = "(GLenum shadertype)", },
  ["glIsCommandListNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint list)", },
  ["glIsStateNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint state)", },
  ["glListDrawCommandsStatesClientNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)", },
  ["glStateCaptureNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint state, GLenum mode)", },
  ["glSubpixelPrecisionBiasNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint xbits, GLuint ybits)", },
  ["glConservativeRasterParameterfNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLfloat value)", },
  ["glConservativeRasterParameteriNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint param)", },
  ["glClearDepthdNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble depth)", },
  ["glDepthBoundsdNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble zmin, GLdouble zmax)", },
  ["glDepthRangedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLdouble zNear, GLdouble zFar)", },
  ["glDrawTextureNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)", },
  ["glDrawVkImageNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)", },
  ["glGetVkProcAddrNV"] = { type ="function",
    description = "",
    returns = "(GLVULKANPROCNV)",
    args = "(const GLchar* name)", },
  ["glSignalVkFenceNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 vkFence)", },
  ["glSignalVkSemaphoreNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 vkSemaphore)", },
  ["glWaitVkSemaphoreNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint64 vkSemaphore)", },
  ["glEvalMapsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum mode)", },
  ["glGetMapAttribParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLenum pname, GLfloat* params)", },
  ["glGetMapAttribParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLenum pname, GLint* params)", },
  ["glGetMapControlPointsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points)", },
  ["glGetMapParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLfloat* params)", },
  ["glGetMapParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLint* params)", },
  ["glMapControlPointsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points)", },
  ["glMapParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLfloat* params)", },
  ["glMapParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, const GLint* params)", },
  ["glSampleMaskIndexedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLbitfield mask)", },
  ["glTexRenderbufferNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint renderbuffer)", },
  ["glDeleteFencesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* fences)", },
  ["glFinishFenceNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint fence)", },
  ["glGenFencesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* fences)", },
  ["glGetFenceivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint fence, GLenum pname, GLint* params)", },
  ["glIsFenceNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint fence)", },
  ["glSetFenceNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint fence, GLenum condition)", },
  ["glTestFenceNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint fence)", },
  ["glFragmentCoverageColorNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint color)", },
  ["glGetProgramNamedParameterdvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLsizei len, const GLubyte* name, GLdouble *params)", },
  ["glGetProgramNamedParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLsizei len, const GLubyte* name, GLfloat *params)", },
  ["glProgramNamedParameter4dNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glProgramNamedParameter4dvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[])", },
  ["glProgramNamedParameter4fNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glProgramNamedParameter4fvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[])", },
  ["glRenderbufferStorageMultisampleCoverageNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)", },
  ["glProgramVertexLimitNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLint limit)", },
  ["glMulticastBarrierNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glMulticastBlitFramebufferNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)", },
  ["glMulticastBufferSubDataNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)", },
  ["glMulticastCopyBufferSubDataNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)", },
  ["glMulticastCopyImageSubDataNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)", },
  ["glMulticastFramebufferSampleLocationsfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)", },
  ["glMulticastGetQueryObjecti64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint gpu, GLuint id, GLenum pname, GLint64* params)", },
  ["glMulticastGetQueryObjectivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint gpu, GLuint id, GLenum pname, GLint* params)", },
  ["glMulticastGetQueryObjectui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint gpu, GLuint id, GLenum pname, GLuint64* params)", },
  ["glMulticastGetQueryObjectuivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint gpu, GLuint id, GLenum pname, GLuint* params)", },
  ["glMulticastWaitSyncNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint signalGpu, GLbitfield waitGpuMask)", },
  ["glRenderGpuMaskNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield mask)", },
  ["glProgramEnvParameterI4iNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)", },
  ["glProgramEnvParameterI4ivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLint *params)", },
  ["glProgramEnvParameterI4uiNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)", },
  ["glProgramEnvParameterI4uivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLuint *params)", },
  ["glProgramEnvParametersI4ivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLsizei count, const GLint *params)", },
  ["glProgramEnvParametersI4uivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLsizei count, const GLuint *params)", },
  ["glProgramLocalParameterI4iNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)", },
  ["glProgramLocalParameterI4ivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLint *params)", },
  ["glProgramLocalParameterI4uiNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)", },
  ["glProgramLocalParameterI4uivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLuint *params)", },
  ["glProgramLocalParametersI4ivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLsizei count, const GLint *params)", },
  ["glProgramLocalParametersI4uivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLsizei count, const GLuint *params)", },
  ["glGetUniformi64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64EXT* params)", },
  ["glGetUniformui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64EXT* params)", },
  ["glProgramUniform1i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64EXT x)", },
  ["glProgramUniform1i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)", },
  ["glProgramUniform1ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64EXT x)", },
  ["glProgramUniform1ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glProgramUniform2i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)", },
  ["glProgramUniform2i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)", },
  ["glProgramUniform2ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)", },
  ["glProgramUniform2ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glProgramUniform3i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)", },
  ["glProgramUniform3i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)", },
  ["glProgramUniform3ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)", },
  ["glProgramUniform3ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glProgramUniform4i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)", },
  ["glProgramUniform4i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)", },
  ["glProgramUniform4ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)", },
  ["glProgramUniform4ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glUniform1i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint64EXT x)", },
  ["glUniform1i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint64EXT* value)", },
  ["glUniform1ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64EXT x)", },
  ["glUniform1ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glUniform2i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint64EXT x, GLint64EXT y)", },
  ["glUniform2i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint64EXT* value)", },
  ["glUniform2ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64EXT x, GLuint64EXT y)", },
  ["glUniform2ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glUniform3i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)", },
  ["glUniform3i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint64EXT* value)", },
  ["glUniform3ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)", },
  ["glUniform3ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glUniform4i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)", },
  ["glUniform4i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLint64EXT* value)", },
  ["glUniform4ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)", },
  ["glUniform4ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glColor3hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf red, GLhalf green, GLhalf blue)", },
  ["glColor3hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glColor4hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha)", },
  ["glColor4hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glFogCoordhNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf fog)", },
  ["glFogCoordhvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* fog)", },
  ["glMultiTexCoord1hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLhalf s)", },
  ["glMultiTexCoord1hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLhalf* v)", },
  ["glMultiTexCoord2hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLhalf s, GLhalf t)", },
  ["glMultiTexCoord2hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLhalf* v)", },
  ["glMultiTexCoord3hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLhalf s, GLhalf t, GLhalf r)", },
  ["glMultiTexCoord3hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLhalf* v)", },
  ["glMultiTexCoord4hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q)", },
  ["glMultiTexCoord4hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, const GLhalf* v)", },
  ["glNormal3hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf nx, GLhalf ny, GLhalf nz)", },
  ["glNormal3hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glSecondaryColor3hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf red, GLhalf green, GLhalf blue)", },
  ["glSecondaryColor3hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glTexCoord1hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf s)", },
  ["glTexCoord1hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glTexCoord2hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf s, GLhalf t)", },
  ["glTexCoord2hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glTexCoord3hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf s, GLhalf t, GLhalf r)", },
  ["glTexCoord3hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glTexCoord4hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf s, GLhalf t, GLhalf r, GLhalf q)", },
  ["glTexCoord4hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glVertex2hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf x, GLhalf y)", },
  ["glVertex2hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glVertex3hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf x, GLhalf y, GLhalf z)", },
  ["glVertex3hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glVertex4hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf x, GLhalf y, GLhalf z, GLhalf w)", },
  ["glVertex4hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* v)", },
  ["glVertexAttrib1hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLhalf x)", },
  ["glVertexAttrib1hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLhalf* v)", },
  ["glVertexAttrib2hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLhalf x, GLhalf y)", },
  ["glVertexAttrib2hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLhalf* v)", },
  ["glVertexAttrib3hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLhalf x, GLhalf y, GLhalf z)", },
  ["glVertexAttrib3hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLhalf* v)", },
  ["glVertexAttrib4hNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w)", },
  ["glVertexAttrib4hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLhalf* v)", },
  ["glVertexAttribs1hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLhalf* v)", },
  ["glVertexAttribs2hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLhalf* v)", },
  ["glVertexAttribs3hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLhalf* v)", },
  ["glVertexAttribs4hvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLhalf* v)", },
  ["glVertexWeighthNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLhalf weight)", },
  ["glVertexWeighthvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const GLhalf* weight)", },
  ["glGetInternalformatSampleivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params)", },
  ["glBeginOcclusionQueryNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id)", },
  ["glDeleteOcclusionQueriesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* ids)", },
  ["glEndOcclusionQueryNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glGenOcclusionQueriesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* ids)", },
  ["glGetOcclusionQueryivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum pname, GLint* params)", },
  ["glGetOcclusionQueryuivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum pname, GLuint* params)", },
  ["glIsOcclusionQueryNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint id)", },
  ["glProgramBufferParametersIivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)", },
  ["glProgramBufferParametersIuivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)", },
  ["glProgramBufferParametersfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)", },
  ["glCopyPathNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint resultPath, GLuint srcPath)", },
  ["glCoverFillPathInstancedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)", },
  ["glCoverFillPathNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum coverMode)", },
  ["glCoverStrokePathInstancedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)", },
  ["glCoverStrokePathNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum coverMode)", },
  ["glDeletePathsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLsizei range)", },
  ["glGenPathsNV"] = { type ="function",
    description = "",
    returns = "(GLuint)",
    args = "(GLsizei range)", },
  ["glGetPathColorGenfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum color, GLenum pname, GLfloat* value)", },
  ["glGetPathColorGenivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum color, GLenum pname, GLint* value)", },
  ["glGetPathCommandsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLubyte* commands)", },
  ["glGetPathCoordsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLfloat* coords)", },
  ["glGetPathDashArrayNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLfloat* dashArray)", },
  ["glGetPathLengthNV"] = { type ="function",
    description = "",
    returns = "(GLfloat)",
    args = "(GLuint path, GLsizei startSegment, GLsizei numSegments)", },
  ["glGetPathMetricRangeNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics)", },
  ["glGetPathMetricsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)", },
  ["glGetPathParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum pname, GLfloat* value)", },
  ["glGetPathParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum pname, GLint* value)", },
  ["glGetPathSpacingNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)", },
  ["glGetPathTexGenfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texCoordSet, GLenum pname, GLfloat* value)", },
  ["glGetPathTexGenivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texCoordSet, GLenum pname, GLint* value)", },
  ["glGetProgramResourcefvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLfloat *params)", },
  ["glInterpolatePathsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)", },
  ["glIsPathNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint path)", },
  ["glIsPointInFillPathNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint path, GLuint mask, GLfloat x, GLfloat y)", },
  ["glIsPointInStrokePathNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint path, GLfloat x, GLfloat y)", },
  ["glMatrixLoad3x2fNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixLoad3x3fNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixLoadTranspose3x3fNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixMult3x2fNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixMult3x3fNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glMatrixMultTranspose3x3fNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum matrixMode, const GLfloat* m)", },
  ["glPathColorGenNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs)", },
  ["glPathCommandsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords)", },
  ["glPathCoordsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)", },
  ["glPathCoverDepthFuncNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum zfunc)", },
  ["glPathDashArrayNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLsizei dashCount, const GLfloat* dashArray)", },
  ["glPathFogGenNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum genMode)", },
  ["glPathGlyphIndexArrayNV"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)", },
  ["glPathGlyphIndexRangeNV"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])", },
  ["glPathGlyphRangeNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)", },
  ["glPathGlyphsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)", },
  ["glPathMemoryGlyphIndexArrayNV"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)", },
  ["glPathParameterfNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum pname, GLfloat value)", },
  ["glPathParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum pname, const GLfloat* value)", },
  ["glPathParameteriNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum pname, GLint value)", },
  ["glPathParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum pname, const GLint* value)", },
  ["glPathStencilDepthOffsetNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLfloat factor, GLfloat units)", },
  ["glPathStencilFuncNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum func, GLint ref, GLuint mask)", },
  ["glPathStringNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum format, GLsizei length, const void *pathString)", },
  ["glPathSubCommandsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords)", },
  ["glPathSubCoordsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)", },
  ["glPathTexGenNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs)", },
  ["glPointAlongPathNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)", },
  ["glProgramPathFragmentInputGenNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs)", },
  ["glStencilFillPathInstancedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)", },
  ["glStencilFillPathNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum fillMode, GLuint mask)", },
  ["glStencilStrokePathInstancedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)", },
  ["glStencilStrokePathNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLint reference, GLuint mask)", },
  ["glStencilThenCoverFillPathInstancedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)", },
  ["glStencilThenCoverFillPathNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)", },
  ["glStencilThenCoverStrokePathInstancedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)", },
  ["glStencilThenCoverStrokePathNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint path, GLint reference, GLuint mask, GLenum coverMode)", },
  ["glTransformPathNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues)", },
  ["glWeightPathsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint resultPath, GLsizei numPaths, const GLuint paths[], const GLfloat weights[])", },
  ["glFlushPixelDataRangeNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target)", },
  ["glPixelDataRangeNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei length, void *pointer)", },
  ["glGetVideoi64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_slot, GLenum pname, GLint64EXT* params)", },
  ["glGetVideoivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_slot, GLenum pname, GLint* params)", },
  ["glGetVideoui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_slot, GLenum pname, GLuint64EXT* params)", },
  ["glGetVideouivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_slot, GLenum pname, GLuint* params)", },
  ["glPresentFrameDualFillNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)", },
  ["glPresentFrameKeyedNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)", },
  ["glPrimitiveRestartNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glCombinerInputNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)", },
  ["glCombinerOutputNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)", },
  ["glCombinerParameterfNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLfloat param)", },
  ["glCombinerParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLfloat* params)", },
  ["glCombinerParameteriNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLint param)", },
  ["glCombinerParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, const GLint* params)", },
  ["glFinalCombinerInputNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)", },
  ["glGetCombinerInputParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params)", },
  ["glGetCombinerInputParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params)", },
  ["glGetCombinerOutputParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum stage, GLenum portion, GLenum pname, GLfloat* params)", },
  ["glGetCombinerOutputParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum stage, GLenum portion, GLenum pname, GLint* params)", },
  ["glGetFinalCombinerInputParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum variable, GLenum pname, GLfloat* params)", },
  ["glGetFinalCombinerInputParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum variable, GLenum pname, GLint* params)", },
  ["glCombinerStageParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum stage, GLenum pname, const GLfloat* params)", },
  ["glGetCombinerStageParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum stage, GLenum pname, GLfloat* params)", },
  ["glFramebufferSampleLocationsfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint start, GLsizei count, const GLfloat* v)", },
  ["glNamedFramebufferSampleLocationsfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)", },
  ["glGetBufferParameterui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum pname, GLuint64EXT* params)", },
  ["glGetIntegerui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum value, GLuint64EXT* result)", },
  ["glGetNamedBufferParameterui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLenum pname, GLuint64EXT* params)", },
  ["glIsBufferResidentNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLenum target)", },
  ["glIsNamedBufferResidentNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLuint buffer)", },
  ["glMakeBufferNonResidentNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target)", },
  ["glMakeBufferResidentNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLenum access)", },
  ["glMakeNamedBufferNonResidentNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer)", },
  ["glMakeNamedBufferResidentNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint buffer, GLenum access)", },
  ["glProgramUniformui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLuint64EXT value)", },
  ["glProgramUniformui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glUniformui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLuint64EXT value)", },
  ["glUniformui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint location, GLsizei count, const GLuint64EXT* value)", },
  ["glTexImage2DMultisampleCoverageNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)", },
  ["glTexImage3DMultisampleCoverageNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)", },
  ["glTextureImage2DMultisampleCoverageNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)", },
  ["glTextureImage2DMultisampleNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)", },
  ["glTextureImage3DMultisampleCoverageNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)", },
  ["glTextureImage3DMultisampleNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)", },
  ["glActiveVaryingNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, const GLchar *name)", },
  ["glBindBufferOffsetNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLuint buffer, GLintptr offset)", },
  ["glGetActiveVaryingNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)", },
  ["glGetVaryingLocationNV"] = { type ="function",
    description = "",
    returns = "(GLint)",
    args = "(GLuint program, const GLchar *name)", },
  ["glTransformFeedbackAttribsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint count, const GLint *attribs, GLenum bufferMode)", },
  ["glVDPAUFiniNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glVDPAUGetSurfaceivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values)", },
  ["glVDPAUInitNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(const void* vdpDevice, const void*getProcAddress)", },
  ["glVDPAUIsSurfaceNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLvdpauSurfaceNV surface)", },
  ["glVDPAUMapSurfacesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces)", },
  ["glVDPAURegisterOutputSurfaceNV"] = { type ="function",
    description = "",
    returns = "(GLvdpauSurfaceNV)",
    args = "(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)", },
  ["glVDPAURegisterVideoSurfaceNV"] = { type ="function",
    description = "",
    returns = "(GLvdpauSurfaceNV)",
    args = "(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)", },
  ["glVDPAUSurfaceAccessNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLvdpauSurfaceNV surface, GLenum access)", },
  ["glVDPAUUnmapSurfacesNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei numSurface, const GLvdpauSurfaceNV* surfaces)", },
  ["glVDPAUUnregisterSurfaceNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLvdpauSurfaceNV surface)", },
  ["glFlushVertexArrayRangeNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(void)", },
  ["glVertexArrayRangeNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei length, void *pointer)", },
  ["glGetVertexAttribLi64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLint64EXT* params)", },
  ["glGetVertexAttribLui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum pname, GLuint64EXT* params)", },
  ["glVertexAttribL1i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint64EXT x)", },
  ["glVertexAttribL1i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint64EXT* v)", },
  ["glVertexAttribL1ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint64EXT x)", },
  ["glVertexAttribL1ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint64EXT* v)", },
  ["glVertexAttribL2i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint64EXT x, GLint64EXT y)", },
  ["glVertexAttribL2i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint64EXT* v)", },
  ["glVertexAttribL2ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint64EXT x, GLuint64EXT y)", },
  ["glVertexAttribL2ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint64EXT* v)", },
  ["glVertexAttribL3i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)", },
  ["glVertexAttribL3i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint64EXT* v)", },
  ["glVertexAttribL3ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)", },
  ["glVertexAttribL3ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint64EXT* v)", },
  ["glVertexAttribL4i64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)", },
  ["glVertexAttribL4i64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLint64EXT* v)", },
  ["glVertexAttribL4ui64NV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)", },
  ["glVertexAttribL4ui64vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, const GLuint64EXT* v)", },
  ["glVertexAttribLFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint size, GLenum type, GLsizei stride)", },
  ["glBufferAddressRangeNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)", },
  ["glColorFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride)", },
  ["glEdgeFlagFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei stride)", },
  ["glFogCoordFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLsizei stride)", },
  ["glGetIntegerui64i_vNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum value, GLuint index, GLuint64EXT result[])", },
  ["glIndexFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLsizei stride)", },
  ["glNormalFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum type, GLsizei stride)", },
  ["glSecondaryColorFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride)", },
  ["glTexCoordFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride)", },
  ["glVertexAttribFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)", },
  ["glVertexAttribIFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLint size, GLenum type, GLsizei stride)", },
  ["glVertexFormatNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLint size, GLenum type, GLsizei stride)", },
  ["glAreProgramsResidentNV"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(GLsizei n, const GLuint* ids, GLboolean *residences)", },
  ["glBindProgramNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint id)", },
  ["glDeleteProgramsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, const GLuint* ids)", },
  ["glExecuteProgramNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint id, const GLfloat* params)", },
  ["glGenProgramsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* ids)", },
  ["glGetProgramParameterdvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLenum pname, GLdouble* params)", },
  ["glGetProgramParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLenum pname, GLfloat* params)", },
  ["glGetProgramStringNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint id, GLenum pname, GLubyte* program)", },
  ["glGetTrackMatrixivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint address, GLenum pname, GLint* params)", },
  ["glLoadProgramNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint id, GLsizei len, const GLubyte* program)", },
  ["glProgramParameter4dNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)", },
  ["glProgramParameter4dvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLdouble* params)", },
  ["glProgramParameter4fNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)", },
  ["glProgramParameter4fvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, const GLfloat* params)", },
  ["glProgramParameters4dvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLsizei num, const GLdouble* params)", },
  ["glProgramParameters4fvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint index, GLsizei num, const GLfloat* params)", },
  ["glRequestResidentProgramsNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLsizei n, GLuint* ids)", },
  ["glTrackMatrixNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLenum target, GLuint address, GLenum matrix, GLenum transform)", },
  ["glVertexAttrib4ubNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)", },
  ["glVertexAttribs1dvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLdouble* v)", },
  ["glVertexAttribs1fvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLfloat* v)", },
  ["glVertexAttribs1svNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLshort* v)", },
  ["glVertexAttribs2dvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLdouble* v)", },
  ["glVertexAttribs2fvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLfloat* v)", },
  ["glVertexAttribs2svNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLshort* v)", },
  ["glVertexAttribs3dvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLdouble* v)", },
  ["glVertexAttribs3fvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLfloat* v)", },
  ["glVertexAttribs3svNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLshort* v)", },
  ["glVertexAttribs4dvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLdouble* v)", },
  ["glVertexAttribs4fvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLfloat* v)", },
  ["glVertexAttribs4svNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLshort* v)", },
  ["glVertexAttribs4ubvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLsizei n, const GLubyte* v)", },
  ["glBeginVideoCaptureNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot)", },
  ["glBindVideoCaptureStreamBufferNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)", },
  ["glBindVideoCaptureStreamTextureNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)", },
  ["glEndVideoCaptureNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot)", },
  ["glGetVideoCaptureStreamdvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params)", },
  ["glGetVideoCaptureStreamfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params)", },
  ["glGetVideoCaptureStreamivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params)", },
  ["glGetVideoCaptureivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLenum pname, GLint* params)", },
  ["glVideoCaptureNV"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "(GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT *capture_time)", },
  ["glVideoCaptureStreamParameterdvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params)", },
  ["glVideoCaptureStreamParameterfvNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params)", },
  ["glVideoCaptureStreamParameterivNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params)", },
  ["glViewportSwizzleNV"] = { type ="function",
    description = "",
    returns = "()",
    args = "(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)", },
  ["glewInit"] = { type ="function",
    description = "",
    returns = "(GLenum)",
    args = "()", },
  ["glewIsSupported"] = { type ="function",
    description = "",
    returns = "(GLboolean)",
    args = "(const char* name)", },
  }

return {
  glewgl = {
    type = "lib",
    description = "OpenGL Wrapper with GLEW",
    childs = api,
  },
  gl = {
    type = "lib",
    description = "OpenGL Wrapper with GLEW",
    childs = api,
  },
}
